{"version":3,"file":"index.CTAJKbeW.js","sources":["../../src/config/firebase.config.js","../../src/config/firebase.js","../../src/components/common/LoadingSpinner.jsx","../../src/components/common/ErrorDisplay.jsx","../../src/utils/logger.js","../../src/components/common/ErrorBoundary.jsx","../../src/contexts/UserContext.jsx","../../src/components/Navigation.jsx","../../src/components/auth/LoginForm.jsx","../../src/firebase.js","../../src/components/auth/LoginPage.jsx","../../src/stores/notificationStore.js","../../src/contexts/PatientContext.jsx","../../src/components/patients/PatientAlert.jsx","../../src/utils/gridViews.js","../../src/components/dashboard/NarrativeSummary.jsx","../../src/pages/Dashboard.jsx","../../src/utils/gridUtils.js","../../src/components/patients/PatientList.jsx","../../src/pages/settings/Settings.jsx","../../src/pages/Performance.jsx","../../src/pages/EHRAlerts.jsx","../../src/services/cohortService.js","../../src/pages/AIRecommendations.jsx","../../src/pages/PatientContextHistory.jsx","../../src/contexts/ThemeContext.jsx","../../src/components/notifications/NotificationCenter.jsx","../../src/components/transitions/PageTransition.jsx","../../src/components/patients/chart/RiskScoreCard.jsx","../../src/components/patients/chart/QualityMetrics.jsx","../../src/components/patients/chart/CareGaps.jsx","../../src/components/patients/chart/CarePathway.jsx","../../src/components/patients/PatientDetails.jsx","../../src/components/layout/Header.jsx","../../src/App.jsx","../../src/main.jsx"],"sourcesContent":["export const firebaseConfig = {\r\n  apiKey: \"AIzaSyBm2rIxMiZUxMWtzewLz1s6hZeNQEDvm6s\",\r\n  authDomain: \"galaxyhealth.firebaseapp.com\",\r\n  projectId: \"galaxyhealth\",\r\n  storageBucket: \"galaxyhealth.appspot.com\",\r\n  messagingSenderId: \"415572460225\",\r\n  appId: \"1:415572460225:web:0e67f8d39701a6699d0a40\"\r\n}; ","import { initializeApp } from 'firebase/app';\r\nimport { getFirestore } from 'firebase/firestore';\r\nimport { getAuth, GoogleAuthProvider } from 'firebase/auth';\r\nimport { firebaseConfig } from './firebase.config.js';\r\n\r\n// Initialize Firebase first\r\nconst app = initializeApp(firebaseConfig);\r\nconst db = getFirestore(app);\r\nconst auth = getAuth(app);\r\nconst googleProvider = new GoogleAuthProvider();\r\n\r\n// Debug logging after initialization\r\nif (import.meta.env.DEV) {\r\n  console.log('Firebase config:', {\r\n    ...firebaseConfig,\r\n    apiKey: 'HIDDEN'\r\n  });\r\n  \r\n  window.firebase = { firestore: db };\r\n}\r\n\r\n\r\n// Exports after everything is initialized\r\nexport { db, auth, googleProvider };\r\nexport const getAuthToken = async () => {\r\n  const user = auth.currentUser;\r\n  if (!user) throw new Error('No user is signed in');\r\n  return user.getIdToken();\r\n};\r\nexport default app; ","import React from 'react';\r\nimport { Center, Loader, Text, Stack } from '@mantine/core';\r\n\r\nexport const LoadingSpinner = ({ message = 'Loading...' }) => (\r\n  <Center style={{ height: '100%', minHeight: 200 }}>\r\n    <Stack align=\"center\" spacing=\"xs\">\r\n      <Loader size=\"lg\" />\r\n      <Text size=\"sm\" color=\"dimmed\">{message}</Text>\r\n    </Stack>\r\n  </Center>\r\n);\r\n\r\nexport default LoadingSpinner; ","import React from 'react';\r\nimport { Alert, Container } from '@mantine/core';\r\nimport { IconAlertCircle } from '@tabler/icons-react';\r\n\r\nconst ErrorDisplay = ({ error }) => {\r\n  return (\r\n    <Container size=\"sm\" py=\"xl\">\r\n      <Alert\r\n        icon={<IconAlertCircle size={16} />}\r\n        title=\"Error\"\r\n        color=\"red\"\r\n        variant=\"filled\"\r\n      >\r\n        {error?.message || 'An unexpected error occurred'}\r\n      </Alert>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default ErrorDisplay; ","export const logError = (error, context = {}) => {\r\n  console.error('Error:', {\r\n    message: error.message,\r\n    code: error.code,\r\n    context,\r\n    stack: error.stack\r\n  });\r\n};\r\n\r\nexport const logInfo = (message, data = {}) => {\r\n  console.log(message, data);\r\n}; ","import React from 'react';\r\nimport { Alert, Container, Button, Stack } from '@mantine/core';\r\nimport { IconAlertCircle } from '@tabler/icons-react';\r\nimport { logError } from '../../utils/logger';\r\n\r\nexport class ErrorBoundary extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { hasError: false, error: null };\r\n  }\r\n\r\n  static getDerivedStateFromError(error) {\r\n    return { hasError: true, error };\r\n  }\r\n\r\n  componentDidCatch(error, info) {\r\n    logError(error, { \r\n      component: 'ErrorBoundary',\r\n      info \r\n    });\r\n  }\r\n\r\n  render() {\r\n    if (this.state.hasError) {\r\n      return (\r\n        <Container size=\"sm\" py=\"xl\">\r\n          <Alert\r\n            icon={<IconAlertCircle size={16} />}\r\n            title=\"Something went wrong\"\r\n            color=\"red\"\r\n            variant=\"filled\"\r\n          >\r\n            <Stack spacing=\"md\">\r\n              <div>{this.state.error?.message || 'An unexpected error occurred'}</div>\r\n              <Button \r\n                variant=\"white\" \r\n                onClick={() => window.location.reload()}\r\n              >\r\n                Reload Page\r\n              </Button>\r\n            </Stack>\r\n          </Alert>\r\n        </Container>\r\n      );\r\n    }\r\n\r\n    return this.props.children;\r\n  }\r\n}\r\n\r\n// Add a default export as well\r\nexport default ErrorBoundary; ","import React, { createContext, useContext, useState, useEffect } from 'react';\r\nimport { auth, db } from '../config/firebase';\r\nimport { onAuthStateChanged, getAuth, signOut } from 'firebase/auth';\r\nimport { doc, getDoc, setDoc, updateDoc } from 'firebase/firestore';\r\nimport { storageService } from '../services/storageService';\r\nimport { LoadingSpinner, ErrorDisplay } from '../components/common';\r\n\r\n// Create context outside of components\r\nconst UserContext = createContext(null);\r\n\r\n// Create the hook\r\nconst useUser = () => {\r\n  const context = useContext(UserContext);\r\n  if (!context) {\r\n    throw new Error('useUser must be used within a UserProvider');\r\n  }\r\n  return context;\r\n};\r\n\r\n// Create the provider component\r\nconst UserProvider = ({ children }) => {\r\n  console.log('UserProvider initializing');\r\n  const [user, setUser] = useState(null);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n\r\n  const createNewUser = async (firebaseUser) => {\r\n    try {\r\n      const registrationDate = new Date().toISOString();\r\n      const isAdmin = firebaseUser.email === 'brendansmithelion@gmail.com';\r\n      \r\n      const newUserData = {\r\n        uid: firebaseUser.uid,\r\n        email: firebaseUser.email,\r\n        displayName: firebaseUser.displayName || firebaseUser.email,\r\n        photoURL: firebaseUser.photoURL,\r\n        role: isAdmin ? 'admin' : 'user',\r\n        registeredAt: registrationDate,\r\n        createdAt: registrationDate,\r\n        lastUpdated: registrationDate,\r\n        isActive: true,\r\n        accountStatus: 'active'\r\n      };\r\n\r\n      // Create user document first\r\n      const userRef = doc(db, 'users', firebaseUser.uid);\r\n      await setDoc(userRef, newUserData);\r\n\r\n      // After user document is created, create settings\r\n      const settingsRef = doc(db, 'userSettings', firebaseUser.uid);\r\n      const settingsData = {\r\n        theme: 'dark',\r\n        notifications: true,\r\n        dashboardLayout: 'default',\r\n        language: 'en',\r\n        timezone: Intl.DateTimeFormat().resolvedOptions().timeZone,\r\n        createdAt: registrationDate,\r\n        updatedAt: registrationDate\r\n      };\r\n      await setDoc(settingsRef, settingsData);\r\n\r\n      // Finally create preferences\r\n      const prefsRef = doc(db, 'userPreferences', firebaseUser.uid);\r\n      const prefsData = {\r\n        favoritePatients: [],\r\n        recentSearches: [],\r\n        customViews: [],\r\n        shortcuts: [],\r\n        createdAt: registrationDate,\r\n        updatedAt: registrationDate\r\n      };\r\n      await setDoc(prefsRef, prefsData);\r\n\r\n      return newUserData;\r\n    } catch (error) {\r\n      console.error('Error creating new user:', error);\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    console.log('Setting up auth listener');\r\n    const auth = getAuth();\r\n    let unsubscribe;\r\n\r\n    try {\r\n      unsubscribe = onAuthStateChanged(auth, async (firebaseUser) => {\r\n        console.log('Auth state changed:', firebaseUser ? 'User logged in' : 'No user');\r\n        try {\r\n          setLoading(true);\r\n          console.log('Current firebaseUser:', firebaseUser?.email);\r\n          \r\n          if (firebaseUser) {\r\n            const userRef = doc(db, 'users', firebaseUser.uid);\r\n            console.log('Attempting to read user document for:', firebaseUser.uid);\r\n            \r\n            try {\r\n              const docSnap = await getDoc(userRef);\r\n              console.log('Document exists?', docSnap.exists());\r\n\r\n              let userData;\r\n              if (docSnap.exists()) {\r\n                userData = docSnap.data();\r\n                console.log('Retrieved user data:', userData);\r\n              } else {\r\n                console.log('Creating new user document');\r\n                userData = await createNewUser(firebaseUser);\r\n              }\r\n\r\n              setUser({\r\n                ...firebaseUser,\r\n                ...userData\r\n              });\r\n            } catch (error) {\r\n              console.error('Specific Firestore error:', {\r\n                code: error.code,\r\n                message: error.message,\r\n                details: error\r\n              });\r\n              throw error;\r\n            }\r\n          } else {\r\n            setUser(null);\r\n          }\r\n        } catch (error) {\r\n          console.error('Auth state change error:', {\r\n            code: error.code,\r\n            message: error.message,\r\n            details: error\r\n          });\r\n          setError(error);\r\n        } finally {\r\n          setLoading(false);\r\n        }\r\n      });\r\n    } catch (error) {\r\n      console.error('Auth setup error:', error);\r\n      setError(error);\r\n      setLoading(false);\r\n    }\r\n\r\n    return () => unsubscribe?.();\r\n  }, []);\r\n\r\n  const value = {\r\n    user,\r\n    loading,\r\n    error,\r\n    login: async (userData) => {\r\n      setUser(userData);\r\n    },\r\n    logout: async () => {\r\n      try {\r\n        await signOut(auth);\r\n        setUser(null);\r\n      } catch (error) {\r\n        console.error('Logout error:', error);\r\n        throw error;\r\n      }\r\n    },\r\n    makeAdmin: async () => {\r\n      try {\r\n        const userRef = doc(db, 'users', user.uid);\r\n        await updateDoc(userRef, {\r\n          role: 'admin',\r\n          updatedAt: new Date().toISOString()\r\n        });\r\n        \r\n        // Force token refresh to get new claims\r\n        await auth.currentUser.getIdToken(true);\r\n        window.location.reload();\r\n      } catch (error) {\r\n        console.error('Error making user admin:', error);\r\n      }\r\n    }\r\n  };\r\n\r\n  if (loading) return <LoadingSpinner />;\r\n  if (error) return <ErrorDisplay error={error} />;\r\n\r\n  return (\r\n    <UserContext.Provider value={value}>\r\n      {children}\r\n    </UserContext.Provider>\r\n  );\r\n};\r\n\r\n// Export everything at once at the bottom\r\nexport { useUser, UserProvider }; ","import React from 'react';\nimport { Link, useLocation } from 'react-router-dom';\nimport { useUser } from '../contexts/UserContext';\nimport { Navbar, Stack, Box, Text, Group, Divider } from '@mantine/core';\nimport { \n  IconHome, \n  IconUsers, \n  IconCalendar, \n  IconSettings, \n  IconChartBar, \n  IconCoin, \n  IconDatabase, \n  IconHistory \n} from '@tabler/icons-react';\nimport { createStyles } from '@mantine/core';\nimport { motion, AnimatePresence } from 'framer-motion';\n\nconst useStyles = createStyles((theme) => ({\n  navbar: {\n    backgroundColor: theme.colorScheme === 'dark' ? theme.colors.dark[7] : theme.white,\n    height: '100vh'\n  },\n\n  navItem: {\n    display: 'flex',\n    alignItems: 'center',\n    padding: theme.spacing.md,\n    borderRadius: theme.radius.md,\n    transition: 'all 200ms ease',\n    color: theme.colorScheme === 'dark' ? theme.colors.dark[0] : theme.colors.gray[7],\n    \n    '&:hover': {\n      backgroundColor: theme.colorScheme === 'dark' ? theme.colors.dark[6] : theme.colors.gray[0],\n    },\n\n    '&[data-active=\"true\"]': {\n      backgroundColor: theme.fn.variant({ variant: 'light', color: 'blue' }).background,\n      color: theme.fn.variant({ variant: 'light', color: 'blue' }).color,\n      \n      '& .nav-icon': {\n        color: theme.fn.variant({ variant: 'light', color: 'blue' }).color,\n      }\n    },\n\n    [theme.fn.smallerThan('sm')]: {\n      padding: theme.spacing.xs,\n      borderRadius: 0,\n      '&[data-active=\"true\"]': {\n        borderRadius: 0,\n      }\n    },\n  },\n\n  navIcon: {\n    color: theme.colorScheme === 'dark' ? theme.colors.dark[2] : theme.colors.gray[6],\n    marginRight: theme.spacing.sm,\n    \n    [theme.fn.smallerThan('sm')]: {\n      marginRight: 0,\n    }\n  },\n\n  navLabel: {\n    [theme.fn.smallerThan('sm')]: {\n      fontSize: theme.fontSizes.xs,\n    }\n  },\n\n  mobileNav: {\n    display: 'flex',\n    flexDirection: 'column'\n  },\n\n  divider: {\n    marginBottom: theme.spacing.xs\n  }\n}));\n\nconst Navigation = () => {\n  const { classes } = useStyles();\n  const location = useLocation();\n\n  const navigationItems = [\n    { id: 'dashboard', icon: IconHome, label: 'Home', to: '/dashboard' },\n    { id: 'patients', icon: IconUsers, label: 'My Patients', to: '/patients' },\n    { id: 'performance', icon: IconChartBar, label: 'Performance', to: '/performance' },\n    { id: 'ehr-alerts', icon: IconDatabase, label: 'EHR Alerts', to: '/ehr-alerts' },\n    { id: 'admin', icon: IconHistory, label: 'Admin', to: '/patient-context' },\n  ];\n\n  const settingsItem = {\n    id: 'settings',\n    icon: IconSettings,\n    label: 'Settings',\n    to: '/settings'\n  };\n\n  const isActiveRoute = (path) => location.pathname === path;\n\n  const navItemVariants = {\n    initial: {\n      opacity: 0,\n      x: -20\n    },\n    animate: {\n      opacity: 1,\n      x: 0,\n      transition: {\n        duration: 0.2\n      }\n    },\n    exit: {\n      opacity: 0,\n      x: 20,\n      transition: {\n        duration: 0.2\n      }\n    }\n  };\n\n  const NavItem = ({ icon: Icon, label, to, index, id }) => (\n    <motion.div\n      key={id}\n      variants={navItemVariants}\n      initial=\"initial\"\n      animate=\"animate\"\n      exit=\"exit\"\n      transition={{\n        delay: index * 0.1\n      }}\n    >\n      <Box\n        component={Link}\n        to={to}\n        className={classes.navItem}\n        data-active={isActiveRoute(to)}\n      >\n        <Group spacing=\"sm\" noWrap>\n          <Icon size={20} className={classes.navIcon + ' nav-icon'} />\n          <Text className={classes.navLabel}>{label}</Text>\n        </Group>\n      </Box>\n    </motion.div>\n  );\n\n  return (\n    <Navbar p=\"md\" className={classes.navbar} width={{ base: 250 }}>\n      <Stack spacing=\"xs\" className={classes.mobileNav} sx={{ height: '100%' }}>\n        <Box sx={{ flex: 1 }}>\n          <AnimatePresence mode=\"sync\">\n            {navigationItems.map((item, index) => (\n              <NavItem \n                key={item.id} \n                {...item} \n                index={index}\n              />\n            ))}\n          </AnimatePresence>\n        </Box>\n\n        <Box>\n          <Divider className={classes.divider} />\n          <NavItem \n            key={settingsItem.id} \n            {...settingsItem} \n            index={navigationItems.length}\n          />\n        </Box>\n      </Stack>\n    </Navbar>\n  );\n};\n\nexport default Navigation; ","import React, { useState } from 'react';\r\nimport { TextInput, Button, Group, Box, Divider, Stack } from '@mantine/core';\r\nimport { auth } from '../../config/firebase';\r\nimport { signInWithEmailAndPassword, GoogleAuthProvider, signInWithPopup } from 'firebase/auth';\r\nimport { IconBrandGoogle } from '@tabler/icons-react';\r\n\r\nconst LoginForm = ({ onGoogleSignIn }) => {\r\n  const [email, setEmail] = useState('');\r\n  const [password, setPassword] = useState('');\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState('');\r\n\r\n  const handleEmailLogin = async (e) => {\r\n    e.preventDefault();\r\n    setLoading(true);\r\n    try {\r\n      await signInWithEmailAndPassword(auth, email, password);\r\n    } catch (err) {\r\n      setError(err.message);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const handleGoogleLogin = async () => {\r\n    setLoading(true);\r\n    try {\r\n      const provider = new GoogleAuthProvider();\r\n      await signInWithPopup(auth, provider);\r\n    } catch (err) {\r\n      setError(err.message);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Box sx={{ maxWidth: 300 }} mx=\"auto\">\r\n      <Stack spacing=\"md\">\r\n        <Button \r\n          leftIcon={<IconBrandGoogle size={16} />}\r\n          variant=\"default\"\r\n          onClick={onGoogleSignIn}\r\n          fullWidth\r\n        >\r\n          Continue with Google\r\n        </Button>\r\n      </Stack>\r\n      \r\n      <Divider label=\"Or\" labelPosition=\"center\" mb=\"md\" />\r\n      \r\n      <form onSubmit={handleEmailLogin}>\r\n        <TextInput\r\n          required\r\n          label=\"Email\"\r\n          value={email}\r\n          onChange={(e) => setEmail(e.target.value)}\r\n          error={error}\r\n          mb=\"md\"\r\n        />\r\n        <TextInput\r\n          required\r\n          type=\"password\"\r\n          label=\"Password\"\r\n          value={password}\r\n          onChange={(e) => setPassword(e.target.value)}\r\n          mb=\"md\"\r\n        />\r\n        <Group position=\"right\">\r\n          <Button type=\"submit\" loading={loading}>\r\n            Sign In\r\n          </Button>\r\n        </Group>\r\n      </form>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default LoginForm; ","import { initializeApp } from 'firebase/app';\r\nimport { getFirestore } from 'firebase/firestore';\r\nimport { getAuth, GoogleAuthProvider } from 'firebase/auth';\r\nimport { firebaseConfig } from './config/firebase.config.js';\r\n\r\n// Initialize Firebase first\r\nconst app = initializeApp(firebaseConfig);\r\nconst db = getFirestore(app);\r\nconst auth = getAuth(app);\r\nconst googleProvider = new GoogleAuthProvider();\r\n\r\n// Debug logging after initialization\r\nconst isDev = typeof window !== 'undefined' \r\n  ? import.meta?.env?.DEV \r\n  : process.env.NODE_ENV === 'development';\r\n\r\nif (isDev) {\r\n  if (typeof window !== 'undefined') {\r\n    window.firebase = { firestore: db };\r\n  }\r\n  console.log('Firebase config:', {\r\n    ...firebaseConfig,\r\n    apiKey: 'HIDDEN'\r\n  });\r\n}\r\n\r\n// Exports after everything is initialized\r\nexport { db, auth, googleProvider };\r\nexport const getAuthToken = async () => {\r\n  const user = auth.currentUser;\r\n  if (!user) throw new Error('No user is signed in');\r\n  return user.getIdToken();\r\n};\r\nexport default app; ","import { Container, Paper, Title } from '@mantine/core';\r\nimport LoginForm from './LoginForm';\r\nimport { signInWithPopup } from 'firebase/auth';\r\nimport { auth, googleProvider } from '../../firebase';\r\nimport { useNavigate } from 'react-router-dom';\r\n\r\nconst LoginPage = () => {\r\n  const navigate = useNavigate();\r\n\r\n  const handleGoogleSignIn = async () => {\r\n    try {\r\n      const result = await signInWithPopup(auth, googleProvider);\r\n      console.log('Google sign in successful:', result.user);\r\n      navigate('/dashboard');\r\n    } catch (error) {\r\n      console.error('Google sign in error:', error);\r\n      if (error.code === 'auth/popup-blocked') {\r\n        alert('Please allow popups for this site');\r\n      } else {\r\n        alert('Error signing in with Google');\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Container size=\"sm\" py=\"xl\">\r\n      <Paper radius=\"md\" p=\"xl\" withBorder>\r\n        <Title order={2} align=\"center\" mb=\"xl\">Welcome to Galaxy Health</Title>\r\n        <LoginForm onGoogleSignIn={handleGoogleSignIn} />\r\n      </Paper>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default LoginPage; ","import { create } from 'zustand';\r\nimport { \r\n  collection, \r\n  query, \r\n  orderBy, \r\n  onSnapshot,\r\n  updateDoc,\r\n  doc,\r\n  writeBatch,\r\n  where,\r\n  addDoc,\r\n  serverTimestamp,\r\n  limit\r\n} from 'firebase/firestore';\r\nimport { db, auth } from '../firebase';\r\n\r\nconst useNotificationStore = create((set, get) => {\r\n  console.log('Creating notification store');\r\n  \r\n  return {\r\n    notifications: [],\r\n    loading: true,\r\n    error: null,\r\n\r\n    initialize: () => {\r\n      console.log('Initializing notifications');\r\n      let unsubscribe = () => {};\r\n\r\n      try {\r\n        if (!auth.currentUser) {\r\n          console.log('No authenticated user');\r\n          set({ loading: false });\r\n          return () => {};\r\n        }\r\n\r\n        console.log('Setting up Firestore listener for:', auth.currentUser.uid);\r\n        const notificationsRef = collection(db, 'notifications');\r\n        const q = query(\r\n          notificationsRef,\r\n          where('userId', '==', auth.currentUser.uid),\r\n          orderBy('timestamp', 'desc'),\r\n          limit(100)\r\n        );\r\n\r\n        unsubscribe = onSnapshot(q, \r\n          (snapshot) => {\r\n            const notifications = snapshot.docs.map(doc => {\r\n              const data = doc.data();\r\n              return {\r\n                id: doc.id,\r\n                ...data,\r\n                timestamp: data.timestamp?.toDate()?.toISOString() || data.createdAt,\r\n              };\r\n            });\r\n            console.log('Received notifications:', notifications);\r\n            set({ notifications, loading: false });\r\n          },\r\n          (error) => {\r\n            console.error('Error loading notifications:', error);\r\n            set({ error: error.message, loading: false });\r\n          }\r\n        );\r\n      } catch (error) {\r\n        console.error('Error initializing notifications:', error);\r\n        set({ error: error.message, loading: false });\r\n      }\r\n\r\n      return unsubscribe;\r\n    },\r\n\r\n    addNotification: async (notification) => {\r\n      try {\r\n        const user = auth.currentUser;\r\n        if (!user) {\r\n          console.error('Must be authenticated to add notifications');\r\n          return;\r\n        }\r\n\r\n        const notificationsRef = collection(db, 'notifications');\r\n        await addDoc(notificationsRef, {\r\n          ...notification,\r\n          userId: user.uid,\r\n          timestamp: serverTimestamp(),\r\n          createdAt: new Date().toISOString(),\r\n          read: false\r\n        });\r\n      } catch (error) {\r\n        console.error('Error adding notification:', error);\r\n      }\r\n    },\r\n\r\n    markAsRead: async (notificationId) => {\r\n      try {\r\n        await updateDoc(doc(db, 'notifications', notificationId), {\r\n          read: true\r\n        });\r\n      } catch (error) {\r\n        console.error('Error marking notification as read:', error);\r\n      }\r\n    },\r\n\r\n    clearNotifications: async () => {\r\n      try {\r\n        const batch = writeBatch(db);\r\n        const notifications = get().notifications;\r\n        \r\n        notifications.forEach((notification) => {\r\n          const docRef = doc(db, 'notifications', notification.id);\r\n          batch.delete(docRef);\r\n        });\r\n\r\n        await batch.commit();\r\n      } catch (error) {\r\n        console.error('Error clearing notifications:', error);\r\n      }\r\n    },\r\n\r\n    getUnreadCount: () => {\r\n      return get().notifications.filter(n => !n.read).length;\r\n    }\r\n  };\r\n});\r\n\r\nexport default useNotificationStore; ","import { createContext, useContext, useState, useEffect } from 'react';\r\nimport { showNotification } from '@mantine/notifications';\r\nimport { IconUserCheck } from '@tabler/icons-react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport useNotificationStore from '../stores/notificationStore';\r\nimport { collection, getDocs, query, orderBy } from 'firebase/firestore';\r\nimport { db } from '../config/firebase';\r\n\r\nconst PatientContext = createContext(null);\r\n\r\nexport const PatientProvider = ({ children }) => {\r\n  const [activePatient, setActivePatient] = useState(null);\r\n  const navigate = useNavigate();\r\n  const addNotification = useNotificationStore(state => state.addNotification);\r\n  const [patients, setPatients] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState(null);\r\n  \r\n  useEffect(() => {\r\n    console.log('Setting up patient context listener');\r\n    \r\n    // Test function to verify messaging\r\n    window.testPatientContext = (patientData) => {\r\n      console.log('Testing patient context with:', patientData);\r\n      window.postMessage({\r\n        type: 'PATIENT_CONTEXT_UPDATED',\r\n        data: patientData\r\n      }, '*');\r\n    };\r\n    \r\n    // Listen for messages from Chrome extension\r\n    const handleMessage = (event) => {\r\n      console.log('Received message in web app:', event);\r\n      \r\n      if (event.data?.type === 'PATIENT_CONTEXT_UPDATED') {\r\n        console.log('Updating patient context:', event.data.data);\r\n        const patient = event.data.data;\r\n        setActivePatient(patient);\r\n        \r\n        // Format patient name consistently\r\n        const patientName = `${patient.name[0].given.join(' ')} ${patient.name[0].family}`;\r\n        \r\n        // Add to persistent notification store\r\n        addNotification({\r\n          type: 'PATIENT_CONTEXT',\r\n          title: 'Patient Context Detected',\r\n          message: `Active patient: ${patientName}`,\r\n          patientId: patient.id,\r\n          patientInfo: {\r\n            name: patientName,\r\n            mrn: patient.identifier?.[0]?.value,\r\n            id: patient.id\r\n          },\r\n          source: patient.source,\r\n          appName: patient.appName\r\n        });\r\n        \r\n        // Show immediate notification\r\n        showNotification({\r\n          title: 'Patient Context Detected',\r\n          message: `Active patient: ${patientName}`,\r\n          color: 'blue',\r\n          icon: <IconUserCheck size={16} />,\r\n          autoClose: 5000,\r\n          onClick: () => navigate(`/patients/${patient.id}`)\r\n        });\r\n      }\r\n    };\r\n\r\n    window.addEventListener('message', handleMessage);\r\n    return () => {\r\n      window.removeEventListener('message', handleMessage);\r\n      delete window.testPatientContext;\r\n    };\r\n  }, [navigate, addNotification]);\r\n\r\n  const fetchPatients = async () => {\r\n    try {\r\n      const patientsRef = collection(db, 'patients');\r\n      const q = query(patientsRef, orderBy('lastName', 'asc'));\r\n      const querySnapshot = await getDocs(q);\r\n      \r\n      const patients = [];\r\n      querySnapshot.forEach((doc) => {\r\n        const data = doc.data();\r\n        patients.push({\r\n          id: doc.id,\r\n          firstName: data.firstName,\r\n          lastName: data.lastName,\r\n          dateOfBirth: data.dateOfBirth,\r\n          riskLevel: data.riskLevel || 'low',\r\n          lastVisit: data.lastVisit,\r\n          careGaps: data.careGaps || [],\r\n          provider: data.provider || '',\r\n          // Add other fields as needed\r\n        });\r\n      });\r\n      \r\n      return patients;\r\n    } catch (error) {\r\n      console.error('Error fetching patients:', error);\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    const loadPatients = async () => {\r\n      setLoading(true);\r\n      try {\r\n        const patientsData = await fetchPatients();\r\n        console.log('Loaded patients:', patientsData);\r\n        setPatients(patientsData);\r\n      } catch (error) {\r\n        console.error('Error loading patients:', error);\r\n        setError(error);\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    loadPatients();\r\n  }, []);\r\n\r\n  return (\r\n    <PatientContext.Provider value={{ activePatient, setActivePatient, patients, loading, error }}>\r\n      {children}\r\n    </PatientContext.Provider>\r\n  );\r\n};\r\n\r\nexport const usePatient = () => useContext(PatientContext); ","import React from 'react';\r\nimport { Paper, Text, Group, Button, Stack, Badge } from '@mantine/core';\r\nimport { IconUserCheck, IconArrowRight } from '@tabler/icons-react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst PatientAlert = ({ patient }) => {\r\n  if (!patient) return null;\r\n\r\n  return (\r\n    <Paper \r\n      p=\"md\" \r\n      radius=\"md\" \r\n      shadow=\"sm\"\r\n      sx={(theme) => ({\r\n        backgroundColor: theme.colors.blue[1],\r\n        border: `1px solid ${theme.colors.blue[3]}`\r\n      })}\r\n    >\r\n      <Stack spacing=\"xs\">\r\n        <Group position=\"apart\">\r\n          <Group>\r\n            <IconUserCheck size={24} />\r\n            <div>\r\n              <Text size=\"sm\" color=\"dimmed\">Active Patient</Text>\r\n              <Text weight={500}>\r\n                {patient.name[0].given.join(' ')} {patient.name[0].family}\r\n              </Text>\r\n            </div>\r\n          </Group>\r\n          <Badge color=\"blue\">\r\n            Context Active\r\n          </Badge>\r\n        </Group>\r\n\r\n        <Group position=\"right\">\r\n          <Button\r\n            component={Link}\r\n            to={`/patients/${patient.id}`}\r\n            variant=\"light\"\r\n            size=\"xs\"\r\n            rightIcon={<IconArrowRight size={16} />}\r\n          >\r\n            View Details\r\n          </Button>\r\n        </Group>\r\n      </Stack>\r\n    </Paper>\r\n  );\r\n};\r\n\r\nexport default PatientAlert; ","export const SAVED_VIEWS = {\r\n  CARE_GAPS: 'care_gaps',\r\n  HIGH_RISK: 'high_risk',\r\n  RECENT_VISITS: 'recent_visits',\r\n  MISSING_AWV: 'missing_awv',\r\n  UNCONTROLLED_CONDITIONS: 'uncontrolled_conditions'\r\n};\r\n\r\nexport const getFilterModelForView = (viewId) => {\r\n  switch (viewId) {\r\n    case SAVED_VIEWS.CARE_GAPS:\r\n      return {\r\n        careGaps: {\r\n          type: 'greaterThan',\r\n          filter: 0\r\n        }\r\n      };\r\n    case SAVED_VIEWS.HIGH_RISK:\r\n      return {\r\n        riskLevel: {\r\n          values: ['high']\r\n        }\r\n      };\r\n    case SAVED_VIEWS.RECENT_VISITS:\r\n      return {\r\n        lastVisit: {\r\n          type: 'greaterThan',\r\n          dateFrom: new Date(Date.now() - 7 * 24 * 60 * 60 * 1000).toISOString()\r\n        }\r\n      };\r\n    case SAVED_VIEWS.MISSING_AWV:\r\n      return {\r\n        awvStatus: {\r\n          values: ['missing', 'overdue']\r\n        }\r\n      };\r\n    case SAVED_VIEWS.UNCONTROLLED_CONDITIONS:\r\n      return {\r\n        conditions: {\r\n          type: 'contains',\r\n          filter: 'uncontrolled'\r\n        }\r\n      };\r\n    default:\r\n      return {};\r\n  }\r\n}; ","import React from 'react';\r\nimport { \r\n  Paper, \r\n  Title, \r\n  Text, \r\n  Group, \r\n  Avatar, \r\n  Stack,\r\n  Button,\r\n  Divider,\r\n  ThemeIcon,\r\n  Box\r\n} from '@mantine/core';\r\nimport { \r\n  IconRobot, \r\n  IconArrowRight, \r\n  IconStethoscope,\r\n  IconAlertCircle,\r\n  IconChecks\r\n} from '@tabler/icons-react';\r\n\r\nconst NarrativeSummary = () => {\r\n  // This would come from your AI service in production\r\n  const summary = {\r\n    overview: \"Here's your daily patient care summary and recommended actions:\",\r\n    keyPoints: [\r\n      {\r\n        type: 'alert',\r\n        text: '3 high-risk diabetes patients need medication review',\r\n        icon: IconAlertCircle,\r\n        color: 'red'\r\n      },\r\n      {\r\n        type: 'opportunity',\r\n        text: '8 Annual Wellness Visits can be scheduled this week',\r\n        icon: IconStethoscope,\r\n        color: 'blue'\r\n      },\r\n      {\r\n        type: 'success',\r\n        text: '4 patients improved their blood pressure control this month',\r\n        icon: IconChecks,\r\n        color: 'green'\r\n      }\r\n    ],\r\n    recommendation: {\r\n      priority: 'high',\r\n      action: 'Focus on High-Risk Diabetes Patients',\r\n      impact: 'Early intervention could prevent complications for 3 patients with HbA1c > 9.0',\r\n      nextSteps: [\r\n        'Review medication adherence reports',\r\n        'Schedule follow-up appointments',\r\n        'Update care management plans'\r\n      ]\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Paper p=\"xl\" radius=\"md\" withBorder mt=\"xl\">\r\n      <Group position=\"apart\" mb=\"lg\">\r\n        <Group>\r\n          <Avatar \r\n            size=\"lg\" \r\n            radius=\"xl\"\r\n            sx={(theme) => ({\r\n              background: theme.fn.linearGradient(45, '#6E2B81', '#B82C5D'),\r\n            })}\r\n          >\r\n            <IconRobot size={24} />\r\n          </Avatar>\r\n          <div>\r\n            <Title order={3}>AI Summary</Title>\r\n            <Text size=\"sm\" color=\"dimmed\">Updated just now</Text>\r\n          </div>\r\n        </Group>\r\n      </Group>\r\n\r\n      <Box \r\n        sx={(theme) => ({\r\n          padding: theme.spacing.md,\r\n          backgroundColor: theme.colorScheme === 'dark' ? theme.colors.dark[7] : theme.colors.gray[0],\r\n          borderRadius: theme.radius.md,\r\n          marginBottom: theme.spacing.lg\r\n        })}\r\n      >\r\n        <Text size=\"md\">{summary.overview}</Text>\r\n      </Box>\r\n\r\n      <Stack spacing=\"md\" mb=\"xl\">\r\n        {summary.keyPoints.map((point, index) => (\r\n          <Group key={index} spacing=\"sm\">\r\n            <ThemeIcon color={point.color} size=\"lg\" radius=\"xl\">\r\n              <point.icon size={18} />\r\n            </ThemeIcon>\r\n            <Text size=\"sm\">{point.text}</Text>\r\n          </Group>\r\n        ))}\r\n      </Stack>\r\n\r\n      <Divider my=\"lg\" />\r\n\r\n      <Stack spacing=\"md\">\r\n        <Title order={4}>Recommended Action</Title>\r\n        <Box \r\n          sx={(theme) => ({\r\n            padding: theme.spacing.md,\r\n            backgroundColor: theme.colors.blue[7],\r\n            color: 'white',\r\n            borderRadius: theme.radius.md\r\n          })}\r\n        >\r\n          <Text weight={500}>{summary.recommendation.action}</Text>\r\n          <Text size=\"sm\" mt={4} style={{ opacity: 0.9 }}>\r\n            {summary.recommendation.impact}\r\n          </Text>\r\n        </Box>\r\n\r\n        <Stack spacing=\"xs\">\r\n          {summary.recommendation.nextSteps.map((step, index) => (\r\n            <Group key={index} spacing=\"xs\">\r\n              <Text size=\"sm\" color=\"dimmed\">{index + 1}.</Text>\r\n              <Text size=\"sm\">{step}</Text>\r\n            </Group>\r\n          ))}\r\n        </Stack>\r\n\r\n        <Group position=\"right\" mt=\"md\">\r\n          <Button \r\n            variant=\"light\"\r\n            rightIcon={<IconArrowRight size={16} />}\r\n            onClick={() => {/* Navigate to relevant view */}}\r\n          >\r\n            Take Action\r\n          </Button>\r\n        </Group>\r\n      </Stack>\r\n    </Paper>\r\n  );\r\n};\r\n\r\nexport default NarrativeSummary; ","import React from 'react';\r\nimport { Container, Grid, Title, Box, Paper, Group, Text, Button, Stack, ThemeIcon } from '@mantine/core';\r\nimport { useUser } from '../contexts/UserContext';\r\nimport { usePatient } from '../contexts/PatientContext';\r\nimport PatientAlert from '../components/patients/PatientAlert';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { SAVED_VIEWS } from '../utils/gridViews';\r\nimport NarrativeSummary from '../components/dashboard/NarrativeSummary';\r\nimport { \r\n  IconUserPlus, \r\n  IconAlertTriangle, \r\n  IconCalendarStats,\r\n  IconStethoscope\r\n} from '@tabler/icons-react';\r\n\r\nconst HighlightCard = ({ title, count, description, icon: Icon, color, onClick }) => (\r\n  <Paper p=\"md\" radius=\"md\" withBorder onClick={onClick} sx={{ cursor: onClick ? 'pointer' : 'default' }}>\r\n    <Group position=\"apart\" mb=\"xs\">\r\n      <ThemeIcon size=\"xl\" radius=\"md\" color={color} variant=\"light\">\r\n        <Icon size={24} />\r\n      </ThemeIcon>\r\n      <Text size=\"xl\" weight={700}>\r\n        {count}\r\n      </Text>\r\n    </Group>\r\n    <Text size=\"lg\" weight={500} mb=\"xs\">{title}</Text>\r\n    <Text size=\"sm\" color=\"dimmed\">\r\n      {description}\r\n    </Text>\r\n  </Paper>\r\n);\r\n\r\nconst Dashboard = () => {\r\n  const { activePatient } = usePatient();\r\n  const { user } = useUser();\r\n  const firstName = user?.displayName?.split(' ')[0] || 'there';\r\n  const navigate = useNavigate();\r\n\r\n  const navigateToPatientView = (viewId) => {\r\n    navigate(`/patients?view=${viewId}`);\r\n  };\r\n\r\n  const highlights = [\r\n    {\r\n      title: 'High Risk Patients',\r\n      count: '5',\r\n      description: 'Patients requiring immediate attention',\r\n      icon: IconAlertTriangle,\r\n      color: 'red',\r\n      view: SAVED_VIEWS.HIGH_RISK\r\n    },\r\n    {\r\n      title: 'Care Gaps',\r\n      count: '12',\r\n      description: 'Open care gaps to address',\r\n      icon: IconStethoscope,\r\n      color: 'blue',\r\n      view: SAVED_VIEWS.CARE_GAPS\r\n    },\r\n    {\r\n      title: 'Due for AWV',\r\n      count: '8',\r\n      description: 'Annual Wellness Visits due this month',\r\n      icon: IconCalendarStats,\r\n      color: 'green',\r\n      view: SAVED_VIEWS.MISSING_AWV\r\n    },\r\n    {\r\n      title: 'Recent Visits',\r\n      count: '15',\r\n      description: 'Patients seen in the last 7 days',\r\n      icon: IconUserPlus,\r\n      color: 'grape',\r\n      view: SAVED_VIEWS.RECENT_VISITS\r\n    }\r\n  ];\r\n\r\n  return (\r\n    <Container size=\"xl\" py=\"xl\">\r\n      <Box pb=\"xl\">\r\n        <Title order={1} mb=\"lg\" pl=\"md\" color=\"dark.9\">\r\n          Welcome, {firstName}\r\n        </Title>\r\n        \r\n        {activePatient && (\r\n          <Box mb=\"lg\">\r\n            <PatientAlert patient={activePatient} />\r\n          </Box>\r\n        )}\r\n      </Box>\r\n      \r\n      <Grid>\r\n        {highlights.map((highlight, index) => (\r\n          <Grid.Col key={index} span={3}>\r\n            <HighlightCard\r\n              {...highlight}\r\n              onClick={() => navigateToPatientView(highlight.view)}\r\n            />\r\n          </Grid.Col>\r\n        ))}\r\n      </Grid>\r\n\r\n      <NarrativeSummary />\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default Dashboard; ","export const saveGridState = (key, state) => {\r\n  try {\r\n    localStorage.setItem(`gridState_${key}`, JSON.stringify(state));\r\n  } catch (error) {\r\n    console.error('Error saving grid state:', error);\r\n  }\r\n};\r\n\r\nexport const loadGridState = (key) => {\r\n  try {\r\n    const savedState = localStorage.getItem(`gridState_${key}`);\r\n    return savedState ? JSON.parse(savedState) : null;\r\n  } catch (error) {\r\n    console.error('Error loading grid state:', error);\r\n    return null;\r\n  }\r\n}; ","import { ModuleRegistry } from '@ag-grid-community/core';\nimport { ClientSideRowModelModule } from '@ag-grid-community/client-side-row-model';\nimport { SetFilterModule } from '@ag-grid-enterprise/set-filter';\nimport { MenuModule } from '@ag-grid-enterprise/menu';\nimport { ColumnsToolPanelModule } from '@ag-grid-enterprise/column-tool-panel';\nimport { SideBarModule } from '@ag-grid-enterprise/side-bar';\n\n// Register AG Grid Modules\nModuleRegistry.registerModules([\n  ClientSideRowModelModule,\n  SetFilterModule,\n  MenuModule,\n  ColumnsToolPanelModule,\n  SideBarModule\n]);\n\nimport { useCallback, useEffect, useMemo, useRef, useState } from 'react';\nimport { Group, Box, Text, Paper, Button, Menu, ActionIcon, Loader } from '@mantine/core';\nimport { AgGridReact } from 'ag-grid-react';\nimport { IconFilter, IconColumns, IconEye } from '@tabler/icons-react';\nimport { usePatient } from '../../contexts/PatientContext';\nimport { saveGridState, loadGridState } from '../../utils/gridUtils';\nimport { useNavigate, useLocation, useSearchParams } from 'react-router-dom';\nimport { SAVED_VIEWS, getFilterModelForView } from '../../utils/gridViews';\n\n// Add this CSS to your global styles or component\nconst gridStyles = {\n  '.ag-theme-material': {\n    '--ag-font-family': 'var(--mantine-font-family)',\n    '--ag-font-size': '14px',\n    '--ag-header-height': '48px',\n    '--ag-header-background-color': 'var(--mantine-color-gray-0)',\n    '--ag-header-foreground-color': 'var(--mantine-color-dark-9)',\n    '--ag-header-column-separator-display': 'block',\n    '--ag-header-column-separator-color': 'var(--mantine-color-gray-3)',\n    '--ag-row-hover-color': 'var(--mantine-color-gray-0)',\n    '--ag-selected-row-background-color': 'var(--mantine-color-blue-0)',\n    '--ag-odd-row-background-color': 'transparent',\n    '--ag-row-border-color': 'var(--mantine-color-gray-2)',\n    '--ag-cell-horizontal-padding': '16px',\n    '--ag-borders': 'none',\n    'border': '1px solid var(--mantine-color-gray-3)',\n    'borderRadius': 'var(--mantine-radius-md)',\n  },\n  '.ag-theme-material .ag-header-cell': {\n    fontWeight: 600,\n  },\n  '.ag-theme-material .ag-header-cell-text': {\n    color: 'var(--mantine-color-dark-9)',\n  },\n  '.ag-theme-material .ag-cell': {\n    display: 'flex',\n    alignItems: 'center',\n  },\n  '.ag-theme-material .ag-row': {\n    borderBottom: '1px solid var(--mantine-color-gray-2)',\n    cursor: 'pointer',\n  },\n  '.ag-theme-material .ag-row-selected': {\n    backgroundColor: 'var(--mantine-color-blue-0)',\n  }\n};\n\nexport default function PatientList() {\n  const { patients, loading: patientsLoading } = usePatient();\n  const gridRef = useRef(null);\n  const [rowData, setRowData] = useState([]);\n  const navigate = useNavigate();\n  const [searchParams] = useSearchParams();\n  const viewId = searchParams.get('view');\n  const initialFilterApplied = useRef(false);\n\n  // Debug logs\n  console.log('PatientList render:', { patients, patientsLoading, rowData });\n\n  useEffect(() => {\n    if (patients?.length) {\n      console.log('Raw patients data:', patients);\n      const formattedData = patients.map(patient => ({\n        name: `${patient.firstName} ${patient.lastName}`,\n        age: patient.dateOfBirth ? calculateAge(patient.dateOfBirth) : '',\n        riskLevel: patient.riskLevel || 'low',\n        lastVisit: patient.lastVisit || '',\n        careGaps: patient.careGaps?.length || 0,\n        provider: patient.provider || '',\n        id: patient.id\n      }));\n      console.log('Formatted grid data:', formattedData);\n      setRowData(formattedData);\n    } else {\n      console.log('No patients data available:', patients);\n    }\n  }, [patients]);\n\n  const [columnDefs] = useState([\n    { \n      field: 'name', \n      headerName: 'Patient Name',\n      filter: true,\n      checkboxSelection: true,\n      headerCheckboxSelection: true,\n      flex: 2,\n      minWidth: 200,\n      cellStyle: { fontWeight: 500 }\n    },\n    { \n      field: 'age', \n      headerName: 'Age',\n      filter: 'agNumberColumnFilter',\n      width: 100,\n      type: 'numericColumn',\n      cellStyle: { justifyContent: 'center' }\n    },\n    { \n      field: 'riskLevel', \n      headerName: 'Risk Level',\n      filter: true,\n      cellRenderer: RiskLevelRenderer,\n      width: 130,\n      cellStyle: { display: 'flex', alignItems: 'center' },\n      filterParams: {\n        values: ['low', 'medium', 'high']\n      }\n    },\n    { \n      field: 'lastVisit', \n      headerName: 'Last Visit',\n      filter: 'agDateColumnFilter',\n      width: 150,\n      valueFormatter: params => \n        params.value ? new Date(params.value).toLocaleDateString() : ''\n    },\n    { \n      field: 'careGaps', \n      headerName: 'Care Gaps',\n      filter: 'agNumberColumnFilter',\n      width: 120,\n      type: 'numericColumn',\n      cellStyle: params => ({\n        color: params.value > 0 ? '#fa5252' : 'inherit',\n        fontWeight: params.value > 0 ? 500 : 400,\n        justifyContent: 'center'\n      })\n    },\n    { \n      field: 'provider', \n      headerName: 'Provider',\n      filter: true,\n      flex: 1,\n      minWidth: 150\n    }\n  ]);\n\n  const defaultColDef = useMemo(() => ({\n    sortable: true,\n    resizable: true,\n    filter: true,\n    floatingFilter: true,\n    suppressMovable: true,\n    suppressMenu: true\n  }), []);\n\n  const onGridReady = useCallback((params) => {\n    console.log('Grid ready:', params);\n    const savedState = loadGridState('patientsGrid');\n    if (savedState) {\n      gridRef.current.columnApi.applyColumnState({ state: savedState });\n    }\n    \n    // Apply initial filter if view parameter exists\n    if (viewId && !initialFilterApplied.current) {\n      const filterModel = getFilterModelForView(viewId);\n      params.api.setFilterModel(filterModel);\n      initialFilterApplied.current = true;\n    }\n    \n    params.api.sizeColumnsToFit();\n  }, [viewId]);\n\n  const saveCurrentView = () => {\n    const columnState = gridRef.current.columnApi.getColumnState();\n    saveGridState('patientsGrid', columnState);\n  };\n\n  const applyPresetFilter = useCallback((preset) => {\n    if (gridRef.current?.api) {\n      const filterModel = getFilterModelForView(preset);\n      gridRef.current.api.setFilterModel(filterModel);\n    }\n  }, []);\n\n  const onRowClicked = useCallback((event) => {\n    navigate(`/patients/${event.data.id}`);\n  }, [navigate]);\n\n  if (patientsLoading) {\n    return (\n      <Paper p=\"md\" radius=\"md\" style={{ height: 'calc(100vh - 180px)' }}>\n        <Group position=\"center\" style={{ height: '100%' }}>\n          <Loader size=\"xl\" />\n        </Group>\n      </Paper>\n    );\n  }\n\n  return (\n    <Paper p=\"xl\" radius=\"md\" style={{ height: 'calc(100vh - 180px)' }}>\n      <Group position=\"apart\" mb=\"xl\">\n        <Text size=\"xl\" weight={700} color=\"dark.9\">\n          Patient List ({rowData.length})\n        </Text>\n        <Group spacing=\"sm\">\n          <Menu position=\"bottom-end\" shadow=\"md\">\n            <Menu.Target>\n              <Button \n                variant=\"light\" \n                leftIcon={<IconFilter size={16} />}\n                size=\"sm\"\n              >\n                Filters\n              </Button>\n            </Menu.Target>\n            <Menu.Dropdown>\n              <Menu.Label>Preset Filters</Menu.Label>\n              <Menu.Item onClick={() => applyPresetFilter('highRisk')}>\n                High Risk Patients\n              </Menu.Item>\n              <Menu.Item onClick={() => applyPresetFilter('recentVisits')}>\n                Recent Visits\n              </Menu.Item>\n            </Menu.Dropdown>\n          </Menu>\n\n          <Button \n            variant=\"light\"\n            leftIcon={<IconColumns size={16} />}\n            onClick={() => gridRef.current.api.showToolPanel()}\n            size=\"sm\"\n          >\n            Columns\n          </Button>\n          \n          <Button \n            variant=\"subtle\" \n            onClick={saveCurrentView}\n            size=\"sm\"\n          >\n            Save View\n          </Button>\n        </Group>\n      </Group>\n\n      <Box \n        className=\"ag-theme-material\" \n        sx={{\n          height: 'calc(100% - 60px)',\n          width: '100%',\n          ...gridStyles\n        }}\n      >\n        <AgGridReact\n          ref={gridRef}\n          rowData={rowData}\n          columnDefs={columnDefs}\n          defaultColDef={defaultColDef}\n          rowSelection=\"multiple\"\n          suppressRowClickSelection={false}\n          onGridReady={onGridReady}\n          onRowClicked={onRowClicked}\n          sideBar={{\n            toolPanels: ['columns'],\n            defaultToolPanel: ''\n          }}\n          domLayout='autoHeight'\n          enableBrowserTooltips={true}\n          rowHeight={48}\n          headerHeight={48}\n          pagination={true}\n          paginationPageSize={20}\n          animateRows={true}\n          suppressCellFocus={true}\n        />\n      </Box>\n    </Paper>\n  );\n}\n\n// Helper function to calculate age\nfunction calculateAge(dateOfBirth) {\n  const today = new Date();\n  const birthDate = new Date(dateOfBirth);\n  let age = today.getFullYear() - birthDate.getFullYear();\n  const m = today.getMonth() - birthDate.getMonth();\n  if (m < 0 || (m === 0 && today.getDate() < birthDate.getDate())) {\n    age--;\n  }\n  return age;\n}\n\n// Update the RiskLevelRenderer component\nconst RiskLevelRenderer = ({ value }) => {\n  const getStyle = () => {\n    switch(value?.toLowerCase()) {\n      case 'high':\n        return {\n          backgroundColor: '#ff6b6b',\n          color: 'white',\n          border: '1px solid #fa5252'\n        };\n      case 'medium':\n        return {\n          backgroundColor: '#ffd43b',\n          color: '#212529',\n          border: '1px solid #fab005'\n        };\n      case 'low':\n        return {\n          backgroundColor: '#51cf66',\n          color: 'white',\n          border: '1px solid #40c057'\n        };\n      default:\n        return {\n          backgroundColor: '#868e96',\n          color: 'white',\n          border: '1px solid #495057'\n        };\n    }\n  };\n\n  return value ? (\n    <Box\n      sx={(theme) => ({\n        ...getStyle(),\n        padding: '4px 12px',\n        borderRadius: theme.radius.sm,\n        fontSize: theme.fontSizes.sm,\n        fontWeight: 500,\n        display: 'inline-block',\n        textTransform: 'capitalize'\n      })}\n    >\n      {value}\n    </Box>\n  ) : null;\n}; ","import React, { useState, useEffect } from 'react';\r\nimport { \r\n  Container, \r\n  Title, \r\n  Paper, \r\n  Stack, \r\n  TextInput, \r\n  Switch, \r\n  Button, \r\n  Alert,\r\n  Text,\r\n  Group,\r\n  Avatar,\r\n  Divider,\r\n  Tabs,\r\n  useMantineColorScheme,\r\n  Select\r\n} from '@mantine/core';\r\nimport { \r\n  IconCheck, \r\n  IconAlertCircle, \r\n  IconUser, \r\n  IconSettings, \r\n  IconBell,\r\n  IconSun,\r\n  IconMoonStars\r\n} from '@tabler/icons-react';\r\nimport { useUser } from '../../contexts/UserContext';\r\nimport { doc, getDoc, updateDoc } from 'firebase/firestore';\r\nimport { db } from '../../config/firebase';\r\nimport { showNotification } from '@mantine/notifications';\r\n\r\nconst Settings = () => {\r\n  const { user } = useUser();\r\n  const { colorScheme, toggleColorScheme } = useMantineColorScheme();\r\n  const [settings, setSettings] = useState({\r\n    fhirServerUrl: '',\r\n    debugMode: false,\r\n    notifications: true,\r\n    theme: colorScheme,\r\n    language: 'en',\r\n    timezone: Intl.DateTimeFormat().resolvedOptions().timeZone,\r\n    dashboardLayout: 'default',\r\n    emailNotifications: {\r\n      careGaps: true,\r\n      appointments: true,\r\n      riskScores: true\r\n    },\r\n    displayPreferences: {\r\n      compactView: false,\r\n      showMetricLabels: true,\r\n      defaultDateRange: '30days'\r\n    }\r\n  });\r\n  const [displayName, setDisplayName] = useState(user?.displayName || '');\r\n  const [loading, setLoading] = useState(true);\r\n  const [saving, setSaving] = useState(false);\r\n  const [success, setSuccess] = useState(false);\r\n  const [error, setError] = useState(null);\r\n\r\n  useEffect(() => {\r\n    loadUserSettings();\r\n  }, [user]);\r\n\r\n  const loadUserSettings = async () => {\r\n    try {\r\n      const settingsRef = doc(db, 'userSettings', user.uid);\r\n      const settingsSnap = await getDoc(settingsRef);\r\n      \r\n      if (settingsSnap.exists()) {\r\n        const savedSettings = settingsSnap.data();\r\n        setSettings(prev => ({\r\n          ...prev,\r\n          ...savedSettings,\r\n          theme: colorScheme\r\n        }));\r\n      } else {\r\n        await updateDoc(settingsRef, {\r\n          ...settings,\r\n          createdAt: new Date().toISOString(),\r\n          updatedAt: new Date().toISOString()\r\n        });\r\n      }\r\n    } catch (err) {\r\n      console.error('Error loading settings:', err);\r\n      setError('Failed to load settings');\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const handleSaveProfile = async () => {\r\n    try {\r\n      setSaving(true);\r\n      const userRef = doc(db, 'users', user.uid);\r\n      await updateDoc(userRef, {\r\n        displayName,\r\n        updatedAt: new Date().toISOString()\r\n      });\r\n      \r\n      setSuccess(true);\r\n      setTimeout(() => setSuccess(false), 3000);\r\n    } catch (err) {\r\n      setError(err.message);\r\n    } finally {\r\n      setSaving(false);\r\n    }\r\n  };\r\n\r\n  const handleSaveSettings = async () => {\r\n    try {\r\n      setSaving(true);\r\n      const settingsRef = doc(db, 'userSettings', user.uid);\r\n      \r\n      await updateDoc(settingsRef, {\r\n        ...settings,\r\n        theme: colorScheme,\r\n        updatedAt: new Date().toISOString()\r\n      });\r\n\r\n      showNotification({\r\n        title: 'Settings Saved',\r\n        message: 'Your preferences have been updated successfully',\r\n        color: 'green'\r\n      });\r\n\r\n      setSuccess(true);\r\n      setTimeout(() => setSuccess(false), 3000);\r\n    } catch (err) {\r\n      console.error('Error saving settings:', err);\r\n      setError('Failed to save settings');\r\n      showNotification({\r\n        title: 'Error',\r\n        message: 'Failed to save settings',\r\n        color: 'red'\r\n      });\r\n    } finally {\r\n      setSaving(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Container size=\"md\" py=\"xl\">\r\n      <Tabs defaultValue=\"profile\">\r\n        <Tabs.List mb=\"xl\">\r\n          <Tabs.Tab value=\"profile\" icon={<IconUser size={14} />}>Profile</Tabs.Tab>\r\n          <Tabs.Tab value=\"settings\" icon={<IconSettings size={14} />}>Application Settings</Tabs.Tab>\r\n          <Tabs.Tab value=\"notifications\" icon={<IconBell size={14} />}>Notifications</Tabs.Tab>\r\n        </Tabs.List>\r\n\r\n        {error && (\r\n          <Alert \r\n            icon={<IconAlertCircle size={16} />}\r\n            title=\"Error\"\r\n            color=\"red\"\r\n            mb=\"md\"\r\n          >\r\n            {error}\r\n          </Alert>\r\n        )}\r\n\r\n        {success && (\r\n          <Alert \r\n            icon={<IconCheck size={16} />}\r\n            title=\"Success\"\r\n            color=\"green\"\r\n            mb=\"md\"\r\n          >\r\n            Changes saved successfully\r\n          </Alert>\r\n        )}\r\n\r\n        <Tabs.Panel value=\"profile\">\r\n          <Paper p=\"xl\" radius=\"md\" withBorder>\r\n            <Stack spacing=\"xl\">\r\n              <Group>\r\n                <Avatar \r\n                  src={user?.photoURL} \r\n                  size=\"xl\" \r\n                  radius=\"xl\"\r\n                />\r\n                <div>\r\n                  <TextInput\r\n                    label=\"Display Name\"\r\n                    value={displayName}\r\n                    onChange={(e) => setDisplayName(e.target.value)}\r\n                    size=\"md\"\r\n                  />\r\n                  <Text size=\"sm\" color=\"dimmed\" mt={4}>{user?.email}</Text>\r\n                </div>\r\n              </Group>\r\n\r\n              <Divider />\r\n\r\n              <Group position=\"right\">\r\n                <Button \r\n                  onClick={handleSaveProfile}\r\n                  loading={saving}\r\n                >\r\n                  Save Profile\r\n                </Button>\r\n              </Group>\r\n            </Stack>\r\n          </Paper>\r\n        </Tabs.Panel>\r\n\r\n        <Tabs.Panel value=\"settings\">\r\n          <Paper p=\"xl\" radius=\"md\" withBorder>\r\n            <Stack spacing=\"md\">\r\n              <TextInput\r\n                label=\"FHIR Server URL\"\r\n                description=\"The URL of your FHIR server\"\r\n                value={settings.fhirServerUrl}\r\n                onChange={(e) => setSettings({\r\n                  ...settings,\r\n                  fhirServerUrl: e.target.value\r\n                })}\r\n              />\r\n\r\n              <Switch\r\n                label=\"Debug Mode\"\r\n                description=\"Enable detailed logging\"\r\n                checked={settings.debugMode}\r\n                onChange={(e) => setSettings({\r\n                  ...settings,\r\n                  debugMode: e.target.checked\r\n                })}\r\n              />\r\n\r\n              <Group position=\"apart\">\r\n                <Text>Theme Mode</Text>\r\n                <Switch\r\n                  checked={colorScheme === 'dark'}\r\n                  onChange={() => toggleColorScheme()}\r\n                  size=\"lg\"\r\n                  onLabel={<IconSun size={16} stroke={2.5} />}\r\n                  offLabel={<IconMoonStars size={16} stroke={2.5} />}\r\n                />\r\n              </Group>\r\n\r\n              <Divider label=\"Display Preferences\" />\r\n              <Switch\r\n                label=\"Compact View\"\r\n                checked={settings.displayPreferences.compactView}\r\n                onChange={(e) => setSettings(prev => ({\r\n                  ...prev,\r\n                  displayPreferences: {\r\n                    ...prev.displayPreferences,\r\n                    compactView: e.currentTarget.checked\r\n                  }\r\n                }))}\r\n              />\r\n\r\n              <Switch\r\n                label=\"Show Metric Labels\"\r\n                checked={settings.displayPreferences.showMetricLabels}\r\n                onChange={(e) => setSettings(prev => ({\r\n                  ...prev,\r\n                  displayPreferences: {\r\n                    ...prev.displayPreferences,\r\n                    showMetricLabels: e.currentTarget.checked\r\n                  }\r\n                }))}\r\n              />\r\n\r\n              <Select\r\n                label=\"Default Date Range\"\r\n                value={settings.displayPreferences.defaultDateRange}\r\n                onChange={(value) => setSettings(prev => ({\r\n                  ...prev,\r\n                  displayPreferences: {\r\n                    ...prev.displayPreferences,\r\n                    defaultDateRange: value\r\n                  }\r\n                }))}\r\n                data={[\r\n                  { value: '7days', label: 'Last 7 Days' },\r\n                  { value: '30days', label: 'Last 30 Days' },\r\n                  { value: '90days', label: 'Last 90 Days' },\r\n                  { value: 'ytd', label: 'Year to Date' }\r\n                ]}\r\n              />\r\n\r\n              <Group position=\"right\" mt=\"xl\">\r\n                <Button \r\n                  onClick={handleSaveSettings}\r\n                  loading={saving}\r\n                >\r\n                  Save Settings\r\n                </Button>\r\n              </Group>\r\n            </Stack>\r\n          </Paper>\r\n        </Tabs.Panel>\r\n\r\n        <Tabs.Panel value=\"notifications\">\r\n          <Paper p=\"xl\" radius=\"md\" withBorder>\r\n            <Stack spacing=\"md\">\r\n              <Switch\r\n                label=\"Enable Notifications\"\r\n                description=\"Receive system notifications\"\r\n                checked={settings.notifications}\r\n                onChange={(e) => setSettings({\r\n                  ...settings,\r\n                  notifications: e.target.checked\r\n                })}\r\n              />\r\n\r\n              <Group position=\"right\" mt=\"xl\">\r\n                <Button \r\n                  onClick={handleSaveSettings}\r\n                  loading={saving}\r\n                >\r\n                  Save Notification Settings\r\n                </Button>\r\n              </Group>\r\n            </Stack>\r\n          </Paper>\r\n        </Tabs.Panel>\r\n      </Tabs>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default Settings; ","import React, { useState } from 'react';\r\nimport { \r\n  Container, \r\n  Title, \r\n  Grid, \r\n  Paper, \r\n  Text, \r\n  Select, \r\n  Group, \r\n  RingProgress,\r\n  Stack,\r\n  Badge,\r\n  ThemeIcon,\r\n  Box,\r\n  Divider\r\n} from '@mantine/core';\r\nimport { \r\n  IconTrendingUp, \r\n  IconTrendingDown, \r\n  IconMinus, \r\n  IconChartBar, \r\n  IconCoin,\r\n  IconUsers,\r\n  IconStethoscope,\r\n  IconReportMedical\r\n} from '@tabler/icons-react';\r\n\r\nconst contracts = [\r\n  { value: 'all', label: 'All Contracts' },\r\n  { value: 'cigna-ma', label: 'Cigna Medicare Advantage' },\r\n  { value: 'humana-ma', label: 'Humana Medicare Advantage' },\r\n  { value: 'aetna-ma', label: 'Aetna Medicare Advantage' },\r\n  { value: 'uhc-ma', label: 'UnitedHealthcare Medicare Advantage' }\r\n];\r\n\r\nconst MetricCard = ({ title, value, trend, description, icon: Icon, color }) => {\r\n  const getTrendIcon = () => {\r\n    if (trend === 'up') return <IconTrendingUp size={16} color=\"#40c057\" />;\r\n    if (trend === 'down') return <IconTrendingDown size={16} color=\"#fa5252\" />;\r\n    return <IconMinus size={16} />;\r\n  };\r\n\r\n  return (\r\n    <Paper p=\"md\" radius=\"md\" withBorder h=\"100%\">\r\n      <Group position=\"apart\" mb=\"xs\">\r\n        <ThemeIcon size=\"xl\" radius=\"md\" color={color} variant=\"light\">\r\n          <Icon size={24} />\r\n        </ThemeIcon>\r\n        <Group spacing=\"xs\">\r\n          {getTrendIcon()}\r\n          <Text size=\"sm\" color={trend === 'up' ? 'green' : trend === 'down' ? 'red' : 'gray'}>\r\n            {trend === 'up' ? '+' : trend === 'down' ? '-' : ''}{Math.abs(trend)}%\r\n          </Text>\r\n        </Group>\r\n      </Group>\r\n      <Text size=\"xl\" weight={700} mb=\"xs\">\r\n        {value}\r\n      </Text>\r\n      <Text size=\"sm\" weight={500} mb=\"xs\">{title}</Text>\r\n      <Text size=\"xs\" color=\"dimmed\">\r\n        {description}\r\n      </Text>\r\n    </Paper>\r\n  );\r\n};\r\n\r\nconst ContractScoreCard = ({ contract, score, metrics }) => (\r\n  <Paper p=\"xl\" radius=\"md\" withBorder>\r\n    <Group position=\"apart\" mb=\"lg\">\r\n      <Stack spacing={0}>\r\n        <Text size=\"lg\" weight={500}>{contract}</Text>\r\n        <Text size=\"sm\" color=\"dimmed\">VBC Success Score</Text>\r\n      </Stack>\r\n      <RingProgress\r\n        size={80}\r\n        thickness={8}\r\n        sections={[{ value: score, color: score >= 75 ? 'green' : score >= 50 ? 'yellow' : 'red' }]}\r\n        label={\r\n          <Text size=\"lg\" weight={700} align=\"center\">\r\n            {score}%\r\n          </Text>\r\n        }\r\n      />\r\n    </Group>\r\n    <Grid>\r\n      {metrics.map((metric, index) => (\r\n        <Grid.Col key={index} span={6}>\r\n          <Group spacing=\"xs\">\r\n            <Text size=\"sm\" color=\"dimmed\">{metric.label}:</Text>\r\n            <Text size=\"sm\" weight={500}>{metric.value}</Text>\r\n          </Group>\r\n        </Grid.Col>\r\n      ))}\r\n    </Grid>\r\n  </Paper>\r\n);\r\n\r\nconst Performance = () => {\r\n  const [selectedContract, setSelectedContract] = useState('all');\r\n\r\n  const contractData = {\r\n    'cigna-ma': {\r\n      score: 82,\r\n      metrics: [\r\n        { label: 'Quality Score', value: '85%' },\r\n        { label: 'RAF Score', value: '1.25' },\r\n        { label: 'Cost of Care', value: '$842 PMPM' },\r\n        { label: 'Member Satisfaction', value: '4.2/5' }\r\n      ]\r\n    },\r\n    'humana-ma': {\r\n      score: 75,\r\n      metrics: [\r\n        { label: 'Quality Score', value: '78%' },\r\n        { label: 'RAF Score', value: '1.15' },\r\n        { label: 'Cost of Care', value: '$891 PMPM' },\r\n        { label: 'Member Satisfaction', value: '4.0/5' }\r\n      ]\r\n    }\r\n  };\r\n\r\n  const overallMetrics = [\r\n    {\r\n      title: 'Total Patients',\r\n      value: '2,547',\r\n      trend: 12,\r\n      description: 'Active patients across all contracts',\r\n      icon: IconUsers,\r\n      color: 'blue'\r\n    },\r\n    {\r\n      title: 'Quality Score',\r\n      value: '83%',\r\n      trend: 5,\r\n      description: 'Average across all contracts',\r\n      icon: IconStethoscope,\r\n      color: 'green'\r\n    },\r\n    {\r\n      title: 'RAF Score',\r\n      value: '1.21',\r\n      trend: 8,\r\n      description: 'Risk adjustment factor',\r\n      icon: IconReportMedical,\r\n      color: 'violet'\r\n    },\r\n    {\r\n      title: 'Shared Savings',\r\n      value: '$1.2M',\r\n      trend: 15,\r\n      description: 'Projected annual savings',\r\n      icon: IconCoin,\r\n      color: 'yellow'\r\n    }\r\n  ];\r\n\r\n  return (\r\n    <Container size=\"xl\" py=\"xl\">\r\n      <Group position=\"apart\" mb=\"xl\">\r\n        <Title order={2}>Performance Dashboard</Title>\r\n        <Select\r\n          value={selectedContract}\r\n          onChange={setSelectedContract}\r\n          data={contracts}\r\n          w={300}\r\n        />\r\n      </Group>\r\n\r\n      <Grid mb=\"xl\">\r\n        {overallMetrics.map((metric, index) => (\r\n          <Grid.Col key={index} span={3}>\r\n            <MetricCard {...metric} />\r\n          </Grid.Col>\r\n        ))}\r\n      </Grid>\r\n\r\n      <Title order={3} mb=\"lg\">Contract Performance</Title>\r\n      <Grid>\r\n        {Object.entries(contractData).map(([key, data], index) => (\r\n          <Grid.Col key={key} span={6}>\r\n            <ContractScoreCard \r\n              contract={contracts.find(c => c.value === key)?.label}\r\n              score={data.score}\r\n              metrics={data.metrics}\r\n            />\r\n          </Grid.Col>\r\n        ))}\r\n      </Grid>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default Performance; ","import React, { useState } from 'react';\r\nimport { \r\n  Container, \r\n  Title, \r\n  Paper, \r\n  Text, \r\n  Group, \r\n  Stack, \r\n  Badge, \r\n  Select,\r\n  Tabs,\r\n  Card,\r\n  List,\r\n  ThemeIcon,\r\n  Button,\r\n  Divider,\r\n  ActionIcon,\r\n  Tooltip,\r\n  Box,\r\n  Collapse\r\n} from '@mantine/core';\r\nimport { \r\n  IconDatabase, \r\n  IconAlertCircle, \r\n  IconStethoscope,\r\n  IconChecks,\r\n  IconX,\r\n  IconCalendarStats,\r\n  IconReportMedical,\r\n  IconArrowRight,\r\n  IconInfoCircle\r\n} from '@tabler/icons-react';\r\n\r\nconst ehrSystems = [\r\n  { value: 'epic', label: 'Epic' },\r\n  { value: 'cerner', label: 'Cerner' },\r\n  { value: 'athena', label: 'Athena Health' },\r\n  { value: 'allscripts', label: 'Allscripts' }\r\n];\r\n\r\nconst HCCOpportunity = ({ hcc, icdCode, description, rafValue, evidence = [] }) => {\r\n  const [isConfirmed, setIsConfirmed] = useState(false);\r\n  const [isDenied, setIsDenied] = useState(false);\r\n  const [showDetails, setShowDetails] = useState(false);\r\n\r\n  return (\r\n    <Paper \r\n      p=\"md\" \r\n      radius=\"md\" \r\n      withBorder \r\n      mb=\"sm\"\r\n      sx={(theme) => ({\r\n        minHeight: 160,\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        justifyContent: 'space-between'\r\n      })}\r\n    >\r\n      <Box>\r\n        <Group position=\"apart\" noWrap align=\"flex-start\">\r\n          <Box>\r\n            <Group spacing=\"xs\">\r\n              <Text weight={500}>{hcc}</Text>\r\n              <Badge color=\"blue\">RAF {rafValue}</Badge>\r\n              <Tooltip label=\"View ICD details\">\r\n                <ActionIcon \r\n                  variant=\"subtle\" \r\n                  onClick={() => setShowDetails(!showDetails)}\r\n                >\r\n                  <IconInfoCircle size={16} />\r\n                </ActionIcon>\r\n              </Tooltip>\r\n            </Group>\r\n            <Text size=\"sm\" color=\"dimmed\" mt={4}>\r\n              {description}\r\n            </Text>\r\n          </Box>\r\n          <Group spacing=\"xs\">\r\n            <Button\r\n              size=\"xs\"\r\n              color=\"green\"\r\n              variant={isConfirmed ? \"filled\" : \"light\"}\r\n              leftIcon={<IconChecks size={16} />}\r\n              onClick={() => setIsConfirmed(!isConfirmed)}\r\n              disabled={isDenied}\r\n            >\r\n              Confirm\r\n            </Button>\r\n            <Button\r\n              size=\"xs\"\r\n              color=\"red\"\r\n              variant={isDenied ? \"filled\" : \"light\"}\r\n              leftIcon={<IconX size={16} />}\r\n              onClick={() => setIsDenied(!isDenied)}\r\n              disabled={isConfirmed}\r\n            >\r\n              Deny\r\n            </Button>\r\n          </Group>\r\n        </Group>\r\n\r\n        {evidence.length > 0 && (\r\n          <Box mt=\"md\">\r\n            <Text size=\"sm\" weight={500} color=\"dimmed\">Evidence:</Text>\r\n            <List size=\"sm\" spacing=\"xs\" mt={4}>\r\n              {evidence.map((item, index) => (\r\n                <List.Item \r\n                  key={index}\r\n                  icon={\r\n                    <ThemeIcon color=\"blue\" size={16} radius=\"xl\">\r\n                      <IconChecks size={12} />\r\n                    </ThemeIcon>\r\n                  }\r\n                >\r\n                  <Text size=\"sm\">{item.source}</Text>\r\n                  <Text size=\"xs\" color=\"dimmed\">{item.detail}</Text>\r\n                </List.Item>\r\n              ))}\r\n            </List>\r\n          </Box>\r\n        )}\r\n      </Box>\r\n\r\n      <Collapse in={showDetails}>\r\n        <Box mt=\"md\" p=\"xs\" bg=\"gray.0\" sx={{ borderRadius: 4 }}>\r\n          <Text size=\"sm\" weight={500} color=\"dimmed\">ICD-10 Codes:</Text>\r\n          <Group spacing=\"xs\" mt={4}>\r\n            {icdCode.map((code, index) => (\r\n              <Badge key={index} variant=\"outline\">\r\n                {code}\r\n              </Badge>\r\n            ))}\r\n          </Group>\r\n        </Box>\r\n      </Collapse>\r\n    </Paper>\r\n  );\r\n};\r\n\r\nconst PatientAlert = ({ patient, hccGaps, qualityGaps }) => (\r\n  <Card shadow=\"sm\" p=\"md\" radius=\"md\" withBorder mb=\"md\">\r\n    <Stack spacing=\"xs\">\r\n      <Group position=\"apart\">\r\n        <Group>\r\n          <Title order={4}>{patient.name}</Title>\r\n          <Text size=\"sm\" color=\"dimmed\">DOB: {patient.dob}</Text>\r\n        </Group>\r\n        <Badge \r\n          color={patient.riskLevel === 'high' ? 'red' : 'yellow'}\r\n          variant=\"light\"\r\n        >\r\n          {patient.riskLevel.toUpperCase()} Risk\r\n        </Badge>\r\n      </Group>\r\n\r\n      <Divider my=\"xs\" />\r\n\r\n      <Text weight={500} size=\"sm\">HCC Opportunities:</Text>\r\n      <List spacing=\"xs\" size=\"sm\">\r\n        {hccGaps.map((gap, index) => (\r\n          <List.Item \r\n            key={index}\r\n            icon={\r\n              <ThemeIcon color=\"blue\" size={20} radius=\"xl\">\r\n                <IconReportMedical size={12} />\r\n              </ThemeIcon>\r\n            }\r\n          >\r\n            <HCCOpportunity\r\n              hcc={gap.hcc}\r\n              icdCode={gap.icdCodes}\r\n              description={gap.description}\r\n              rafValue={gap.rafValue}\r\n              evidence={gap.evidence}\r\n            />\r\n          </List.Item>\r\n        ))}\r\n      </List>\r\n\r\n      <Text weight={500} size=\"sm\" mt=\"sm\">Quality Gaps:</Text>\r\n      <List spacing=\"xs\" size=\"sm\">\r\n        {qualityGaps.map((gap, index) => (\r\n          <List.Item \r\n            key={index}\r\n            icon={\r\n              <ThemeIcon color=\"violet\" size={20} radius=\"xl\">\r\n                <IconChecks size={12} />\r\n              </ThemeIcon>\r\n            }\r\n          >\r\n            <Group position=\"apart\">\r\n              <Text>{gap.measure}</Text>\r\n              <Badge color=\"violet\" variant=\"light\">{gap.type}</Badge>\r\n            </Group>\r\n            <Text size=\"xs\" color=\"dimmed\">Due by: {gap.dueDate}</Text>\r\n          </List.Item>\r\n        ))}\r\n      </List>\r\n\r\n      <Divider my=\"xs\" />\r\n\r\n      <Group position=\"apart\">\r\n        <Text size=\"sm\" color=\"dimmed\">\r\n          Next Visit: {patient.nextVisit}\r\n        </Text>\r\n        <Button \r\n          variant=\"light\"\r\n          size=\"xs\"\r\n          rightIcon={<IconArrowRight size={16} />}\r\n        >\r\n          View Patient Details\r\n        </Button>\r\n      </Group>\r\n    </Stack>\r\n  </Card>\r\n);\r\n\r\nconst EHRAlerts = () => {\r\n  const [selectedEHR, setSelectedEHR] = useState('epic');\r\n  const [activeTab, setActiveTab] = useState('active');\r\n\r\n  const activePatients = [\r\n    {\r\n      name: \"John Smith\",\r\n      dob: \"05/15/1955\",\r\n      riskLevel: \"high\",\r\n      nextVisit: \"Today @ 2:30 PM\",\r\n      hccGaps: [\r\n        {\r\n          hcc: \"HCC 108 - COPD\",\r\n          icdCodes: [\"J44.9\", \"J44.1\"],\r\n          description: \"Chronic Obstructive Pulmonary Disease\",\r\n          rafValue: \"0.325\",\r\n          evidence: [\r\n            {\r\n              source: \"Spirometry Results (01/15/2024)\",\r\n              detail: \"FEV1/FVC ratio < 0.70, consistent with COPD\"\r\n            },\r\n            {\r\n              source: \"Current Medications\",\r\n              detail: \"Active prescription for Symbicort and Spiriva\"\r\n            },\r\n            {\r\n              source: \"Progress Notes (12/10/2023)\",\r\n              detail: \"Patient reports chronic cough and dyspnea on exertion\"\r\n            }\r\n          ]\r\n        },\r\n        {\r\n          hcc: \"HCC 18 - Diabetes with Chronic Complications\",\r\n          icdCodes: [\"E11.22\", \"E11.51\"],\r\n          description: \"Type 2 Diabetes with Multiple Complications\",\r\n          rafValue: \"0.302\",\r\n          evidence: [\r\n            {\r\n              source: \"Ophthalmology Consult (11/30/2023)\",\r\n              detail: \"Mild diabetic retinopathy documented with fundus photos\"\r\n            },\r\n            {\r\n              source: \"Lab Results (01/05/2024)\",\r\n              detail: \"HbA1c: 8.2%, Microalbumin elevated\"\r\n            },\r\n            {\r\n              source: \"Medication History\",\r\n              detail: \"Multiple oral diabetes medications plus insulin\"\r\n            }\r\n          ]\r\n        }\r\n      ],\r\n      qualityGaps: [\r\n        {\r\n          measure: \"Diabetes Eye Exam\",\r\n          type: \"HEDIS\",\r\n          dueDate: \"12/31/2024\",\r\n          evidence: \"Last exam 11/30/2023 - Due annually\"\r\n        },\r\n        {\r\n          measure: \"Annual Wellness Visit\",\r\n          type: \"Medicare\",\r\n          dueDate: \"03/15/2024\",\r\n          evidence: \"Last AWV 03/15/2023\"\r\n        }\r\n      ]\r\n    },\r\n    {\r\n      name: \"Mary Johnson\",\r\n      dob: \"08/22/1948\",\r\n      riskLevel: \"high\",\r\n      nextVisit: \"Today @ 3:45 PM\",\r\n      hccGaps: [\r\n        {\r\n          hcc: \"HCC 85 - Congestive Heart Failure\",\r\n          icdCodes: [\"I50.22\", \"I50.32\"],\r\n          description: \"Systolic Heart Failure\",\r\n          rafValue: \"0.368\",\r\n          evidence: [\r\n            {\r\n              source: \"Echocardiogram (02/01/2024)\",\r\n              detail: \"EF 35%, consistent with reduced ejection fraction\"\r\n            },\r\n            {\r\n              source: \"Current Medications\",\r\n              detail: \"Active prescriptions for Lasix and Lisinopril\"\r\n            },\r\n            {\r\n              source: \"Recent ED Visit (01/15/2024)\",\r\n              detail: \"Presented with dyspnea and peripheral edema\"\r\n            }\r\n          ]\r\n        }\r\n      ],\r\n      qualityGaps: [\r\n        {\r\n          measure: \"Colorectal Cancer Screening\",\r\n          type: \"HEDIS\",\r\n          dueDate: \"12/31/2023\",\r\n          evidence: \"Last colonoscopy > 10 years ago\"\r\n        },\r\n        {\r\n          measure: \"Fall Risk Assessment\",\r\n          type: \"Medicare\",\r\n          dueDate: \"12/31/2023\",\r\n          evidence: \"No documented assessment in past 12 months\"\r\n        }\r\n      ]\r\n    }\r\n  ];\r\n\r\n  return (\r\n    <Container size=\"xl\" py=\"xl\">\r\n      <Stack spacing=\"xl\">\r\n        <Group position=\"apart\">\r\n          <Group>\r\n            <ThemeIcon size=\"xl\" radius=\"md\" color=\"blue\">\r\n              <IconDatabase size={24} />\r\n            </ThemeIcon>\r\n            <Title order={2}>EHR Integration Alerts</Title>\r\n          </Group>\r\n          <Select\r\n            value={selectedEHR}\r\n            onChange={setSelectedEHR}\r\n            data={[\r\n              { value: 'epic', label: 'Epic' },\r\n              { value: 'cerner', label: 'Cerner' },\r\n              { value: 'athena', label: 'Athena Health' },\r\n              { value: 'allscripts', label: 'Allscripts' }\r\n            ]}\r\n            style={{ width: 200 }}\r\n          />\r\n        </Group>\r\n\r\n        <Paper p=\"md\" withBorder>\r\n          <Group mb=\"md\">\r\n            <IconAlertCircle size={20} />\r\n            <Text>\r\n              Showing alerts for patients currently open in {\r\n                ehrSystems.find(ehr => ehr.value === selectedEHR)?.label\r\n              }\r\n            </Text>\r\n          </Group>\r\n\r\n          <Tabs value={activeTab} onTabChange={setActiveTab}>\r\n            <Tabs.List>\r\n              <Tabs.Tab \r\n                value=\"active\" \r\n                icon={<IconStethoscope size={14} />}\r\n              >\r\n                Active Patients\r\n              </Tabs.Tab>\r\n              <Tabs.Tab \r\n                value=\"upcoming\" \r\n                icon={<IconCalendarStats size={14} />}\r\n              >\r\n                Upcoming Visits\r\n              </Tabs.Tab>\r\n            </Tabs.List>\r\n\r\n            <Tabs.Panel value=\"active\" pt=\"md\">\r\n              {activePatients.map((patient, index) => (\r\n                <PatientAlert \r\n                  key={index}\r\n                  patient={patient}\r\n                  hccGaps={patient.hccGaps}\r\n                  qualityGaps={patient.qualityGaps}\r\n                />\r\n              ))}\r\n            </Tabs.Panel>\r\n\r\n            <Tabs.Panel value=\"upcoming\" pt=\"md\">\r\n              <Text color=\"dimmed\">No upcoming visits today</Text>\r\n            </Tabs.Panel>\r\n          </Tabs>\r\n        </Paper>\r\n      </Stack>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default EHRAlerts; ","import { db, auth } from '../config/firebase';\r\nimport { \r\n  collection, \r\n  doc, \r\n  getDocs, \r\n  getDoc, \r\n  query, \r\n  where,\r\n  orderBy,\r\n  limit,\r\n  Timestamp,\r\n  addDoc,\r\n  updateDoc,\r\n  increment,\r\n  writeBatch,\r\n  arrayUnion,\r\n  onSnapshot\r\n} from 'firebase/firestore';\r\n\r\n/**\r\n * @typedef {Object} CohortMetrics\r\n * @property {string} id\r\n * @property {string} name\r\n * @property {number} totalPatients\r\n * @property {Object} riskProfile\r\n * @property {number} riskProfile.high\r\n * @property {number} riskProfile.medium\r\n * @property {number} riskProfile.low\r\n * @property {number} careGaps\r\n * @property {number} adherence\r\n * @property {string} updatedAt\r\n * @property {string} createdAt\r\n */\r\n\r\n// ... add other JSDoc type definitions ...\r\n\r\nexport const cohortService = {\r\n  /**\r\n   * Get all cohort metrics\r\n   * @returns {Promise<CohortMetrics[]>}\r\n   */\r\n  async getCohortMetrics() {\r\n    try {\r\n      // Check if user is authenticated\r\n      if (!auth.currentUser) {\r\n        throw new Error('User must be authenticated');\r\n      }\r\n\r\n      console.log('Fetching cohort metrics...');\r\n      const metricsRef = collection(db, 'cohortMetrics');\r\n      const snapshot = await getDocs(metricsRef);\r\n      \r\n      const metrics = snapshot.docs.map(doc => ({\r\n        id: doc.id,\r\n        ...doc.data()\r\n      }));\r\n      \r\n      return metrics;\r\n    } catch (error) {\r\n      console.error('Error fetching cohort metrics:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  /**\r\n   * Get recommendations for a cohort\r\n   * @param {string} cohortId\r\n   */\r\n  async getCohortRecommendations(cohortId) {\r\n    try {\r\n      const snapshot = await getDocs(\r\n        collection(db, `cohortMetrics/${cohortId}/recommendations`)\r\n      );\r\n      return snapshot.docs.map(doc => ({\r\n        id: doc.id,\r\n        ...doc.data()\r\n      }));\r\n    } catch (error) {\r\n      console.error('Error fetching recommendations:', error);\r\n      return [];\r\n    }\r\n  },\r\n\r\n  /**\r\n   * Get patient care pathways\r\n   * @param {string} patientId\r\n   */\r\n  async getPatientCarePathways(patientId) {\r\n    try {\r\n      const snapshot = await getDocs(\r\n        query(\r\n          collection(db, 'patientCarePathways'),\r\n          where('patientId', '==', patientId)\r\n        )\r\n      );\r\n      return snapshot.docs.map(doc => ({\r\n        id: doc.id,\r\n        ...doc.data()\r\n      }));\r\n    } catch (error) {\r\n      console.error('Error fetching care pathways:', error);\r\n      return [];\r\n    }\r\n  },\r\n\r\n  /**\r\n   * Get care gaps for a patient\r\n   * @param {string} patientId\r\n   */\r\n  async getPatientCareGaps(patientId) {\r\n    try {\r\n      const pathways = await this.getPatientCarePathways(patientId);\r\n      return pathways.reduce((gaps, pathway) => [...gaps, ...pathway.careGaps], []);\r\n    } catch (error) {\r\n      console.error('Error fetching care gaps:', error);\r\n      return [];\r\n    }\r\n  },\r\n\r\n  /**\r\n   * Update patient risk level\r\n   * @param {string} pathwayId\r\n   * @param {'high' | 'medium' | 'low'} riskLevel\r\n   */\r\n  async updatePatientRiskLevel(pathwayId, riskLevel) {\r\n    try {\r\n      const pathwayRef = doc(db, 'patientCarePathways', pathwayId);\r\n      const pathwayDoc = await getDoc(pathwayRef);\r\n      \r\n      if (!pathwayDoc.exists()) throw new Error('Pathway not found');\r\n\r\n      const pathway = pathwayDoc.data();\r\n      \r\n      await updateDoc(pathwayRef, {\r\n        riskLevel,\r\n        riskHistory: [\r\n          ...pathway.riskHistory || [],\r\n          {\r\n            level: riskLevel,\r\n            timestamp: new Date().toISOString()\r\n          }\r\n        ],\r\n        updatedAt: new Date().toISOString()\r\n      });\r\n    } catch (error) {\r\n      console.error('Error updating risk level:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  /**\r\n   * Subscribe to cohort updates\r\n   * @param {string} cohortId\r\n   * @param {function} callback\r\n   */\r\n  subscribeToUpdates(cohortId, callback) {\r\n    return onSnapshot(doc(db, 'cohortMetrics', cohortId), (doc) => {\r\n      if (doc.exists()) {\r\n        callback(doc.data());\r\n      }\r\n    });\r\n  }\r\n}; ","import React, { useState, useEffect } from 'react';\r\nimport { \r\n  Container, \r\n  Title, \r\n  Paper, \r\n  Text, \r\n  Group, \r\n  Stack, \r\n  Badge, \r\n  Select,\r\n  Tabs,\r\n  Card,\r\n  List,\r\n  ThemeIcon,\r\n  Button,\r\n  Divider,\r\n  Grid,\r\n  Progress,\r\n  ActionIcon,\r\n  Tooltip,\r\n  Alert\r\n} from '@mantine/core';\r\nimport { \r\n  IconBrain, \r\n  IconStethoscope,\r\n  IconHeart,\r\n  IconLungs,\r\n  IconBottle,\r\n  IconActivity,\r\n  IconArrowRight,\r\n  IconAlertCircle,\r\n  IconChecks,\r\n  IconUsers,\r\n  IconInfoCircle,\r\n  IconChartBar\r\n} from '@tabler/icons-react';\r\nimport { cohortService } from '../services/cohortService.js';\r\nimport { LoadingSpinner } from '../components/common/LoadingSpinner';\r\nimport { useUser } from '../contexts/UserContext';\r\n\r\nconst CohortCard = ({ cohort }) => (\r\n  <Card shadow=\"sm\" p=\"lg\" radius=\"md\" withBorder>\r\n    <Stack spacing=\"md\">\r\n      <Group position=\"apart\">\r\n        <Group>\r\n          <ThemeIcon size=\"xl\" radius=\"md\" variant=\"light\">\r\n            <cohort.icon size={24} />\r\n          </ThemeIcon>\r\n          <div>\r\n            <Title order={4}>{cohort.name}</Title>\r\n            <Text size=\"sm\" color=\"dimmed\">\r\n              {cohort.patientCount} Patients\r\n            </Text>\r\n          </div>\r\n        </Group>\r\n        <Tooltip label=\"View cohort details\">\r\n          <ActionIcon variant=\"light\" size=\"lg\">\r\n            <IconInfoCircle size={20} />\r\n          </ActionIcon>\r\n        </Tooltip>\r\n      </Group>\r\n\r\n      <div>\r\n        <Group position=\"apart\" mb={5}>\r\n          <Text size=\"sm\">Risk Profile</Text>\r\n          <Text size=\"xs\" color=\"dimmed\">\r\n            {cohort.riskProfile.high} High Risk\r\n          </Text>\r\n        </Group>\r\n        <Progress\r\n          size=\"lg\"\r\n          sections={[\r\n            { value: (cohort.riskProfile.high/cohort.patientCount)*100, color: 'red' },\r\n            { value: (cohort.riskProfile.medium/cohort.patientCount)*100, color: 'yellow' },\r\n            { value: (cohort.riskProfile.low/cohort.patientCount)*100, color: 'green' }\r\n          ]}\r\n        />\r\n      </div>\r\n\r\n      <Group grow>\r\n        <div>\r\n          <Text size=\"sm\">Care Gaps</Text>\r\n          <Text weight={700} size=\"xl\" color=\"red\">\r\n            {cohort.careGaps}\r\n          </Text>\r\n        </div>\r\n        <div>\r\n          <Text size=\"sm\">Adherence</Text>\r\n          <Text weight={700} size=\"xl\" color={cohort.adherence >= 80 ? 'green' : 'yellow'}>\r\n            {cohort.adherence}%\r\n          </Text>\r\n        </div>\r\n      </Group>\r\n\r\n      <Divider />\r\n\r\n      <Stack spacing=\"xs\">\r\n        <Text weight={500}>AI Recommendations:</Text>\r\n        {cohort.recommendations.map((rec, index) => (\r\n          <Paper key={index} p=\"xs\" radius=\"md\" withBorder>\r\n            <Group position=\"apart\" mb={4}>\r\n              <Text size=\"sm\" weight={500}>{rec.title}</Text>\r\n              <Badge \r\n                color={rec.priority === 'high' ? 'red' : 'yellow'}\r\n                variant=\"light\"\r\n              >\r\n                {rec.priority}\r\n              </Badge>\r\n            </Group>\r\n            <Text size=\"xs\" color=\"dimmed\" mb={4}>{rec.description}</Text>\r\n            <Text size=\"xs\" color=\"blue\" weight={500}>{rec.impact}</Text>\r\n          </Paper>\r\n        ))}\r\n      </Stack>\r\n\r\n      <Button \r\n        variant=\"light\" \r\n        rightIcon={<IconArrowRight size={16} />}\r\n        fullWidth\r\n      >\r\n        View Care Pathways\r\n      </Button>\r\n    </Stack>\r\n  </Card>\r\n);\r\n\r\nconst AIRecommendations = () => {\r\n  const { user, loading: authLoading } = useUser();\r\n  const [activeTab, setActiveTab] = useState('cohorts');\r\n  const [cohortMetrics, setCohortMetrics] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n\r\n  useEffect(() => {\r\n    const loadCohortData = async () => {\r\n      try {\r\n        setLoading(true);\r\n        if (user) {\r\n          const metrics = await cohortService.getCohortMetrics();\r\n          setCohortMetrics(metrics);\r\n        }\r\n      } catch (error) {\r\n        console.error('Error loading cohort data:', error);\r\n        setError(error.message);\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    if (!authLoading && user) {\r\n      loadCohortData();\r\n    }\r\n  }, [user, authLoading]);\r\n\r\n  if (authLoading) {\r\n    return (\r\n      <Container size=\"xl\" py=\"xl\">\r\n        <LoadingSpinner message=\"Checking authentication...\" />\r\n      </Container>\r\n    );\r\n  }\r\n\r\n  if (!user) {\r\n    return (\r\n      <Container size=\"xl\" py=\"xl\">\r\n        <Alert color=\"red\" title=\"Authentication Required\">\r\n          Please log in to view this page.\r\n        </Alert>\r\n      </Container>\r\n    );\r\n  }\r\n\r\n  if (loading) {\r\n    return (\r\n      <Container size=\"xl\" py=\"xl\">\r\n        <LoadingSpinner message=\"Loading cohort data...\" />\r\n      </Container>\r\n    );\r\n  }\r\n\r\n  if (error) {\r\n    return (\r\n      <Container size=\"xl\" py=\"xl\">\r\n        <Alert color=\"red\" title=\"Error loading data\">\r\n          {error}\r\n        </Alert>\r\n      </Container>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <Container size=\"xl\" py=\"xl\">\r\n      <Stack spacing=\"xl\">\r\n        <Group position=\"apart\">\r\n          <Group>\r\n            <ThemeIcon size=\"xl\" radius=\"md\" variant=\"light\" color=\"violet\">\r\n              <IconBrain size={24} />\r\n            </ThemeIcon>\r\n            <Title order={2}>AI Care Recommendations</Title>\r\n          </Group>\r\n          <Badge \r\n            variant=\"dot\" \r\n            color=\"green\"\r\n            size=\"lg\"\r\n          >\r\n            Updated 5 minutes ago\r\n          </Badge>\r\n        </Group>\r\n\r\n        <Tabs value={activeTab} onTabChange={setActiveTab}>\r\n          <Tabs.List>\r\n            <Tabs.Tab \r\n              value=\"cohorts\" \r\n              icon={<IconUsers size={14} />}\r\n            >\r\n              Condition Cohorts\r\n            </Tabs.Tab>\r\n            <Tabs.Tab \r\n              value=\"pathways\" \r\n              icon={<IconStethoscope size={14} />}\r\n            >\r\n              Care Pathways\r\n            </Tabs.Tab>\r\n            <Tabs.Tab \r\n              value=\"metrics\" \r\n              icon={<IconChartBar size={14} />}\r\n            >\r\n              Quality Metrics\r\n            </Tabs.Tab>\r\n          </Tabs.List>\r\n\r\n          <Tabs.Panel value=\"cohorts\" pt=\"xl\">\r\n            <Grid>\r\n              {cohortMetrics.map((cohort) => (\r\n                <Grid.Col key={cohort.id} md={6}>\r\n                  <CohortCard cohort={cohort} />\r\n                </Grid.Col>\r\n              ))}\r\n            </Grid>\r\n          </Tabs.Panel>\r\n\r\n          <Tabs.Panel value=\"pathways\" pt=\"xl\">\r\n            {/* Care Pathways content */}\r\n          </Tabs.Panel>\r\n\r\n          <Tabs.Panel value=\"metrics\" pt=\"xl\">\r\n            {/* Quality Metrics content */}\r\n          </Tabs.Panel>\r\n        </Tabs>\r\n      </Stack>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default AIRecommendations; ","import React from 'react';\r\nimport { \r\n  Container, \r\n  Title, \r\n  Table, \r\n  Text, \r\n  Badge, \r\n  Group,\r\n  ActionIcon,\r\n  Menu,\r\n  Paper,\r\n  Button\r\n} from '@mantine/core';\r\nimport { \r\n  IconDotsVertical, \r\n  IconBrowser, \r\n  IconDeviceDesktop,\r\n  IconTrash,\r\n  IconExternalLink \r\n} from '@tabler/icons-react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport useNotificationStore from '../stores/notificationStore';\r\nimport { auth } from '../firebase';\r\n\r\nconst PatientContextHistory = () => {\r\n  const navigate = useNavigate();\r\n  const { notifications, loading, error } = useNotificationStore(state => ({\r\n    notifications: state.notifications,\r\n    loading: state.loading,\r\n    error: state.error\r\n  }));\r\n  \r\n  console.log('PatientContextHistory render:', { notifications, loading, error });\r\n\r\n  const formatDate = (dateString) => {\r\n    return new Date(dateString).toLocaleString();\r\n  };\r\n\r\n  const getSourceIcon = (source) => {\r\n    if (source === 'browser') {\r\n      return <IconBrowser size={16} />;\r\n    }\r\n    return <IconDeviceDesktop size={16} />;\r\n  };\r\n\r\n  const getSourceBadge = (notification) => {\r\n    const { source = 'browser', appName } = notification;\r\n    return (\r\n      <Badge \r\n        leftSection={getSourceIcon(source)}\r\n        color={source === 'browser' ? 'blue' : 'green'}\r\n      >\r\n        {appName || 'Web Browser'}\r\n      </Badge>\r\n    );\r\n  };\r\n\r\n  // Add debug button for development\r\n  const addTestNotification = async () => {\r\n    if (!auth.currentUser) {\r\n      console.error('Must be logged in to add notifications');\r\n      return;\r\n    }\r\n\r\n    const testNotification = {\r\n      type: 'PATIENT_CONTEXT',\r\n      title: 'Test Patient Context',\r\n      message: 'Test patient detected',\r\n      patientId: 'test-123',\r\n      patientInfo: {\r\n        name: 'John Doe',\r\n        mrn: 'MRN123',\r\n        id: 'test-123'\r\n      },\r\n      source: 'browser',\r\n      appName: 'Test Browser'\r\n    };\r\n    await useNotificationStore.getState().addNotification(testNotification);\r\n  };\r\n\r\n  return (\r\n    <Container size=\"xl\" py=\"xl\">\r\n      <Paper p=\"md\" radius=\"md\">\r\n        <Group position=\"apart\" mb=\"xl\">\r\n          <Title order={2}>Patient Context History</Title>\r\n          <Group>\r\n            {process.env.NODE_ENV === 'development' && (\r\n              <Button onClick={addTestNotification} size=\"sm\">\r\n                Add Test Notification\r\n              </Button>\r\n            )}\r\n            <Badge size=\"lg\">\r\n              {notifications.length} Matches\r\n            </Badge>\r\n          </Group>\r\n        </Group>\r\n\r\n        <Table striped highlightOnHover>\r\n          <thead>\r\n            <tr>\r\n              <th>Patient Name</th>\r\n              <th>MRN</th>\r\n              <th>Source</th>\r\n              <th>Detected At</th>\r\n              <th>Actions</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {notifications.map((notification) => (\r\n              <tr key={notification.id}>\r\n                <td>\r\n                  <Text weight={500}>\r\n                    {notification.patientInfo.name}\r\n                  </Text>\r\n                </td>\r\n                <td>\r\n                  <Text color=\"dimmed\">\r\n                    {notification.patientInfo.mrn || 'N/A'}\r\n                  </Text>\r\n                </td>\r\n                <td>\r\n                  {getSourceBadge(notification)}\r\n                </td>\r\n                <td>\r\n                  <Text size=\"sm\" color=\"dimmed\">\r\n                    {formatDate(notification.timestamp)}\r\n                  </Text>\r\n                </td>\r\n                <td>\r\n                  <Menu position=\"bottom-end\">\r\n                    <Menu.Target>\r\n                      <ActionIcon>\r\n                        <IconDotsVertical size={16} />\r\n                      </ActionIcon>\r\n                    </Menu.Target>\r\n                    <Menu.Dropdown>\r\n                      <Menu.Item \r\n                        icon={<IconExternalLink size={16} />}\r\n                        onClick={() => navigate(`/patients/${notification.patientId}`)}\r\n                      >\r\n                        View Patient\r\n                      </Menu.Item>\r\n                      <Menu.Item \r\n                        icon={<IconTrash size={16} />}\r\n                        color=\"red\"\r\n                        onClick={() => useNotificationStore.getState().clearNotifications()}\r\n                      >\r\n                        Clear History\r\n                      </Menu.Item>\r\n                    </Menu.Dropdown>\r\n                  </Menu>\r\n                </td>\r\n              </tr>\r\n            ))}\r\n            {notifications.length === 0 && (\r\n              <tr>\r\n                <td colSpan={5}>\r\n                  <Text align=\"center\" color=\"dimmed\" py=\"xl\">\r\n                    No patient context history found\r\n                  </Text>\r\n                </td>\r\n              </tr>\r\n            )}\r\n          </tbody>\r\n        </Table>\r\n      </Paper>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default PatientContextHistory; ","import React, { createContext, useContext, useState, useEffect } from 'react';\r\nimport { MantineProvider, ColorSchemeProvider } from '@mantine/core';\r\n\r\nconst ThemeContext = createContext();\r\n\r\nexport const ThemeProvider = ({ children }) => {\r\n  const [colorScheme, setColorScheme] = useState(localStorage.getItem('theme') || 'light');\r\n\r\n  const toggleColorScheme = (value) => {\r\n    const nextColorScheme = value || (colorScheme === 'dark' ? 'light' : 'dark');\r\n    setColorScheme(nextColorScheme);\r\n    localStorage.setItem('theme', nextColorScheme);\r\n  };\r\n\r\n  return (\r\n    <ColorSchemeProvider colorScheme={colorScheme} toggleColorScheme={toggleColorScheme}>\r\n      <MantineProvider\r\n        theme={{\r\n          colorScheme,\r\n          colors: {\r\n            // Custom colors for both themes\r\n            brand: ['#6E2B81', '#8A3A9B', '#B82C5D', '#8A2147'],\r\n          },\r\n        }}\r\n        withGlobalStyles\r\n        withNormalizeCSS\r\n      >\r\n        {children}\r\n      </MantineProvider>\r\n    </ColorSchemeProvider>\r\n  );\r\n};\r\n\r\nexport const useTheme = () => {\r\n  const context = useContext(ThemeContext);\r\n  if (!context) {\r\n    throw new Error('useTheme must be used within a ThemeProvider');\r\n  }\r\n  return context;\r\n}; ","import React from 'react';\r\nimport { Popover, ActionIcon, Badge, Stack, Text, Button, Group, Box } from '@mantine/core';\r\nimport { IconBell } from '@tabler/icons-react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport useNotificationStore from '../../stores/notificationStore';\r\n\r\nexport const NotificationCenter = () => {\r\n  const navigate = useNavigate();\r\n  const { notifications, markAsRead, clearNotifications, getUnreadCount } = useNotificationStore();\r\n  const unreadCount = getUnreadCount();\r\n\r\n  const handleNotificationClick = (notification) => {\r\n    markAsRead(notification.id);\r\n    if (notification.patientId) {\r\n      navigate(`/patients/${notification.patientId}`);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Popover width={400} position=\"bottom-end\">\r\n      <Popover.Target>\r\n        <div style={{ position: 'relative' }}>\r\n          <ActionIcon size=\"lg\">\r\n            <IconBell size={20} />\r\n          </ActionIcon>\r\n          {unreadCount > 0 && (\r\n            <Badge \r\n              size=\"sm\" \r\n              variant=\"filled\" \r\n              style={{ \r\n                position: 'absolute', \r\n                top: -5, \r\n                right: -5 \r\n              }}\r\n            >\r\n              {unreadCount}\r\n            </Badge>\r\n          )}\r\n        </div>\r\n      </Popover.Target>\r\n\r\n      <Popover.Dropdown>\r\n        <Stack spacing=\"md\">\r\n          <Group position=\"apart\">\r\n            <Text weight={500} size=\"lg\">Notifications</Text>\r\n            {notifications.length > 0 && (\r\n              <Button \r\n                variant=\"subtle\" \r\n                size=\"xs\"\r\n                onClick={() => clearNotifications()}\r\n              >\r\n                Clear All\r\n              </Button>\r\n            )}\r\n          </Group>\r\n\r\n          <Box sx={{ maxHeight: '400px', overflow: 'auto' }}>\r\n            <Stack spacing=\"md\">\r\n              {notifications.length === 0 ? (\r\n                <Text color=\"dimmed\" size=\"sm\" align=\"center\" py=\"md\">\r\n                  No notifications\r\n                </Text>\r\n              ) : (\r\n                notifications.map((notification) => (\r\n                  <Button\r\n                    key={notification.id}\r\n                    variant={notification.read ? 'subtle' : 'light'}\r\n                    color={notification.read ? 'gray' : 'blue'}\r\n                    fullWidth\r\n                    onClick={() => handleNotificationClick(notification)}\r\n                    styles={{\r\n                      root: {\r\n                        padding: '16px',\r\n                        height: 'auto',\r\n                        textAlign: 'left'\r\n                      },\r\n                      inner: {\r\n                        justifyContent: 'flex-start'\r\n                      }\r\n                    }}\r\n                  >\r\n                    <Stack spacing=\"xs\" align=\"flex-start\">\r\n                      <Text size=\"sm\" weight={500} lineClamp={2}>\r\n                        {notification.title}\r\n                      </Text>\r\n                      <Text size=\"xs\" color=\"dimmed\" lineClamp={2}>\r\n                        {notification.message}\r\n                      </Text>\r\n                      <Text size=\"xs\" color=\"dimmed\">\r\n                        {new Date(notification.timestamp).toLocaleString()}\r\n                      </Text>\r\n                    </Stack>\r\n                  </Button>\r\n                ))\r\n              )}\r\n            </Stack>\r\n          </Box>\r\n        </Stack>\r\n      </Popover.Dropdown>\r\n    </Popover>\r\n  );\r\n}; ","import React from 'react';\r\nimport { motion } from 'framer-motion';\r\n\r\nconst pageVariants = {\r\n  initial: {\r\n    opacity: 0,\r\n    x: -20\r\n  },\r\n  in: {\r\n    opacity: 1,\r\n    x: 0\r\n  },\r\n  exit: {\r\n    opacity: 0,\r\n    x: 20\r\n  }\r\n};\r\n\r\nconst pageTransition = {\r\n  type: \"tween\",\r\n  ease: \"anticipate\",\r\n  duration: 0.5\r\n};\r\n\r\nconst PageTransition = ({ children }) => {\r\n  return (\r\n    <motion.div\r\n      initial=\"initial\"\r\n      animate=\"in\"\r\n      exit=\"exit\"\r\n      variants={pageVariants}\r\n      transition={pageTransition}\r\n    >\r\n      {children}\r\n    </motion.div>\r\n  );\r\n};\r\n\r\nexport default PageTransition; ","import React from 'react';\r\nimport { Paper, Title, Text, Group, Stack, Progress, ThemeIcon, Badge } from '@mantine/core';\r\nimport { IconTrendingUp, IconAlertTriangle } from '@tabler/icons-react';\r\n\r\nconst RiskScoreCard = ({ patient }) => {\r\n  const riskFactors = [\r\n    { name: 'Chronic Conditions', score: 3.2 },\r\n    { name: 'Utilization History', score: 2.1 },\r\n    { name: 'Medication Adherence', score: 1.8 },\r\n    { name: 'Social Determinants', score: 1.3 }\r\n  ];\r\n\r\n  return (\r\n    <Paper p=\"md\" radius=\"md\">\r\n      <Title order={3} mb=\"md\">Risk Profile</Title>\r\n      \r\n      <Stack spacing=\"md\">\r\n        <Group position=\"apart\">\r\n          <Text size=\"xl\" weight={700}>8.4</Text>\r\n          <Badge color=\"red\">High Risk</Badge>\r\n        </Group>\r\n\r\n        <Group spacing=\"xs\">\r\n          <ThemeIcon color=\"red\" variant=\"light\">\r\n            <IconTrendingUp size={16} />\r\n          </ThemeIcon>\r\n          <Text size=\"sm\">+2.1 from last month</Text>\r\n        </Group>\r\n\r\n        <Stack spacing=\"xs\">\r\n          {riskFactors.map((factor) => (\r\n            <div key={factor.name}>\r\n              <Group position=\"apart\" mb={4}>\r\n                <Text size=\"sm\">{factor.name}</Text>\r\n                <Text size=\"sm\" weight={500}>{factor.score}</Text>\r\n              </Group>\r\n              <Progress \r\n                value={factor.score * 10} \r\n                color=\"red\" \r\n                size=\"sm\" \r\n              />\r\n            </div>\r\n          ))}\r\n        </Stack>\r\n\r\n        <Group spacing=\"xs\">\r\n          <ThemeIcon color=\"yellow\" variant=\"light\">\r\n            <IconAlertTriangle size={16} />\r\n          </ThemeIcon>\r\n          <Text size=\"sm\">Intervention recommended</Text>\r\n        </Group>\r\n      </Stack>\r\n    </Paper>\r\n  );\r\n};\r\n\r\nexport default RiskScoreCard; ","import React from 'react';\r\nimport { Paper, Title, Grid, Text, RingProgress, Group, Stack } from '@mantine/core';\r\n\r\nconst QualityMetrics = ({ patient, detailed = false }) => {\r\n  const metrics = [\r\n    {\r\n      name: 'HEDIS Measures',\r\n      completed: 12,\r\n      total: 15,\r\n      color: 'blue'\r\n    },\r\n    {\r\n      name: 'Care Gaps',\r\n      completed: 3,\r\n      total: 5,\r\n      color: 'orange'\r\n    },\r\n    {\r\n      name: 'Screenings',\r\n      completed: 8,\r\n      total: 10,\r\n      color: 'green'\r\n    },\r\n    {\r\n      name: 'Immunizations',\r\n      completed: 6,\r\n      total: 8,\r\n      color: 'violet'\r\n    }\r\n  ];\r\n\r\n  return (\r\n    <Paper p=\"md\" radius=\"md\">\r\n      <Title order={3} mb=\"md\">Quality Metrics</Title>\r\n      \r\n      <Grid>\r\n        {metrics.map((metric) => (\r\n          <Grid.Col key={metric.name} span={detailed ? 6 : 3}>\r\n            <Group noWrap align=\"flex-start\">\r\n              <RingProgress\r\n                size={80}\r\n                roundCaps\r\n                thickness={8}\r\n                sections={[\r\n                  { value: (metric.completed / metric.total) * 100, color: metric.color }\r\n                ]}\r\n                label={\r\n                  <Text align=\"center\" size=\"xs\" weight={700}>\r\n                    {Math.round((metric.completed / metric.total) * 100)}%\r\n                  </Text>\r\n                }\r\n              />\r\n              <Stack spacing={4}>\r\n                <Text weight={500}>{metric.name}</Text>\r\n                <Text size=\"sm\" color=\"dimmed\">\r\n                  {metric.completed} of {metric.total} complete\r\n                </Text>\r\n                {detailed && (\r\n                  <Text size=\"xs\" color=\"dimmed\">\r\n                    Last updated: {new Date().toLocaleDateString()}\r\n                  </Text>\r\n                )}\r\n              </Stack>\r\n            </Group>\r\n          </Grid.Col>\r\n        ))}\r\n      </Grid>\r\n    </Paper>\r\n  );\r\n};\r\n\r\nexport default QualityMetrics; ","import React, { useState } from 'react';\r\nimport { \r\n  Paper, \r\n  Title, \r\n  Text, \r\n  Group, \r\n  Stack, \r\n  Badge, \r\n  Button, \r\n  ActionIcon,\r\n  FileButton,\r\n  Progress,\r\n  Modal,\r\n  TextInput,\r\n  Textarea,\r\n  Divider,\r\n  ThemeIcon,\r\n  List\r\n} from '@mantine/core';\r\nimport { \r\n  IconAlertCircle, \r\n  IconUpload, \r\n  IconPaperclip, \r\n  IconX,\r\n  IconDownload,\r\n  IconEye\r\n} from '@tabler/icons-react';\r\nimport { Dropzone } from '@mantine/dropzone';\r\n\r\nconst CareGaps = ({ patient }) => {\r\n  const [uploadModalOpen, setUploadModalOpen] = useState(false);\r\n  const [selectedGap, setSelectedGap] = useState(null);\r\n  const [uploadProgress, setUploadProgress] = useState(0);\r\n  const [note, setNote] = useState('');\r\n\r\n  const careGaps = [\r\n    {\r\n      id: 1,\r\n      title: 'Annual Wellness Visit',\r\n      priority: 'high',\r\n      dueDate: '2024-03-15',\r\n      status: 'overdue',\r\n      description: 'Patient has not completed annual wellness visit for 2024',\r\n      attachments: [\r\n        { name: 'Previous_Visit_Summary.pdf', date: '2023-03-10' }\r\n      ]\r\n    },\r\n    {\r\n      id: 2,\r\n      title: 'Diabetes A1C Test',\r\n      priority: 'medium',\r\n      dueDate: '2024-02-28',\r\n      status: 'pending',\r\n      description: 'Regular A1C monitoring required',\r\n      attachments: [\r\n        { name: 'Lab_Results_2023.pdf', date: '2023-12-15' },\r\n        { name: 'Care_Plan.pdf', date: '2024-01-10' }\r\n      ]\r\n    }\r\n  ];\r\n\r\n  const handleFileUpload = (files) => {\r\n    // Simulate file upload progress\r\n    let progress = 0;\r\n    const interval = setInterval(() => {\r\n      progress += 10;\r\n      setUploadProgress(progress);\r\n      if (progress >= 100) {\r\n        clearInterval(interval);\r\n        // Add the file to attachments\r\n        const newAttachment = {\r\n          name: files[0].name,\r\n          date: new Date().toISOString().split('T')[0]\r\n        };\r\n        // Update care gap attachments\r\n        setTimeout(() => {\r\n          setUploadProgress(0);\r\n          setUploadModalOpen(false);\r\n          setNote('');\r\n        }, 500);\r\n      }\r\n    }, 200);\r\n  };\r\n\r\n  const getPriorityColor = (priority) => {\r\n    switch (priority) {\r\n      case 'high': return 'red';\r\n      case 'medium': return 'orange';\r\n      case 'low': return 'blue';\r\n      default: return 'gray';\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Paper p=\"md\" radius=\"md\">\r\n        <Group position=\"apart\" mb=\"md\">\r\n          <Title order={3}>Care Gaps</Title>\r\n          <Badge size=\"lg\">{careGaps.length} Open</Badge>\r\n        </Group>\r\n\r\n        <Stack spacing=\"md\">\r\n          {careGaps.map((gap) => (\r\n            <Paper key={gap.id} p=\"md\" radius=\"md\" withBorder>\r\n              <Group position=\"apart\" mb=\"xs\">\r\n                <Group>\r\n                  <ThemeIcon \r\n                    color={getPriorityColor(gap.priority)} \r\n                    variant=\"light\"\r\n                    size=\"lg\"\r\n                  >\r\n                    <IconAlertCircle size={20} />\r\n                  </ThemeIcon>\r\n                  <div>\r\n                    <Text weight={500}>{gap.title}</Text>\r\n                    <Text size=\"sm\" color=\"dimmed\">Due: {gap.dueDate}</Text>\r\n                  </div>\r\n                </Group>\r\n                <Badge color={getPriorityColor(gap.priority)}>\r\n                  {gap.priority.toUpperCase()}\r\n                </Badge>\r\n              </Group>\r\n\r\n              <Text size=\"sm\" mb=\"md\">{gap.description}</Text>\r\n\r\n              <Group position=\"apart\">\r\n                <Group spacing=\"xs\">\r\n                  {gap.attachments.map((file, index) => (\r\n                    <Button\r\n                      key={index}\r\n                      variant=\"light\"\r\n                      size=\"xs\"\r\n                      leftIcon={<IconPaperclip size={14} />}\r\n                      rightIcon={<IconDownload size={14} />}\r\n                    >\r\n                      {file.name}\r\n                    </Button>\r\n                  ))}\r\n                </Group>\r\n                <Button\r\n                  size=\"xs\"\r\n                  leftIcon={<IconUpload size={14} />}\r\n                  onClick={() => {\r\n                    setSelectedGap(gap);\r\n                    setUploadModalOpen(true);\r\n                  }}\r\n                >\r\n                  Upload\r\n                </Button>\r\n              </Group>\r\n            </Paper>\r\n          ))}\r\n        </Stack>\r\n      </Paper>\r\n\r\n      <Modal\r\n        opened={uploadModalOpen}\r\n        onClose={() => setUploadModalOpen(false)}\r\n        title=\"Upload Documentation\"\r\n        size=\"lg\"\r\n      >\r\n        <Stack spacing=\"md\">\r\n          <Text weight={500}>\r\n            Uploading for: {selectedGap?.title}\r\n          </Text>\r\n          \r\n          <Dropzone\r\n            onDrop={handleFileUpload}\r\n            maxSize={5 * 1024 ** 2} // 5MB\r\n            accept={['application/pdf', 'image/*']}\r\n          >\r\n            <Group position=\"center\" spacing=\"xl\" style={{ minHeight: 120, pointerEvents: 'none' }}>\r\n              <Dropzone.Accept>\r\n                <IconUpload size={50} stroke={1.5} />\r\n              </Dropzone.Accept>\r\n              <Dropzone.Reject>\r\n                <IconX size={50} stroke={1.5} />\r\n              </Dropzone.Reject>\r\n              <Dropzone.Idle>\r\n                <IconUpload size={50} stroke={1.5} />\r\n              </Dropzone.Idle>\r\n\r\n              <div>\r\n                <Text size=\"xl\" inline>\r\n                  Drag files here or click to select\r\n                </Text>\r\n                <Text size=\"sm\" color=\"dimmed\" inline mt={7}>\r\n                  Files should not exceed 5MB\r\n                </Text>\r\n              </div>\r\n            </Group>\r\n          </Dropzone>\r\n\r\n          {uploadProgress > 0 && (\r\n            <Progress \r\n              value={uploadProgress} \r\n              label={`${uploadProgress}%`} \r\n              size=\"xl\" \r\n              radius=\"xl\"\r\n            />\r\n          )}\r\n\r\n          <Divider />\r\n\r\n          <Textarea\r\n            label=\"Additional Notes\"\r\n            placeholder=\"Add any relevant notes about this documentation\"\r\n            value={note}\r\n            onChange={(e) => setNote(e.currentTarget.value)}\r\n            minRows={3}\r\n          />\r\n\r\n          <Group position=\"right\">\r\n            <Button variant=\"default\" onClick={() => setUploadModalOpen(false)}>\r\n              Cancel\r\n            </Button>\r\n            <Button>\r\n              Upload\r\n            </Button>\r\n          </Group>\r\n        </Stack>\r\n      </Modal>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default CareGaps; ","import React, { useMemo } from 'react';\r\nimport ReactFlow, { \r\n  Handle, \r\n  Position, \r\n  MarkerType,\r\n  Background,\r\n  Controls \r\n} from 'reactflow';\r\nimport { Paper, Title, Text, Badge, Group } from '@mantine/core';\r\nimport 'reactflow/dist/style.css';\r\n\r\n// Custom node component for pathway steps\r\nconst PathwayNode = ({ data }) => {\r\n  const getNodeStyle = (type) => {\r\n    switch(type) {\r\n      case 'condition':\r\n        return {\r\n          background: '#e03131',\r\n          color: 'white',\r\n          border: '2px solid #c92a2a'\r\n        };\r\n      case 'current':\r\n        return {\r\n          background: '#228be6',\r\n          color: 'white',\r\n          border: '2px solid #1c7ed6'\r\n        };\r\n      case 'recommended':\r\n        return {\r\n          background: '#40c057',\r\n          color: 'white',\r\n          border: '2px solid #37b24d'\r\n        };\r\n      case 'alternative':\r\n        return {\r\n          background: '#fab005',\r\n          color: 'white',\r\n          border: '2px solid #f59f00'\r\n        };\r\n      default:\r\n        return {\r\n          background: '#868e96',\r\n          color: 'white',\r\n          border: '2px solid #495057'\r\n        };\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div\r\n      style={{\r\n        padding: '12px 20px',\r\n        borderRadius: '8px',\r\n        minWidth: '180px',\r\n        textAlign: 'center',\r\n        ...getNodeStyle(data.type)\r\n      }}\r\n    >\r\n      <Handle type=\"target\" position={Position.Left} />\r\n      <div>\r\n        <Text size=\"sm\" weight={500}>{data.label}</Text>\r\n        {data.severity && (\r\n          <Badge size=\"sm\" variant=\"filled\" color=\"red\">\r\n            {data.severity}\r\n          </Badge>\r\n        )}\r\n        {data.probability && (\r\n          <Badge size=\"sm\" variant=\"light\" color={data.type === 'current' ? 'blue' : 'gray'}>\r\n            {Math.round(data.probability * 100)}% probability\r\n          </Badge>\r\n        )}\r\n        {data.details && (\r\n          <Text size=\"xs\" color=\"gray.2\" mt={4}>\r\n            {data.details}\r\n          </Text>\r\n        )}\r\n      </div>\r\n      <Handle type=\"source\" position={Position.Right} />\r\n    </div>\r\n  );\r\n};\r\n\r\nconst nodeTypes = {\r\n  pathway: PathwayNode\r\n};\r\n\r\nconst CarePathway = ({ patient }) => {\r\n  // Generate pathway data based on patient conditions\r\n  const { nodes, edges } = useMemo(() => {\r\n    const conditions = [\r\n      {\r\n        id: 'diabetes',\r\n        name: 'Type 2 Diabetes',\r\n        severity: 'Uncontrolled',\r\n        actions: [\r\n          {\r\n            id: 'diabetes-med',\r\n            label: 'Medication Adjustment',\r\n            type: 'recommended',\r\n            probability: 0.85,\r\n            details: 'Increase Metformin to 1000mg BID',\r\n            outcomes: [{\r\n              id: 'diabetes-outcome',\r\n              label: 'Target HbA1c',\r\n              probability: 0.75,\r\n              details: 'HbA1c < 7.0%'\r\n            }]\r\n          },\r\n          {\r\n            id: 'diabetes-lifestyle',\r\n            label: 'Lifestyle Program',\r\n            type: 'alternative',\r\n            probability: 0.65,\r\n            details: 'Diet & Exercise Plan',\r\n            outcomes: [{\r\n              id: 'diabetes-outcome',\r\n              label: 'Target HbA1c',\r\n              probability: 0.75,\r\n              details: 'HbA1c < 7.0%'\r\n            }]\r\n          }\r\n        ]\r\n      },\r\n      {\r\n        id: 'hypertension',\r\n        name: 'Hypertension',\r\n        severity: 'Stage 2',\r\n        actions: [\r\n          {\r\n            id: 'htn-med',\r\n            label: 'Add ACE Inhibitor',\r\n            type: 'recommended',\r\n            probability: 0.9,\r\n            details: 'Start Lisinopril 10mg daily',\r\n            outcomes: [{\r\n              id: 'htn-outcome',\r\n              label: 'BP Control',\r\n              probability: 0.8,\r\n              details: 'BP < 130/80'\r\n            }]\r\n          }\r\n        ]\r\n      }\r\n    ];\r\n\r\n    let nodes = [];\r\n    let edges = [];\r\n    let yOffset = 0;\r\n\r\n    conditions.forEach((condition, index) => {\r\n      const baseY = index * 200;\r\n      \r\n      // Add condition node\r\n      nodes.push({\r\n        id: condition.id,\r\n        type: 'pathway',\r\n        position: { x: 50, y: baseY },\r\n        data: { \r\n          label: condition.name,\r\n          type: 'condition',\r\n          severity: condition.severity\r\n        }\r\n      });\r\n\r\n      // Add action nodes\r\n      condition.actions.forEach((action, actionIndex) => {\r\n        const actionY = baseY + (actionIndex * 100) - (condition.actions.length - 1) * 50;\r\n        \r\n        nodes.push({\r\n          id: action.id,\r\n          type: 'pathway',\r\n          position: { x: 300, y: actionY },\r\n          data: { \r\n            label: action.label,\r\n            type: action.type,\r\n            probability: action.probability,\r\n            details: action.details\r\n          }\r\n        });\r\n\r\n        edges.push({\r\n          id: `${condition.id}-${action.id}`,\r\n          source: condition.id,\r\n          target: action.id,\r\n          type: 'smoothstep',\r\n          markerEnd: { type: MarkerType.ArrowClosed },\r\n          style: { stroke: action.type === 'recommended' ? '#40c057' : '#fab005' }\r\n        });\r\n\r\n        // Add outcome nodes\r\n        action.outcomes.forEach(outcome => {\r\n          const outcomeNode = {\r\n            id: `${action.id}-${outcome.id}`,\r\n            type: 'pathway',\r\n            position: { x: 550, y: actionY },\r\n            data: { \r\n              label: outcome.label,\r\n              type: 'recommended',\r\n              probability: outcome.probability,\r\n              details: outcome.details\r\n            }\r\n          };\r\n\r\n          if (!nodes.find(n => n.id === outcomeNode.id)) {\r\n            nodes.push(outcomeNode);\r\n          }\r\n\r\n          edges.push({\r\n            id: `${action.id}-${outcome.id}`,\r\n            source: action.id,\r\n            target: `${action.id}-${outcome.id}`,\r\n            type: 'smoothstep',\r\n            markerEnd: { type: MarkerType.ArrowClosed },\r\n            style: { stroke: '#40c057' }\r\n          });\r\n        });\r\n      });\r\n    });\r\n\r\n    return { nodes, edges };\r\n  }, [patient]);\r\n\r\n  return (\r\n    <Paper p=\"xl\" radius=\"md\">\r\n      <Group position=\"apart\" mb=\"lg\">\r\n        <Title order={3}>Care Pathway</Title>\r\n        <Text size=\"sm\" color=\"dimmed\">Based on current conditions</Text>\r\n      </Group>\r\n      <div style={{ height: 500 }}>\r\n        <ReactFlow\r\n          nodes={nodes}\r\n          edges={edges}\r\n          nodeTypes={nodeTypes}\r\n          fitView\r\n          minZoom={0.5}\r\n          maxZoom={1.5}\r\n          defaultViewport={{ zoom: 1 }}\r\n        >\r\n          <Background />\r\n          <Controls />\r\n        </ReactFlow>\r\n      </div>\r\n    </Paper>\r\n  );\r\n};\r\n\r\nexport default CarePathway; ","import React from 'react';\r\nimport { useParams } from 'react-router-dom';\r\nimport { \r\n  Container, \r\n  Grid, \r\n  Paper, \r\n  Title, \r\n  Text, \r\n  Group, \r\n  Stack,\r\n  Loader,\r\n  Center\r\n} from '@mantine/core';\r\nimport { \r\n  IconHeartbeat, \r\n  IconStethoscope, \r\n  IconReportMedical,\r\n  IconAlertCircle,\r\n  IconCalendarStats,\r\n  IconChartBar,\r\n  IconCurrencyDollar\r\n} from '@tabler/icons-react';\r\nimport { usePatient } from '../../contexts/PatientContext';\r\n\r\nimport RiskScoreCard from './chart/RiskScoreCard';\r\nimport QualityMetrics from './chart/QualityMetrics';\r\nimport CareGaps from './chart/CareGaps';\r\nimport CarePathway from './chart/CarePathway';\r\n\r\nconst PatientDetails = () => {\r\n  const { id } = useParams();\r\n  const { patients, loading } = usePatient();\r\n  \r\n  // Find the current patient from the patients array\r\n  const patient = patients?.find(p => p.id === id);\r\n\r\n  if (loading) {\r\n    return (\r\n      <Center style={{ height: 'calc(100vh - 200px)' }}>\r\n        <Loader size=\"xl\" />\r\n      </Center>\r\n    );\r\n  }\r\n\r\n  if (!patient) {\r\n    return (\r\n      <Container size=\"xl\" py=\"xl\">\r\n        <Paper p=\"xl\" radius=\"md\">\r\n          <Text align=\"center\" color=\"dimmed\">\r\n            Patient not found\r\n          </Text>\r\n        </Paper>\r\n      </Container>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <Container size=\"xl\" py=\"xl\">\r\n      <Paper p=\"xl\" radius=\"md\" mb=\"lg\">\r\n        <Group position=\"apart\" mb=\"xl\">\r\n          <Stack spacing={4}>\r\n            <Title order={2}>\r\n              {patient.firstName} {patient.lastName}\r\n            </Title>\r\n            <Text color=\"dimmed\" size=\"sm\">\r\n              DOB: {new Date(patient.dateOfBirth).toLocaleDateString()}\r\n            </Text>\r\n          </Stack>\r\n          <Group>\r\n            <Text weight={500}>\r\n              Risk Level: \r\n            </Text>\r\n            <Text \r\n              weight={600}\r\n              color={\r\n                patient.riskLevel === 'high' ? 'red' : \r\n                patient.riskLevel === 'medium' ? 'yellow' : \r\n                'green'\r\n              }\r\n            >\r\n              {patient.riskLevel?.toUpperCase()}\r\n            </Text>\r\n          </Group>\r\n        </Group>\r\n\r\n        <Grid>\r\n          <Grid.Col span={4}>\r\n            <RiskScoreCard patient={patient} />\r\n          </Grid.Col>\r\n          <Grid.Col span={8}>\r\n            <QualityMetrics patient={patient} />\r\n          </Grid.Col>\r\n          <Grid.Col span={12}>\r\n            <CareGaps patient={patient} />\r\n          </Grid.Col>\r\n          <Grid.Col span={12}>\r\n            <CarePathway patient={patient} />\r\n          </Grid.Col>\r\n        </Grid>\r\n      </Paper>\r\n\r\n      {/* Additional patient details sections */}\r\n      <Grid>\r\n        <Grid.Col span={6}>\r\n          <Paper p=\"xl\" radius=\"md\">\r\n            <Title order={3} mb=\"lg\">Recent Activity</Title>\r\n            {/* Add recent activity content */}\r\n          </Paper>\r\n        </Grid.Col>\r\n        <Grid.Col span={6}>\r\n          <Paper p=\"xl\" radius=\"md\">\r\n            <Title order={3} mb=\"lg\">Care Plan</Title>\r\n            {/* Add care plan content */}\r\n          </Paper>\r\n        </Grid.Col>\r\n      </Grid>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default PatientDetails; ","import React from 'react';\r\nimport { \r\n  Header as MantineHeader, \r\n  Group, \r\n  ActionIcon, \r\n  Menu, \r\n  Avatar, \r\n  Text,\r\n  Divider,\r\n  UnstyledButton,\r\n  Box\r\n} from '@mantine/core';\r\nimport { \r\n  IconBell, \r\n  IconSettings, \r\n  IconLogout,\r\n  IconUser\r\n} from '@tabler/icons-react';\r\nimport { useUser } from '../../contexts/UserContext';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { auth } from '../../config/firebase';\r\nimport { NotificationCenter } from '../notifications/NotificationCenter';\r\n\r\nexport const Header = () => {\r\n  const { user } = useUser();\r\n  const navigate = useNavigate();\r\n\r\n  const handleLogout = async () => {\r\n    try {\r\n      await auth.signOut();\r\n      navigate('/login');\r\n    } catch (error) {\r\n      console.error('Error logging out:', error);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <MantineHeader height={60}>\r\n      <Box className=\"animated-header\">\r\n        <Group position=\"apart\" px=\"md\" h=\"100%\" w=\"100%\">\r\n          <Group spacing=\"xs\" align=\"left\" ml=\"0\">\r\n            <img \r\n              src=\"/arcadia-logo.svg\" \r\n              alt=\"Arcadia.io\" \r\n              style={{ height: 24 }}\r\n              className=\"arcadia-logo\"\r\n            />\r\n          </Group>\r\n          \r\n          <Text size=\"xl\" weight={700} className=\"header-content\" color=\"white\">\r\n            Galaxy Health\r\n          </Text>\r\n\r\n          <Group spacing=\"md\">\r\n            <NotificationCenter />\r\n            \r\n            <Menu\r\n              width={200}\r\n              position=\"bottom-end\"\r\n              shadow=\"md\"\r\n              withArrow\r\n            >\r\n              <Menu.Target>\r\n                <UnstyledButton>\r\n                  <Avatar \r\n                    size=\"md\" \r\n                    radius=\"xl\"\r\n                    src={user?.photoURL}\r\n                    sx={(theme) => ({\r\n                      border: `2px solid ${theme.white}`,\r\n                      cursor: 'pointer'\r\n                    })}\r\n                  >\r\n                    {user?.displayName?.charAt(0)}\r\n                  </Avatar>\r\n                </UnstyledButton>\r\n              </Menu.Target>\r\n\r\n              <Menu.Dropdown>\r\n                <Menu.Label>\r\n                  <Text size=\"sm\" weight={500}>{user?.displayName}</Text>\r\n                  <Text size=\"xs\" color=\"dimmed\">{user?.email}</Text>\r\n                </Menu.Label>\r\n                \r\n                <Divider my=\"xs\" />\r\n                \r\n                <Menu.Item \r\n                  icon={<IconUser size={14} />}\r\n                  onClick={() => navigate('/settings/profile')}\r\n                >\r\n                  Profile\r\n                </Menu.Item>\r\n                \r\n                <Menu.Item \r\n                  icon={<IconSettings size={14} />}\r\n                  onClick={() => navigate('/settings')}\r\n                >\r\n                  Settings\r\n                </Menu.Item>\r\n                \r\n                <Divider my=\"xs\" />\r\n                \r\n                <Menu.Item \r\n                  color=\"red\" \r\n                  icon={<IconLogout size={14} />}\r\n                  onClick={handleLogout}\r\n                >\r\n                  Logout\r\n                </Menu.Item>\r\n              </Menu.Dropdown>\r\n            </Menu>\r\n          </Group>\r\n        </Group>\r\n      </Box>\r\n    </MantineHeader>\r\n  );\r\n};\r\n\r\nexport default Header; ","import React, { useEffect } from 'react';\nimport { MantineProvider, AppShell, Header, Text, Box, Group } from '@mantine/core';\nimport { BrowserRouter, Routes, Route, Navigate, useLocation, createBrowserRouter, RouterProvider } from 'react-router-dom';\nimport { UserProvider, useUser } from './contexts/UserContext';\nimport { theme } from './styles/theme';\nimport Navigation from './components/Navigation';\nimport LoginPage from './components/auth/LoginPage';\nimport Dashboard from './pages/Dashboard';\nimport { LoadingSpinner } from './components/common';\nimport PatientList from './components/patients/PatientList';\nimport Settings from './pages/settings/Settings';\nimport Performance from './pages/Performance';\nimport EHRAlerts from './pages/EHRAlerts';\nimport AIRecommendations from './pages/AIRecommendations';\nimport PatientContextHistory from './pages/PatientContextHistory';\nimport './styles/Header.css';\nimport { ThemeProvider } from './contexts/ThemeContext';\nimport { Notifications } from '@mantine/notifications';\nimport { PatientProvider } from './contexts/PatientContext';\nimport { NotificationCenter } from './components/notifications/NotificationCenter';\nimport { createStyles } from '@mantine/core';\nimport { AnimatePresence } from 'framer-motion';\nimport PageTransition from './components/transitions/PageTransition';\nimport useNotificationStore from './stores/notificationStore';\nimport PatientDetails from './components/patients/PatientDetails';\nimport 'ag-grid-community/styles/ag-grid.css';\nimport 'ag-grid-community/styles/ag-theme-material.css';\nimport { Header as CustomHeader } from './components/layout/Header';\nimport './styles/global.css';\n\nconst useStyles = createStyles((theme) => ({\n  appShell: {\n    main: {\n      [theme.fn.smallerThan('sm')]: {\n        paddingBottom: '60px', // Space for mobile navigation\n      },\n    },\n  },\n}));\n\nconst PrivateRoute = ({ children }) => {\n  const { user, loading } = useUser();\n  \n  if (loading) {\n    return <LoadingSpinner />;\n  }\n  \n  if (!user) {\n    return <Navigate to=\"/login\" />;\n  }\n  \n  return children;\n};\n\nconst AppLayout = () => {\n  const { classes } = useStyles();\n  const { user } = useUser();\n  const location = useLocation();\n  const initializeNotifications = useNotificationStore(state => state.initialize);\n\n  useEffect(() => {\n    // Initialize notifications when app loads\n    const unsubscribe = initializeNotifications();\n    return () => unsubscribe?.();\n  }, [initializeNotifications]);\n\n  if (!user) {\n    return <LoginPage />;\n  }\n\n  return (\n    <AppShell\n      padding=\"md\"\n      navbar={<Navigation />}\n      header={<CustomHeader />}\n      classNames={{\n        main: classes.appShell.main,\n      }}\n    >\n      <AnimatePresence mode=\"wait\">\n        <Routes location={location} key={location.pathname}>\n          <Route path=\"/dashboard\" element={\n            <PrivateRoute>\n              <PageTransition>\n                <Dashboard />\n              </PageTransition>\n            </PrivateRoute>\n          } />\n          <Route path=\"/patients\" element={\n            <PrivateRoute>\n              <PageTransition>\n                <PatientList />\n              </PageTransition>\n            </PrivateRoute>\n          } />\n          <Route path=\"/patients/:id\" element={\n            <PrivateRoute>\n              <PageTransition>\n                <PatientDetails />\n              </PageTransition>\n            </PrivateRoute>\n          } />\n          <Route path=\"/settings\" element={\n            <PrivateRoute>\n              <Settings />\n            </PrivateRoute>\n          } />\n          <Route path=\"/performance\" element={\n            <PrivateRoute>\n              <Performance />\n            </PrivateRoute>\n          } />\n          <Route path=\"/ehr-alerts\" element={\n            <PrivateRoute>\n              <EHRAlerts />\n            </PrivateRoute>\n          } />\n          <Route path=\"/ai-recommendations\" element={\n            <PrivateRoute>\n              <AIRecommendations />\n            </PrivateRoute>\n          } />\n          <Route path=\"/patient-context\" element={\n            <PrivateRoute>\n              <PageTransition>\n                <PatientContextHistory />\n              </PageTransition>\n            </PrivateRoute>\n          } />\n          <Route path=\"/\" element={<Navigate to=\"/dashboard\" replace />} />\n        </Routes>\n      </AnimatePresence>\n    </AppShell>\n  );\n};\n\nconst router = createBrowserRouter([\n  {\n    path: \"/*\",\n    element: (\n      <UserProvider>\n        <PatientProvider>\n          <AppLayout />\n        </PatientProvider>\n      </UserProvider>\n    ),\n    children: [\n      {\n        path: \"dashboard\",\n        element: <PrivateRoute><PageTransition><Dashboard /></PageTransition></PrivateRoute>\n      },\n      {\n        path: \"patients\",\n        element: <PrivateRoute><PageTransition><PatientList /></PageTransition></PrivateRoute>\n      },\n      {\n        path: \"patients/:id\",\n        element: <PrivateRoute><PageTransition><PatientDetails /></PageTransition></PrivateRoute>\n      },\n      {\n        path: \"settings\",\n        element: <PrivateRoute><Settings /></PrivateRoute>\n      },\n      {\n        path: \"performance\",\n        element: <PrivateRoute><Performance /></PrivateRoute>\n      },\n      {\n        path: \"ehr-alerts\",\n        element: <PrivateRoute><EHRAlerts /></PrivateRoute>\n      },\n      {\n        path: \"ai-recommendations\",\n        element: <PrivateRoute><AIRecommendations /></PrivateRoute>\n      },\n      {\n        path: \"patient-context\",\n        element: <PrivateRoute><PageTransition><PatientContextHistory /></PageTransition></PrivateRoute>\n      },\n      {\n        path: \"\",\n        element: <Navigate to=\"/dashboard\" replace />\n      }\n    ]\n  }\n], {\n  future: {\n    v7_startTransition: true,\n    v7_relativeSplatPath: true\n  }\n});\n\nconst App = () => {\n  return (\n    <ThemeProvider>\n      <MantineProvider\n        withGlobalStyles\n        withNormalizeCSS\n        theme={{\n          colorScheme: 'light',\n          primaryColor: 'blue',\n          // ... other theme options\n        }}\n      >\n        <Notifications position=\"top-right\" />\n        <RouterProvider router={router} />\n      </MantineProvider>\n    </ThemeProvider>\n  );\n};\n\nexport default App; ","import React from 'react';\r\nimport ReactDOM from 'react-dom/client';\r\nimport App from './App';\r\nimport './index.css';\r\n\r\nconsole.log('Starting app initialization...');\r\n\r\nReactDOM.createRoot(document.getElementById('root')).render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>\r\n); "],"names":["firebaseConfig","app","initializeApp","db","getFirestore","auth","getAuth","GoogleAuthProvider","LoadingSpinner","message","jsx","Center","jsxs","Stack","Loader","Text","ErrorDisplay","error","Container","Alert","IconAlertCircle","logError","context","ErrorBoundary","React","props","info","_a","Button","UserContext","createContext","useUser","useContext","UserProvider","children","user","setUser","useState","loading","setLoading","setError","createNewUser","firebaseUser","registrationDate","isAdmin","newUserData","userRef","doc","setDoc","settingsRef","settingsData","prefsRef","useEffect","unsubscribe","onAuthStateChanged","docSnap","getDoc","userData","value","signOut","updateDoc","useStyles","createStyles","theme","Navigation","classes","location","useLocation","navigationItems","IconHome","IconUsers","IconChartBar","IconDatabase","IconHistory","settingsItem","IconSettings","isActiveRoute","path","navItemVariants","NavItem","Icon","label","to","index","id","motion","Box","Link","Group","Navbar","AnimatePresence","item","Divider","LoginForm","onGoogleSignIn","email","setEmail","password","setPassword","handleEmailLogin","e","signInWithEmailAndPassword","err","IconBrandGoogle","TextInput","googleProvider","isDev","LoginPage","navigate","useNavigate","handleGoogleSignIn","result","signInWithPopup","Paper","Title","useNotificationStore","create","set","get","notificationsRef","collection","q","query","where","orderBy","limit","onSnapshot","snapshot","notifications","data","_b","notification","addDoc","serverTimestamp","notificationId","batch","writeBatch","docRef","n","PatientContext","PatientProvider","activePatient","setActivePatient","addNotification","state","patients","setPatients","patientData","handleMessage","event","patient","patientName","_c","showNotification","IconUserCheck","fetchPatients","patientsRef","querySnapshot","getDocs","patientsData","usePatient","PatientAlert","Badge","IconArrowRight","SAVED_VIEWS","getFilterModelForView","viewId","NarrativeSummary","summary","IconStethoscope","IconChecks","Avatar","IconRobot","point","ThemeIcon","step","HighlightCard","title","count","description","color","onClick","Dashboard","firstName","navigateToPatientView","highlights","IconAlertTriangle","IconCalendarStats","IconUserPlus","Grid","highlight","saveGridState","key","loadGridState","savedState","ModuleRegistry","ClientSideRowModelModule","SetFilterModule","MenuModule","ColumnsToolPanelModule","SideBarModule","gridStyles","PatientList","patientsLoading","gridRef","useRef","rowData","setRowData","searchParams","useSearchParams","initialFilterApplied","formattedData","calculateAge","columnDefs","RiskLevelRenderer","params","defaultColDef","useMemo","onGridReady","useCallback","filterModel","saveCurrentView","columnState","applyPresetFilter","preset","onRowClicked","Menu","IconFilter","IconColumns","AgGridReact","dateOfBirth","today","birthDate","age","m","getStyle","Settings","colorScheme","toggleColorScheme","useMantineColorScheme","settings","setSettings","displayName","setDisplayName","saving","setSaving","success","setSuccess","loadUserSettings","settingsSnap","savedSettings","prev","handleSaveProfile","handleSaveSettings","Tabs","IconUser","IconBell","IconCheck","Switch","IconSun","IconMoonStars","Select","contracts","MetricCard","trend","getTrendIcon","IconTrendingUp","IconTrendingDown","IconMinus","ContractScoreCard","contract","score","metrics","RingProgress","metric","Performance","selectedContract","setSelectedContract","contractData","overallMetrics","IconReportMedical","IconCoin","c","ehrSystems","HCCOpportunity","hcc","icdCode","rafValue","evidence","isConfirmed","setIsConfirmed","isDenied","setIsDenied","showDetails","setShowDetails","Tooltip","ActionIcon","IconInfoCircle","IconX","List","Collapse","code","hccGaps","qualityGaps","Card","gap","EHRAlerts","selectedEHR","setSelectedEHR","activeTab","setActiveTab","activePatients","ehr","cohortService","metricsRef","cohortId","patientId","gaps","pathway","pathwayId","riskLevel","pathwayRef","pathwayDoc","callback","CohortCard","cohort","Progress","rec","AIRecommendations","authLoading","cohortMetrics","setCohortMetrics","IconBrain","PatientContextHistory","formatDate","dateString","getSourceIcon","source","IconBrowser","IconDeviceDesktop","getSourceBadge","appName","Table","IconDotsVertical","IconExternalLink","IconTrash","ThemeProvider","setColorScheme","nextColorScheme","ColorSchemeProvider","MantineProvider","NotificationCenter","markAsRead","clearNotifications","getUnreadCount","unreadCount","handleNotificationClick","Popover","pageVariants","pageTransition","PageTransition","RiskScoreCard","riskFactors","factor","QualityMetrics","detailed","CareGaps","uploadModalOpen","setUploadModalOpen","selectedGap","setSelectedGap","uploadProgress","setUploadProgress","note","setNote","careGaps","handleFileUpload","files","progress","interval","getPriorityColor","priority","Fragment","file","IconPaperclip","IconDownload","IconUpload","Modal","Dropzone","Textarea","PathwayNode","getNodeStyle","type","Handle","Position","nodeTypes","CarePathway","nodes","edges","conditions","condition","baseY","action","actionIndex","actionY","MarkerType","outcome","outcomeNode","ReactFlow","Background","Controls","PatientDetails","useParams","p","Header","handleLogout","MantineHeader","UnstyledButton","IconLogout","PrivateRoute","Navigate","AppLayout","initializeNotifications","AppShell","CustomHeader","Routes","Route","router","createBrowserRouter","App","Notifications","RouterProvider","ReactDOM"],"mappings":"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"}