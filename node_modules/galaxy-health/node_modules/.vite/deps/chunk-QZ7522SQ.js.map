{
  "version": 3,
  "sources": ["../../../../../node_modules/@ag-grid-enterprise/column-tool-panel/dist/esm/es6/columnToolPanel/primaryColsHeaderPanel.mjs", "../../../../../node_modules/@ag-grid-enterprise/column-tool-panel/dist/esm/es6/columnToolPanel/columnModelItem.mjs", "../../../../../node_modules/@ag-grid-enterprise/column-tool-panel/dist/esm/es6/columnToolPanel/toolPanelContextMenu.mjs", "../../../../../node_modules/@ag-grid-enterprise/column-tool-panel/dist/esm/es6/columnToolPanel/toolPanelColumnGroupComp.mjs", "../../../../../node_modules/@ag-grid-enterprise/column-tool-panel/dist/esm/es6/columnToolPanel/primaryColsListPanelItemDragFeature.mjs", "../../../../../node_modules/@ag-grid-enterprise/column-tool-panel/dist/esm/es6/columnToolPanel/toolPanelColumnComp.mjs", "../../../../../node_modules/@ag-grid-enterprise/column-tool-panel/dist/esm/es6/columnToolPanel/primaryColsListPanel.mjs", "../../../../../node_modules/@ag-grid-enterprise/column-tool-panel/dist/esm/es6/columnToolPanel/pivotModePanel.mjs", "../../../../../node_modules/@ag-grid-enterprise/row-grouping/dist/esm/es6/rowGrouping/aggregationStage.mjs", "../../../../../node_modules/@ag-grid-enterprise/row-grouping/dist/esm/es6/rowGrouping/batchRemover.mjs", "../../../../../node_modules/@ag-grid-enterprise/row-grouping/dist/esm/es6/rowGrouping/groupStage.mjs", "../../../../../node_modules/@ag-grid-enterprise/row-grouping/dist/esm/es6/rowGrouping/pivotColDefService.mjs", "../../../../../node_modules/@ag-grid-enterprise/row-grouping/dist/esm/es6/rowGrouping/pivotStage.mjs", "../../../../../node_modules/@ag-grid-enterprise/row-grouping/dist/esm/es6/rowGrouping/aggFuncService.mjs", "../../../../../node_modules/@ag-grid-enterprise/row-grouping/dist/esm/es6/rowGrouping/columnDropZones/dropZoneColumnComp.mjs", "../../../../../node_modules/@ag-grid-enterprise/row-grouping/dist/esm/es6/rowGrouping/columnDropZones/baseDropZonePanel.mjs", "../../../../../node_modules/@ag-grid-enterprise/row-grouping/dist/esm/es6/rowGrouping/columnDropZones/rowGroupDropZonePanel.mjs", "../../../../../node_modules/@ag-grid-enterprise/row-grouping/dist/esm/es6/rowGrouping/columnDropZones/pivotDropZonePanel.mjs", "../../../../../node_modules/@ag-grid-enterprise/row-grouping/dist/esm/es6/rowGrouping/columnDropZones/gridHeaderDropZones.mjs", "../../../../../node_modules/@ag-grid-enterprise/row-grouping/dist/esm/es6/rowGrouping/filterAggregatesStage.mjs", "../../../../../node_modules/@ag-grid-enterprise/row-grouping/dist/esm/es6/version.mjs", "../../../../../node_modules/@ag-grid-enterprise/row-grouping/dist/esm/es6/rowGrouping/groupFilter/groupFilter.mjs", "../../../../../node_modules/@ag-grid-enterprise/row-grouping/dist/esm/es6/rowGrouping/groupFilter/groupFloatingFilter.mjs", "../../../../../node_modules/@ag-grid-enterprise/row-grouping/dist/esm/es6/rowGroupingModule.mjs", "../../../../../node_modules/@ag-grid-enterprise/row-grouping/dist/esm/es6/rowGrouping/columnDropZones/valueDropZonePanel.mjs", "../../../../../node_modules/@ag-grid-enterprise/column-tool-panel/dist/esm/es6/columnToolPanel/primaryColsPanel.mjs", "../../../../../node_modules/@ag-grid-enterprise/column-tool-panel/dist/esm/es6/columnToolPanel/columnToolPanel.mjs", "../../../../../node_modules/@ag-grid-enterprise/column-tool-panel/dist/esm/es6/columnToolPanel/modelItemUtils.mjs", "../../../../../node_modules/@ag-grid-enterprise/column-tool-panel/dist/esm/es6/version.mjs", "../../../../../node_modules/@ag-grid-enterprise/column-tool-panel/dist/esm/es6/columnsToolPanelModule.mjs"],
  "sourcesContent": ["var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { _, Autowired, Events, RefSelector, KeyCode, PostConstruct, Component } from \"@ag-grid-community/core\";\nexport var ExpandState;\n(function (ExpandState) {\n    ExpandState[ExpandState[\"EXPANDED\"] = 0] = \"EXPANDED\";\n    ExpandState[ExpandState[\"COLLAPSED\"] = 1] = \"COLLAPSED\";\n    ExpandState[ExpandState[\"INDETERMINATE\"] = 2] = \"INDETERMINATE\";\n})(ExpandState || (ExpandState = {}));\nexport class PrimaryColsHeaderPanel extends Component {\n    constructor() {\n        super(PrimaryColsHeaderPanel.TEMPLATE);\n    }\n    postConstruct() {\n        this.createExpandIcons();\n        this.addManagedListener(this.eExpand, 'click', this.onExpandClicked.bind(this));\n        this.addManagedListener(this.eExpand, 'keydown', (e) => {\n            if (e.key === KeyCode.SPACE) {\n                e.preventDefault();\n                this.onExpandClicked();\n            }\n        });\n        this.addManagedListener(this.eSelect.getInputElement(), 'click', this.onSelectClicked.bind(this));\n        this.eFilterTextField.onValueChange(() => this.onFilterTextChanged());\n        this.addManagedListener(this.eFilterTextField.getInputElement(), 'keydown', this.onMiniFilterKeyDown.bind(this));\n        this.addManagedListener(this.eventService, Events.EVENT_NEW_COLUMNS_LOADED, this.showOrHideOptions.bind(this));\n        const translate = this.localeService.getLocaleTextFunc();\n        this.eSelect.setInputAriaLabel(translate('ariaColumnSelectAll', 'Toggle Select All Columns'));\n        this.eFilterTextField.setInputAriaLabel(translate('ariaFilterColumnsInput', 'Filter Columns Input'));\n        this.activateTabIndex([this.eExpand]);\n    }\n    init(params) {\n        this.params = params;\n        if (this.columnModel.isReady()) {\n            this.showOrHideOptions();\n        }\n    }\n    createExpandIcons() {\n        this.eExpand.appendChild((this.eExpandChecked = _.createIconNoSpan('columnSelectOpen', this.gridOptionsService)));\n        this.eExpand.appendChild((this.eExpandUnchecked = _.createIconNoSpan('columnSelectClosed', this.gridOptionsService)));\n        this.eExpand.appendChild((this.eExpandIndeterminate = _.createIconNoSpan('columnSelectIndeterminate', this.gridOptionsService)));\n        this.setExpandState(ExpandState.EXPANDED);\n    }\n    // we only show expand / collapse if we are showing columns\n    showOrHideOptions() {\n        const showFilter = !this.params.suppressColumnFilter;\n        const showSelect = !this.params.suppressColumnSelectAll;\n        const showExpand = !this.params.suppressColumnExpandAll;\n        const groupsPresent = this.columnModel.isPrimaryColumnGroupsPresent();\n        const translate = this.localeService.getLocaleTextFunc();\n        this.eFilterTextField.setInputPlaceholder(translate('searchOoo', 'Search...'));\n        _.setDisplayed(this.eFilterTextField.getGui(), showFilter);\n        _.setDisplayed(this.eSelect.getGui(), showSelect);\n        _.setDisplayed(this.eExpand, showExpand && groupsPresent);\n    }\n    onFilterTextChanged() {\n        if (!this.onFilterTextChangedDebounced) {\n            this.onFilterTextChangedDebounced = _.debounce(() => {\n                const filterText = this.eFilterTextField.getValue();\n                this.dispatchEvent({ type: \"filterChanged\", filterText: filterText });\n            }, PrimaryColsHeaderPanel.DEBOUNCE_DELAY);\n        }\n        this.onFilterTextChangedDebounced();\n    }\n    onMiniFilterKeyDown(e) {\n        if (e.key === KeyCode.ENTER) {\n            // we need to add a delay that corresponds to the filter text debounce delay to ensure\n            // the text filtering has happened, otherwise all columns will be deselected\n            setTimeout(() => this.onSelectClicked(), PrimaryColsHeaderPanel.DEBOUNCE_DELAY);\n        }\n    }\n    onSelectClicked() {\n        this.dispatchEvent({ type: this.selectState ? 'unselectAll' : 'selectAll' });\n    }\n    onExpandClicked() {\n        this.dispatchEvent({ type: this.expandState === ExpandState.EXPANDED ? 'collapseAll' : 'expandAll' });\n    }\n    setExpandState(state) {\n        this.expandState = state;\n        _.setDisplayed(this.eExpandChecked, this.expandState === ExpandState.EXPANDED);\n        _.setDisplayed(this.eExpandUnchecked, this.expandState === ExpandState.COLLAPSED);\n        _.setDisplayed(this.eExpandIndeterminate, this.expandState === ExpandState.INDETERMINATE);\n    }\n    setSelectionState(state) {\n        this.selectState = state;\n        this.eSelect.setValue(this.selectState);\n    }\n}\nPrimaryColsHeaderPanel.DEBOUNCE_DELAY = 300;\nPrimaryColsHeaderPanel.TEMPLATE = `<div class=\"ag-column-select-header\" role=\"presentation\">\n            <div ref=\"eExpand\" class=\"ag-column-select-header-icon\"></div>\n            <ag-checkbox ref=\"eSelect\" class=\"ag-column-select-header-checkbox\"></ag-checkbox>\n            <ag-input-text-field class=\"ag-column-select-header-filter-wrapper\" ref=\"eFilterTextField\"></ag-input-text-field>\n        </div>`;\n__decorate([\n    Autowired('columnModel')\n], PrimaryColsHeaderPanel.prototype, \"columnModel\", void 0);\n__decorate([\n    RefSelector('eExpand')\n], PrimaryColsHeaderPanel.prototype, \"eExpand\", void 0);\n__decorate([\n    RefSelector('eSelect')\n], PrimaryColsHeaderPanel.prototype, \"eSelect\", void 0);\n__decorate([\n    RefSelector('eFilterTextField')\n], PrimaryColsHeaderPanel.prototype, \"eFilterTextField\", void 0);\n__decorate([\n    PostConstruct\n], PrimaryColsHeaderPanel.prototype, \"postConstruct\", null);\n", "import { EventService } from \"@ag-grid-community/core\";\nexport class ColumnModelItem {\n    constructor(displayName, columnOrGroup, dept, group = false, expanded) {\n        this.eventService = new EventService();\n        this.displayName = displayName;\n        this.dept = dept;\n        this.group = group;\n        if (group) {\n            this.columnGroup = columnOrGroup;\n            this.expanded = expanded;\n            this.children = [];\n        }\n        else {\n            this.column = columnOrGroup;\n        }\n    }\n    isGroup() { return this.group; }\n    getDisplayName() { return this.displayName; }\n    getColumnGroup() { return this.columnGroup; }\n    getColumn() { return this.column; }\n    getDept() { return this.dept; }\n    isExpanded() { return !!this.expanded; }\n    getChildren() { return this.children; }\n    isPassesFilter() { return this.passesFilter; }\n    setExpanded(expanded) {\n        if (expanded === this.expanded) {\n            return;\n        }\n        this.expanded = expanded;\n        this.eventService.dispatchEvent({ type: ColumnModelItem.EVENT_EXPANDED_CHANGED });\n    }\n    setPassesFilter(passesFilter) {\n        this.passesFilter = passesFilter;\n    }\n    addEventListener(eventType, listener) {\n        this.eventService.addEventListener(eventType, listener);\n    }\n    removeEventListener(eventType, listener) {\n        this.eventService.removeEventListener(eventType, listener);\n    }\n}\nColumnModelItem.EVENT_EXPANDED_CHANGED = 'expandedChanged';\n", "var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { AgMenuItemComponent, AgMenuList, Autowired, Column, Component, PostConstruct, ProvidedColumnGroup, _ } from \"@ag-grid-community/core\";\nexport class ToolPanelContextMenu extends Component {\n    constructor(column, mouseEvent, parentEl) {\n        super(/* html */ `<div class=\"ag-menu\"></div>`);\n        this.column = column;\n        this.mouseEvent = mouseEvent;\n        this.parentEl = parentEl;\n        this.displayName = null;\n    }\n    postConstruct() {\n        this.initializeProperties(this.column);\n        this.buildMenuItemMap();\n        if (this.column instanceof Column) {\n            this.displayName = this.columnModel.getDisplayNameForColumn(this.column, 'columnToolPanel');\n        }\n        else {\n            this.displayName = this.columnModel.getDisplayNameForProvidedColumnGroup(null, this.column, 'columnToolPanel');\n        }\n        if (this.isActive()) {\n            this.mouseEvent.preventDefault();\n            this.displayContextMenu();\n        }\n    }\n    initializeProperties(column) {\n        if (column instanceof ProvidedColumnGroup) {\n            this.columns = column.getLeafColumns();\n        }\n        else {\n            this.columns = [column];\n        }\n        this.allowGrouping = this.columns.some(col => col.isPrimary() && col.isAllowRowGroup());\n        this.allowValues = this.columns.some(col => col.isPrimary() && col.isAllowValue());\n        this.allowPivoting = this.columnModel.isPivotMode() && this.columns.some(col => col.isPrimary() && col.isAllowPivot());\n    }\n    buildMenuItemMap() {\n        const localeTextFunc = this.localeService.getLocaleTextFunc();\n        this.menuItemMap = new Map();\n        this.menuItemMap.set('rowGroup', {\n            allowedFunction: (col) => col.isPrimary() && col.isAllowRowGroup(),\n            activeFunction: (col) => col.isRowGroupActive(),\n            activateLabel: () => `${localeTextFunc('groupBy', 'Group by')} ${this.displayName}`,\n            deactivateLabel: () => `${localeTextFunc('ungroupBy', 'Un-Group by')} ${this.displayName}`,\n            activateFunction: () => {\n                const groupedColumns = this.columnModel.getRowGroupColumns();\n                this.columnModel.setRowGroupColumns(this.addColumnsToList(groupedColumns), \"toolPanelUi\");\n            },\n            deActivateFunction: () => {\n                const groupedColumns = this.columnModel.getRowGroupColumns();\n                this.columnModel.setRowGroupColumns(this.removeColumnsFromList(groupedColumns), \"toolPanelUi\");\n            },\n            addIcon: 'menuAddRowGroup',\n            removeIcon: 'menuRemoveRowGroup'\n        });\n        this.menuItemMap.set('value', {\n            allowedFunction: (col) => col.isPrimary() && col.isAllowValue(),\n            activeFunction: (col) => col.isValueActive(),\n            activateLabel: () => localeTextFunc('addToValues', `Add ${this.displayName} to values`, [this.displayName]),\n            deactivateLabel: () => localeTextFunc('removeFromValues', `Remove ${this.displayName} from values`, [this.displayName]),\n            activateFunction: () => {\n                const valueColumns = this.columnModel.getValueColumns();\n                this.columnModel.setValueColumns(this.addColumnsToList(valueColumns), \"toolPanelUi\");\n            },\n            deActivateFunction: () => {\n                const valueColumns = this.columnModel.getValueColumns();\n                this.columnModel.setValueColumns(this.removeColumnsFromList(valueColumns), \"toolPanelUi\");\n            },\n            addIcon: 'valuePanel',\n            removeIcon: 'valuePanel'\n        });\n        this.menuItemMap.set('pivot', {\n            allowedFunction: (col) => this.columnModel.isPivotMode() && col.isPrimary() && col.isAllowPivot(),\n            activeFunction: (col) => col.isPivotActive(),\n            activateLabel: () => localeTextFunc('addToLabels', `Add ${this.displayName} to labels`, [this.displayName]),\n            deactivateLabel: () => localeTextFunc('removeFromLabels', `Remove ${this.displayName} from labels`, [this.displayName]),\n            activateFunction: () => {\n                const pivotColumns = this.columnModel.getPivotColumns();\n                this.columnModel.setPivotColumns(this.addColumnsToList(pivotColumns), \"toolPanelUi\");\n            },\n            deActivateFunction: () => {\n                const pivotColumns = this.columnModel.getPivotColumns();\n                this.columnModel.setPivotColumns(this.removeColumnsFromList(pivotColumns), \"toolPanelUi\");\n            },\n            addIcon: 'pivotPanel',\n            removeIcon: 'pivotPanel'\n        });\n    }\n    addColumnsToList(columnList) {\n        return [...columnList].concat(this.columns.filter(col => columnList.indexOf(col) === -1));\n    }\n    removeColumnsFromList(columnList) {\n        return columnList.filter(col => this.columns.indexOf(col) === -1);\n    }\n    displayContextMenu() {\n        const eGui = this.getGui();\n        const menuList = this.createBean(new AgMenuList());\n        const menuItemsMapped = this.getMappedMenuItems();\n        const localeTextFunc = this.localeService.getLocaleTextFunc();\n        let hideFunc = () => { };\n        eGui.appendChild(menuList.getGui());\n        menuList.addMenuItems(menuItemsMapped);\n        menuList.addManagedListener(menuList, AgMenuItemComponent.EVENT_MENU_ITEM_SELECTED, () => {\n            this.parentEl.focus();\n            hideFunc();\n        });\n        const addPopupRes = this.popupService.addPopup({\n            modal: true,\n            eChild: eGui,\n            closeOnEsc: true,\n            afterGuiAttached: () => this.focusService.focusInto(menuList.getGui()),\n            ariaLabel: localeTextFunc('ariaLabelContextMenu', 'Context Menu'),\n            closedCallback: (e) => {\n                if (e instanceof KeyboardEvent) {\n                    this.parentEl.focus();\n                }\n                this.destroyBean(menuList);\n            }\n        });\n        if (addPopupRes) {\n            hideFunc = addPopupRes.hideFunc;\n        }\n        this.popupService.positionPopupUnderMouseEvent({\n            type: 'columnContextMenu',\n            mouseEvent: this.mouseEvent,\n            ePopup: eGui\n        });\n    }\n    isActive() {\n        return this.allowGrouping || this.allowValues || this.allowPivoting;\n    }\n    getMappedMenuItems() {\n        const ret = [];\n        for (const val of this.menuItemMap.values()) {\n            const isInactive = this.columns.some(col => val.allowedFunction(col) && !val.activeFunction(col));\n            const isActive = this.columns.some(col => val.allowedFunction(col) && val.activeFunction(col));\n            if (isInactive) {\n                ret.push({\n                    name: val.activateLabel(this.displayName),\n                    icon: _.createIconNoSpan(val.addIcon, this.gridOptionsService, null),\n                    action: () => val.activateFunction()\n                });\n            }\n            if (isActive) {\n                ret.push({\n                    name: val.deactivateLabel(this.displayName),\n                    icon: _.createIconNoSpan(val.removeIcon, this.gridOptionsService, null),\n                    action: () => val.deActivateFunction()\n                });\n            }\n        }\n        return ret;\n    }\n}\n__decorate([\n    Autowired('columnModel')\n], ToolPanelContextMenu.prototype, \"columnModel\", void 0);\n__decorate([\n    Autowired('popupService')\n], ToolPanelContextMenu.prototype, \"popupService\", void 0);\n__decorate([\n    Autowired('focusService')\n], ToolPanelContextMenu.prototype, \"focusService\", void 0);\n__decorate([\n    PostConstruct\n], ToolPanelContextMenu.prototype, \"postConstruct\", null);\n", "var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { _, Autowired, Column, Component, CssClassApplier, DragAndDropService, DragSourceType, Events, KeyCode, PostConstruct, RefSelector, TouchListener } from \"@ag-grid-community/core\";\nimport { ColumnModelItem } from \"./columnModelItem.mjs\";\nimport { ToolPanelContextMenu } from \"./toolPanelContextMenu.mjs\";\nexport class ToolPanelColumnGroupComp extends Component {\n    constructor(modelItem, allowDragging, eventType, focusWrapper) {\n        super();\n        this.modelItem = modelItem;\n        this.allowDragging = allowDragging;\n        this.eventType = eventType;\n        this.focusWrapper = focusWrapper;\n        this.processingColumnStateChange = false;\n        this.modelItem = modelItem;\n        this.columnGroup = modelItem.getColumnGroup();\n        this.columnDept = modelItem.getDept();\n        this.displayName = modelItem.getDisplayName();\n        this.allowDragging = allowDragging;\n    }\n    init() {\n        this.setTemplate(ToolPanelColumnGroupComp.TEMPLATE);\n        this.eDragHandle = _.createIconNoSpan('columnDrag', this.gridOptionsService);\n        this.eDragHandle.classList.add('ag-drag-handle', 'ag-column-select-column-group-drag-handle');\n        const checkboxGui = this.cbSelect.getGui();\n        const checkboxInput = this.cbSelect.getInputElement();\n        checkboxGui.insertAdjacentElement('afterend', this.eDragHandle);\n        checkboxInput.setAttribute('tabindex', '-1');\n        this.eLabel.innerHTML = this.displayName ? this.displayName : '';\n        this.setupExpandContract();\n        this.addCssClass('ag-column-select-indent-' + this.columnDept);\n        this.addManagedListener(this.eventService, Events.EVENT_COLUMN_PIVOT_MODE_CHANGED, this.onColumnStateChanged.bind(this));\n        this.addManagedListener(this.eLabel, 'click', this.onLabelClicked.bind(this));\n        this.addManagedListener(this.cbSelect, Events.EVENT_FIELD_VALUE_CHANGED, this.onCheckboxChanged.bind(this));\n        this.addManagedListener(this.modelItem, ColumnModelItem.EVENT_EXPANDED_CHANGED, this.onExpandChanged.bind(this));\n        this.addManagedListener(this.focusWrapper, 'keydown', this.handleKeyDown.bind(this));\n        this.addManagedListener(this.focusWrapper, 'contextmenu', this.onContextMenu.bind(this));\n        this.setOpenClosedIcons();\n        this.setupDragging();\n        this.onColumnStateChanged();\n        this.addVisibilityListenersToAllChildren();\n        this.refreshAriaExpanded();\n        this.refreshAriaLabel();\n        this.setupTooltip();\n        const classes = CssClassApplier.getToolPanelClassesFromColDef(this.columnGroup.getColGroupDef(), this.gridOptionsService, null, this.columnGroup);\n        classes.forEach(c => this.addOrRemoveCssClass(c, true));\n    }\n    getColumns() {\n        return this.columnGroup.getLeafColumns();\n    }\n    setupTooltip() {\n        const colGroupDef = this.columnGroup.getColGroupDef();\n        if (!colGroupDef) {\n            return;\n        }\n        const refresh = () => {\n            const newTooltipText = colGroupDef.headerTooltip;\n            this.setTooltip(newTooltipText);\n        };\n        refresh();\n        this.addManagedListener(this.eventService, Events.EVENT_NEW_COLUMNS_LOADED, refresh);\n    }\n    getTooltipParams() {\n        const res = super.getTooltipParams();\n        res.location = 'columnToolPanelColumnGroup';\n        return res;\n    }\n    handleKeyDown(e) {\n        switch (e.key) {\n            case KeyCode.LEFT:\n                e.preventDefault();\n                this.modelItem.setExpanded(false);\n                break;\n            case KeyCode.RIGHT:\n                e.preventDefault();\n                this.modelItem.setExpanded(true);\n                break;\n            case KeyCode.SPACE:\n                e.preventDefault();\n                if (this.isSelectable()) {\n                    this.onSelectAllChanged(!this.isSelected());\n                }\n                break;\n        }\n    }\n    onContextMenu(e) {\n        const { columnGroup, gridOptionsService } = this;\n        if (gridOptionsService.is('functionsReadOnly')) {\n            return;\n        }\n        const contextMenu = this.createBean(new ToolPanelContextMenu(columnGroup, e, this.focusWrapper));\n        this.addDestroyFunc(() => {\n            if (contextMenu.isAlive()) {\n                this.destroyBean(contextMenu);\n            }\n        });\n    }\n    addVisibilityListenersToAllChildren() {\n        this.columnGroup.getLeafColumns().forEach(column => {\n            this.addManagedListener(column, Column.EVENT_VISIBLE_CHANGED, this.onColumnStateChanged.bind(this));\n            this.addManagedListener(column, Column.EVENT_VALUE_CHANGED, this.onColumnStateChanged.bind(this));\n            this.addManagedListener(column, Column.EVENT_PIVOT_CHANGED, this.onColumnStateChanged.bind(this));\n            this.addManagedListener(column, Column.EVENT_ROW_GROUP_CHANGED, this.onColumnStateChanged.bind(this));\n        });\n    }\n    setupDragging() {\n        if (!this.allowDragging) {\n            _.setDisplayed(this.eDragHandle, false);\n            return;\n        }\n        let hideColumnOnExit = !this.gridOptionsService.is('suppressDragLeaveHidesColumns');\n        const dragSource = {\n            type: DragSourceType.ToolPanel,\n            eElement: this.eDragHandle,\n            dragItemName: this.displayName,\n            getDefaultIconName: () => hideColumnOnExit ? DragAndDropService.ICON_HIDE : DragAndDropService.ICON_NOT_ALLOWED,\n            getDragItem: () => this.createDragItem(),\n            onDragStarted: () => {\n                hideColumnOnExit = !this.gridOptionsService.is('suppressDragLeaveHidesColumns');\n                const event = {\n                    type: Events.EVENT_COLUMN_PANEL_ITEM_DRAG_START,\n                    column: this.columnGroup\n                };\n                this.eventService.dispatchEvent(event);\n            },\n            onDragStopped: () => {\n                const event = {\n                    type: Events.EVENT_COLUMN_PANEL_ITEM_DRAG_END\n                };\n                this.eventService.dispatchEvent(event);\n            },\n            onGridEnter: (dragItem) => {\n                if (hideColumnOnExit) {\n                    // when dragged into the grid, restore the state that was active pre-drag\n                    this.modelItemUtils.updateColumns({\n                        columns: this.columnGroup.getLeafColumns(),\n                        visibleState: dragItem === null || dragItem === void 0 ? void 0 : dragItem.visibleState,\n                        pivotState: dragItem === null || dragItem === void 0 ? void 0 : dragItem.pivotState,\n                        eventType: this.eventType\n                    });\n                }\n            },\n            onGridExit: () => {\n                if (hideColumnOnExit) {\n                    // when dragged outside of the grid, mimic what happens when checkbox is disabled\n                    // this handles the behaviour for pivot which is different to just hiding a column.\n                    this.onChangeCommon(false);\n                }\n            }\n        };\n        this.dragAndDropService.addDragSource(dragSource, true);\n        this.addDestroyFunc(() => this.dragAndDropService.removeDragSource(dragSource));\n    }\n    createDragItem() {\n        const columns = this.columnGroup.getLeafColumns();\n        const visibleState = {};\n        const pivotState = {};\n        columns.forEach(col => {\n            const colId = col.getId();\n            visibleState[colId] = col.isVisible();\n            pivotState[colId] = this.modelItemUtils.createPivotState(col);\n        });\n        return {\n            columns,\n            visibleState,\n            pivotState\n        };\n    }\n    setupExpandContract() {\n        this.eGroupClosedIcon.appendChild(_.createIcon('columnSelectClosed', this.gridOptionsService, null));\n        this.eGroupOpenedIcon.appendChild(_.createIcon('columnSelectOpen', this.gridOptionsService, null));\n        this.addManagedListener(this.eGroupClosedIcon, 'click', this.onExpandOrContractClicked.bind(this));\n        this.addManagedListener(this.eGroupOpenedIcon, 'click', this.onExpandOrContractClicked.bind(this));\n        const touchListener = new TouchListener(this.eColumnGroupIcons, true);\n        this.addManagedListener(touchListener, TouchListener.EVENT_TAP, this.onExpandOrContractClicked.bind(this));\n        this.addDestroyFunc(touchListener.destroy.bind(touchListener));\n    }\n    onLabelClicked() {\n        const nextState = !this.cbSelect.getValue();\n        this.onChangeCommon(nextState);\n    }\n    onCheckboxChanged(event) {\n        this.onChangeCommon(event.selected);\n    }\n    getVisibleLeafColumns() {\n        const childColumns = [];\n        const extractCols = (children) => {\n            children.forEach(child => {\n                if (!child.isPassesFilter()) {\n                    return;\n                }\n                if (child.isGroup()) {\n                    extractCols(child.getChildren());\n                }\n                else {\n                    childColumns.push(child.getColumn());\n                }\n            });\n        };\n        extractCols(this.modelItem.getChildren());\n        return childColumns;\n    }\n    onChangeCommon(nextState) {\n        this.refreshAriaLabel();\n        if (this.processingColumnStateChange) {\n            return;\n        }\n        this.modelItemUtils.selectAllChildren(this.modelItem.getChildren(), nextState, this.eventType);\n    }\n    refreshAriaLabel() {\n        const translate = this.localeService.getLocaleTextFunc();\n        const columnLabel = translate('ariaColumnGroup', 'Column Group');\n        const checkboxValue = this.cbSelect.getValue();\n        const state = checkboxValue === undefined ?\n            translate('ariaIndeterminate', 'indeterminate') :\n            (checkboxValue ? translate('ariaVisible', 'visible') : translate('ariaHidden', 'hidden'));\n        const visibilityLabel = translate('ariaToggleVisibility', 'Press SPACE to toggle visibility');\n        _.setAriaLabel(this.focusWrapper, `${this.displayName} ${columnLabel}`);\n        this.cbSelect.setInputAriaLabel(`${visibilityLabel} (${state})`);\n        _.setAriaDescribedBy(this.focusWrapper, this.cbSelect.getInputElement().id);\n    }\n    onColumnStateChanged() {\n        const selectedValue = this.workOutSelectedValue();\n        const readOnlyValue = this.workOutReadOnlyValue();\n        this.processingColumnStateChange = true;\n        this.cbSelect.setValue(selectedValue);\n        this.cbSelect.setReadOnly(readOnlyValue);\n        this.addOrRemoveCssClass('ag-column-select-column-group-readonly', readOnlyValue);\n        this.processingColumnStateChange = false;\n    }\n    workOutSelectedValue() {\n        const pivotMode = this.columnModel.isPivotMode();\n        const visibleLeafColumns = this.getVisibleLeafColumns();\n        let checkedCount = 0;\n        let uncheckedCount = 0;\n        visibleLeafColumns.forEach(column => {\n            if (!pivotMode && column.getColDef().lockVisible) {\n                return;\n            }\n            if (this.isColumnChecked(column, pivotMode)) {\n                checkedCount++;\n            }\n            else {\n                uncheckedCount++;\n            }\n        });\n        if (checkedCount > 0 && uncheckedCount > 0) {\n            return undefined;\n        }\n        return checkedCount > 0;\n    }\n    workOutReadOnlyValue() {\n        const pivotMode = this.columnModel.isPivotMode();\n        let colsThatCanAction = 0;\n        this.columnGroup.getLeafColumns().forEach(col => {\n            if (pivotMode) {\n                if (col.isAnyFunctionAllowed()) {\n                    colsThatCanAction++;\n                }\n            }\n            else {\n                if (!col.getColDef().lockVisible) {\n                    colsThatCanAction++;\n                }\n            }\n        });\n        return colsThatCanAction === 0;\n    }\n    isColumnChecked(column, pivotMode) {\n        if (pivotMode) {\n            const pivoted = column.isPivotActive();\n            const grouped = column.isRowGroupActive();\n            const aggregated = column.isValueActive();\n            return pivoted || grouped || aggregated;\n        }\n        return column.isVisible();\n    }\n    onExpandOrContractClicked() {\n        const oldState = this.modelItem.isExpanded();\n        this.modelItem.setExpanded(!oldState);\n    }\n    onExpandChanged() {\n        this.setOpenClosedIcons();\n        this.refreshAriaExpanded();\n    }\n    setOpenClosedIcons() {\n        const folderOpen = this.modelItem.isExpanded();\n        _.setDisplayed(this.eGroupClosedIcon, !folderOpen);\n        _.setDisplayed(this.eGroupOpenedIcon, folderOpen);\n    }\n    refreshAriaExpanded() {\n        _.setAriaExpanded(this.focusWrapper, this.modelItem.isExpanded());\n    }\n    getDisplayName() {\n        return this.displayName;\n    }\n    onSelectAllChanged(value) {\n        const cbValue = this.cbSelect.getValue();\n        const readOnly = this.cbSelect.isReadOnly();\n        if (!readOnly && ((value && !cbValue) || (!value && cbValue))) {\n            this.cbSelect.toggle();\n        }\n    }\n    isSelected() {\n        return this.cbSelect.getValue();\n    }\n    isSelectable() {\n        return !this.cbSelect.isReadOnly();\n    }\n    setSelected(selected) {\n        this.cbSelect.setValue(selected, true);\n    }\n}\nToolPanelColumnGroupComp.TEMPLATE = `<div class=\"ag-column-select-column-group\" aria-hidden=\"true\">\n            <span class=\"ag-column-group-icons\" ref=\"eColumnGroupIcons\" >\n                <span class=\"ag-column-group-closed-icon\" ref=\"eGroupClosedIcon\"></span>\n                <span class=\"ag-column-group-opened-icon\" ref=\"eGroupOpenedIcon\"></span>\n            </span>\n            <ag-checkbox ref=\"cbSelect\" class=\"ag-column-select-checkbox\"></ag-checkbox>\n            <span class=\"ag-column-select-column-label\" ref=\"eLabel\"></span>\n        </div>`;\n__decorate([\n    Autowired('columnModel')\n], ToolPanelColumnGroupComp.prototype, \"columnModel\", void 0);\n__decorate([\n    Autowired('dragAndDropService')\n], ToolPanelColumnGroupComp.prototype, \"dragAndDropService\", void 0);\n__decorate([\n    Autowired('modelItemUtils')\n], ToolPanelColumnGroupComp.prototype, \"modelItemUtils\", void 0);\n__decorate([\n    RefSelector('cbSelect')\n], ToolPanelColumnGroupComp.prototype, \"cbSelect\", void 0);\n__decorate([\n    RefSelector('eLabel')\n], ToolPanelColumnGroupComp.prototype, \"eLabel\", void 0);\n__decorate([\n    RefSelector('eGroupOpenedIcon')\n], ToolPanelColumnGroupComp.prototype, \"eGroupOpenedIcon\", void 0);\n__decorate([\n    RefSelector('eGroupClosedIcon')\n], ToolPanelColumnGroupComp.prototype, \"eGroupClosedIcon\", void 0);\n__decorate([\n    RefSelector('eColumnGroupIcons')\n], ToolPanelColumnGroupComp.prototype, \"eColumnGroupIcons\", void 0);\n__decorate([\n    PostConstruct\n], ToolPanelColumnGroupComp.prototype, \"init\", null);\n", "var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { Autowired, BeanStub, DragSourceType, Events, ProvidedColumnGroup, PostConstruct, VirtualListDragFeature } from \"@ag-grid-community/core\";\nimport { ToolPanelColumnGroupComp } from \"./toolPanelColumnGroupComp.mjs\";\nexport class PrimaryColsListPanelItemDragFeature extends BeanStub {\n    constructor(comp, virtualList) {\n        super();\n        this.comp = comp;\n        this.virtualList = virtualList;\n    }\n    postConstruct() {\n        this.createManagedBean(new VirtualListDragFeature(this.comp, this.virtualList, {\n            dragSourceType: DragSourceType.ToolPanel,\n            listItemDragStartEvent: Events.EVENT_COLUMN_PANEL_ITEM_DRAG_START,\n            listItemDragEndEvent: Events.EVENT_COLUMN_PANEL_ITEM_DRAG_END,\n            eventSource: this.eventService,\n            getCurrentDragValue: (listItemDragStartEvent) => this.getCurrentDragValue(listItemDragStartEvent),\n            isMoveBlocked: (currentDragValue) => this.isMoveBlocked(currentDragValue),\n            getNumRows: (comp) => comp.getDisplayedColsList().length,\n            moveItem: (currentDragValue, lastHoveredListItem) => this.moveItem(currentDragValue, lastHoveredListItem)\n        }));\n    }\n    getCurrentDragValue(listItemDragStartEvent) {\n        return listItemDragStartEvent.column;\n    }\n    isMoveBlocked(currentDragValue) {\n        const currentColumns = this.getCurrentColumns(currentDragValue);\n        const hasNotMovable = currentColumns.find(col => {\n            const colDef = col.getColDef();\n            return !!colDef.suppressMovable || !!colDef.lockPosition;\n        });\n        return !!hasNotMovable;\n    }\n    moveItem(currentDragValue, lastHoveredListItem) {\n        const targetIndex = this.getTargetIndex(currentDragValue, lastHoveredListItem);\n        const columnsToMove = this.getCurrentColumns(currentDragValue);\n        if (targetIndex != null) {\n            this.columnModel.moveColumns(columnsToMove, targetIndex, 'toolPanelUi');\n        }\n    }\n    getMoveDiff(currentDragValue, end) {\n        const allColumns = this.columnModel.getAllGridColumns();\n        const currentColumns = this.getCurrentColumns(currentDragValue);\n        const currentColumn = currentColumns[0];\n        const span = currentColumns.length;\n        const currentIndex = allColumns.indexOf(currentColumn);\n        if (currentIndex < end) {\n            return span;\n        }\n        return 0;\n    }\n    getCurrentColumns(currentDragValue) {\n        if (currentDragValue instanceof ProvidedColumnGroup) {\n            return currentDragValue.getLeafColumns();\n        }\n        return [currentDragValue];\n    }\n    getTargetIndex(currentDragValue, lastHoveredListItem) {\n        if (!lastHoveredListItem) {\n            return null;\n        }\n        const columnItemComponent = lastHoveredListItem.component;\n        let isBefore = lastHoveredListItem.position === 'top';\n        let targetColumn;\n        if (columnItemComponent instanceof ToolPanelColumnGroupComp) {\n            const columns = columnItemComponent.getColumns();\n            targetColumn = columns[0];\n            isBefore = true;\n        }\n        else {\n            targetColumn = columnItemComponent.getColumn();\n        }\n        // if the target col is in the cols to be moved, no index to move.\n        const movingCols = this.getCurrentColumns(currentDragValue);\n        if (movingCols.indexOf(targetColumn) !== -1) {\n            return null;\n        }\n        const targetColumnIndex = this.columnModel.getAllGridColumns().indexOf(targetColumn);\n        const adjustedTarget = isBefore ? targetColumnIndex : targetColumnIndex + 1;\n        const diff = this.getMoveDiff(currentDragValue, adjustedTarget);\n        return adjustedTarget - diff;\n    }\n}\n__decorate([\n    Autowired('columnModel')\n], PrimaryColsListPanelItemDragFeature.prototype, \"columnModel\", void 0);\n__decorate([\n    PostConstruct\n], PrimaryColsListPanelItemDragFeature.prototype, \"postConstruct\", null);\n", "var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { _, Autowired, Column, Component, CssClassApplier, DragAndDropService, DragSourceType, Events, KeyCode, PostConstruct, RefSelector } from \"@ag-grid-community/core\";\nimport { ToolPanelContextMenu } from \"./toolPanelContextMenu.mjs\";\nexport class ToolPanelColumnComp extends Component {\n    constructor(modelItem, allowDragging, groupsExist, focusWrapper) {\n        super();\n        this.allowDragging = allowDragging;\n        this.groupsExist = groupsExist;\n        this.focusWrapper = focusWrapper;\n        this.processingColumnStateChange = false;\n        this.column = modelItem.getColumn();\n        this.columnDept = modelItem.getDept();\n        this.displayName = modelItem.getDisplayName();\n    }\n    init() {\n        this.setTemplate(ToolPanelColumnComp.TEMPLATE);\n        this.eDragHandle = _.createIconNoSpan('columnDrag', this.gridOptionsService);\n        this.eDragHandle.classList.add('ag-drag-handle', 'ag-column-select-column-drag-handle');\n        const checkboxGui = this.cbSelect.getGui();\n        const checkboxInput = this.cbSelect.getInputElement();\n        checkboxGui.insertAdjacentElement('afterend', this.eDragHandle);\n        checkboxInput.setAttribute('tabindex', '-1');\n        const displayNameSanitised = _.escapeString(this.displayName);\n        this.eLabel.innerHTML = displayNameSanitised;\n        // if grouping, we add an extra level of indent, to cater for expand/contract icons we need to indent for\n        const indent = this.columnDept;\n        if (this.groupsExist) {\n            this.addCssClass('ag-column-select-add-group-indent');\n        }\n        this.addCssClass(`ag-column-select-indent-${indent}`);\n        this.setupDragging();\n        this.addManagedListener(this.eventService, Events.EVENT_COLUMN_PIVOT_MODE_CHANGED, this.onColumnStateChanged.bind(this));\n        this.addManagedListener(this.column, Column.EVENT_VALUE_CHANGED, this.onColumnStateChanged.bind(this));\n        this.addManagedListener(this.column, Column.EVENT_PIVOT_CHANGED, this.onColumnStateChanged.bind(this));\n        this.addManagedListener(this.column, Column.EVENT_ROW_GROUP_CHANGED, this.onColumnStateChanged.bind(this));\n        this.addManagedListener(this.column, Column.EVENT_VISIBLE_CHANGED, this.onColumnStateChanged.bind(this));\n        this.addManagedListener(this.focusWrapper, 'keydown', this.handleKeyDown.bind(this));\n        this.addManagedListener(this.focusWrapper, 'contextmenu', this.onContextMenu.bind(this));\n        this.addManagedPropertyListener('functionsReadOnly', this.onColumnStateChanged.bind(this));\n        this.addManagedListener(this.cbSelect, Events.EVENT_FIELD_VALUE_CHANGED, this.onCheckboxChanged.bind(this));\n        this.addManagedListener(this.eLabel, 'click', this.onLabelClicked.bind(this));\n        this.onColumnStateChanged();\n        this.refreshAriaLabel();\n        this.setupTooltip();\n        const classes = CssClassApplier.getToolPanelClassesFromColDef(this.column.getColDef(), this.gridOptionsService, this.column, null);\n        classes.forEach(c => this.addOrRemoveCssClass(c, true));\n    }\n    getColumn() {\n        return this.column;\n    }\n    setupTooltip() {\n        const refresh = () => {\n            const newTooltipText = this.column.getColDef().headerTooltip;\n            this.setTooltip(newTooltipText);\n        };\n        refresh();\n        this.addManagedListener(this.eventService, Events.EVENT_NEW_COLUMNS_LOADED, refresh);\n    }\n    getTooltipParams() {\n        const res = super.getTooltipParams();\n        res.location = 'columnToolPanelColumn';\n        res.colDef = this.column.getColDef();\n        return res;\n    }\n    onContextMenu(e) {\n        const { column, gridOptionsService } = this;\n        if (gridOptionsService.is('functionsReadOnly')) {\n            return;\n        }\n        const contextMenu = this.createBean(new ToolPanelContextMenu(column, e, this.focusWrapper));\n        this.addDestroyFunc(() => {\n            if (contextMenu.isAlive()) {\n                this.destroyBean(contextMenu);\n            }\n        });\n    }\n    handleKeyDown(e) {\n        if (e.key === KeyCode.SPACE) {\n            e.preventDefault();\n            if (this.isSelectable()) {\n                this.onSelectAllChanged(!this.isSelected());\n            }\n        }\n    }\n    onLabelClicked() {\n        if (this.gridOptionsService.is('functionsReadOnly')) {\n            return;\n        }\n        const nextState = !this.cbSelect.getValue();\n        this.onChangeCommon(nextState);\n    }\n    onCheckboxChanged(event) {\n        this.onChangeCommon(event.selected);\n    }\n    onChangeCommon(nextState) {\n        // ignore lock visible columns\n        if (this.cbSelect.isReadOnly()) {\n            return;\n        }\n        this.refreshAriaLabel();\n        // only want to action if the user clicked the checkbox, not if we are setting the checkbox because\n        // of a change in the model\n        if (this.processingColumnStateChange) {\n            return;\n        }\n        this.modelItemUtils.setColumn(this.column, nextState, 'toolPanelUi');\n    }\n    refreshAriaLabel() {\n        const translate = this.localeService.getLocaleTextFunc();\n        const columnLabel = translate('ariaColumn', 'Column');\n        const state = this.cbSelect.getValue() ? translate('ariaVisible', 'visible') : translate('ariaHidden', 'hidden');\n        const visibilityLabel = translate('ariaToggleVisibility', 'Press SPACE to toggle visibility');\n        _.setAriaLabel(this.focusWrapper, `${this.displayName} ${columnLabel}`);\n        this.cbSelect.setInputAriaLabel(`${visibilityLabel} (${state})`);\n        _.setAriaDescribedBy(this.focusWrapper, this.cbSelect.getInputElement().id);\n    }\n    setupDragging() {\n        if (!this.allowDragging) {\n            _.setDisplayed(this.eDragHandle, false);\n            return;\n        }\n        let hideColumnOnExit = !this.gridOptionsService.is('suppressDragLeaveHidesColumns');\n        const dragSource = {\n            type: DragSourceType.ToolPanel,\n            eElement: this.eDragHandle,\n            dragItemName: this.displayName,\n            getDefaultIconName: () => hideColumnOnExit ? DragAndDropService.ICON_HIDE : DragAndDropService.ICON_NOT_ALLOWED,\n            getDragItem: () => this.createDragItem(),\n            onDragStarted: () => {\n                hideColumnOnExit = !this.gridOptionsService.is('suppressDragLeaveHidesColumns');\n                const event = {\n                    type: Events.EVENT_COLUMN_PANEL_ITEM_DRAG_START,\n                    column: this.column\n                };\n                this.eventService.dispatchEvent(event);\n            },\n            onDragStopped: () => {\n                const event = {\n                    type: Events.EVENT_COLUMN_PANEL_ITEM_DRAG_END\n                };\n                this.eventService.dispatchEvent(event);\n            },\n            onGridEnter: (dragItem) => {\n                if (hideColumnOnExit) {\n                    // when dragged into the grid, restore the state that was active pre-drag\n                    this.modelItemUtils.updateColumns({\n                        columns: [this.column],\n                        visibleState: dragItem === null || dragItem === void 0 ? void 0 : dragItem.visibleState,\n                        pivotState: dragItem === null || dragItem === void 0 ? void 0 : dragItem.pivotState,\n                        eventType: 'toolPanelUi'\n                    });\n                }\n            },\n            onGridExit: () => {\n                if (hideColumnOnExit) {\n                    // when dragged outside of the grid, mimic what happens when checkbox is disabled\n                    // this handles the behaviour for pivot which is different to just hiding a column.\n                    this.onChangeCommon(false);\n                }\n            }\n        };\n        this.dragAndDropService.addDragSource(dragSource, true);\n        this.addDestroyFunc(() => this.dragAndDropService.removeDragSource(dragSource));\n    }\n    createDragItem() {\n        const colId = this.column.getColId();\n        const visibleState = { [colId]: this.column.isVisible() };\n        const pivotState = { [colId]: this.modelItemUtils.createPivotState(this.column) };\n        return {\n            columns: [this.column],\n            visibleState,\n            pivotState\n        };\n    }\n    onColumnStateChanged() {\n        this.processingColumnStateChange = true;\n        const isPivotMode = this.columnModel.isPivotMode();\n        if (isPivotMode) {\n            // if reducing, checkbox means column is one of pivot, value or group\n            const anyFunctionActive = this.column.isAnyFunctionActive();\n            this.cbSelect.setValue(anyFunctionActive);\n        }\n        else {\n            // if not reducing, the checkbox tells us if column is visible or not\n            this.cbSelect.setValue(this.column.isVisible());\n        }\n        let canBeToggled = true;\n        let canBeDragged = true;\n        if (isPivotMode) {\n            // when in pivot mode, the item should be read only if:\n            //  a) gui is not allowed make any changes\n            const functionsReadOnly = this.gridOptionsService.is('functionsReadOnly');\n            //  b) column is not allow any functions on it\n            const noFunctionsAllowed = !this.column.isAnyFunctionAllowed();\n            canBeToggled = !functionsReadOnly && !noFunctionsAllowed;\n            canBeDragged = canBeToggled;\n        }\n        else {\n            const { enableRowGroup, enableValue, lockPosition, suppressMovable, lockVisible } = this.column.getColDef();\n            const forceDraggable = !!enableRowGroup || !!enableValue;\n            const disableDraggable = !!lockPosition || !!suppressMovable;\n            canBeToggled = !lockVisible;\n            canBeDragged = forceDraggable || !disableDraggable;\n        }\n        this.cbSelect.setReadOnly(!canBeToggled);\n        this.eDragHandle.classList.toggle('ag-column-select-column-readonly', !canBeDragged);\n        this.addOrRemoveCssClass('ag-column-select-column-readonly', !canBeDragged && !canBeToggled);\n        const checkboxPassive = isPivotMode && this.gridOptionsService.is('functionsPassive');\n        this.cbSelect.setPassive(checkboxPassive);\n        this.processingColumnStateChange = false;\n    }\n    getDisplayName() {\n        return this.displayName;\n    }\n    onSelectAllChanged(value) {\n        if (value !== this.cbSelect.getValue()) {\n            if (!this.cbSelect.isReadOnly()) {\n                this.cbSelect.toggle();\n            }\n        }\n    }\n    isSelected() {\n        return this.cbSelect.getValue();\n    }\n    isSelectable() {\n        return !this.cbSelect.isReadOnly();\n    }\n    isExpandable() {\n        return false;\n    }\n    setExpanded(value) {\n        console.warn('AG Grid: can not expand a column item that does not represent a column group header');\n    }\n}\nToolPanelColumnComp.TEMPLATE = `<div class=\"ag-column-select-column\" aria-hidden=\"true\">\n            <ag-checkbox ref=\"cbSelect\" class=\"ag-column-select-checkbox\"></ag-checkbox>\n            <span class=\"ag-column-select-column-label\" ref=\"eLabel\"></span>\n        </div>`;\n__decorate([\n    Autowired('columnModel')\n], ToolPanelColumnComp.prototype, \"columnModel\", void 0);\n__decorate([\n    Autowired('dragAndDropService')\n], ToolPanelColumnComp.prototype, \"dragAndDropService\", void 0);\n__decorate([\n    Autowired('modelItemUtils')\n], ToolPanelColumnComp.prototype, \"modelItemUtils\", void 0);\n__decorate([\n    RefSelector('eLabel')\n], ToolPanelColumnComp.prototype, \"eLabel\", void 0);\n__decorate([\n    RefSelector('cbSelect')\n], ToolPanelColumnComp.prototype, \"cbSelect\", void 0);\n__decorate([\n    PostConstruct\n], ToolPanelColumnComp.prototype, \"init\", null);\n", "var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { _, Autowired, Component, Events, ProvidedColumnGroup, VirtualList, PreDestroy } from \"@ag-grid-community/core\";\nimport { PrimaryColsListPanelItemDragFeature } from './primaryColsListPanelItemDragFeature.mjs';\nimport { ToolPanelColumnGroupComp } from \"./toolPanelColumnGroupComp.mjs\";\nimport { ToolPanelColumnComp } from \"./toolPanelColumnComp.mjs\";\nimport { ExpandState } from \"./primaryColsHeaderPanel.mjs\";\nimport { ColumnModelItem } from \"./columnModelItem.mjs\";\nclass UIColumnModel {\n    constructor(items) {\n        this.items = items;\n    }\n    getRowCount() {\n        return this.items.length;\n    }\n    getRow(index) {\n        return this.items[index];\n    }\n}\nconst PRIMARY_COLS_LIST_PANEL_CLASS = 'ag-column-select-list';\nexport class PrimaryColsListPanel extends Component {\n    constructor() {\n        super(PrimaryColsListPanel.TEMPLATE);\n        this.destroyColumnItemFuncs = [];\n    }\n    destroyColumnTree() {\n        this.allColsTree = [];\n        this.destroyColumnItemFuncs.forEach(f => f());\n        this.destroyColumnItemFuncs = [];\n    }\n    init(params, allowDragging, eventType) {\n        this.params = params;\n        this.allowDragging = allowDragging;\n        this.eventType = eventType;\n        if (!this.params.suppressSyncLayoutWithGrid) {\n            this.addManagedListener(this.eventService, Events.EVENT_COLUMN_MOVED, this.onColumnsChanged.bind(this));\n        }\n        this.addManagedListener(this.eventService, Events.EVENT_NEW_COLUMNS_LOADED, this.onColumnsChanged.bind(this));\n        const eventsImpactingCheckedState = [\n            Events.EVENT_COLUMN_PIVOT_CHANGED,\n            Events.EVENT_COLUMN_PIVOT_MODE_CHANGED,\n            Events.EVENT_COLUMN_ROW_GROUP_CHANGED,\n            Events.EVENT_COLUMN_VALUE_CHANGED,\n            Events.EVENT_COLUMN_VISIBLE,\n            Events.EVENT_NEW_COLUMNS_LOADED\n        ];\n        eventsImpactingCheckedState.forEach(event => {\n            // update header select all checkbox with current selection state\n            this.addManagedListener(this.eventService, event, this.fireSelectionChangedEvent.bind(this));\n        });\n        this.expandGroupsByDefault = !this.params.contractColumnSelection;\n        const translate = this.localeService.getLocaleTextFunc();\n        const columnListName = translate('ariaColumnList', 'Column List');\n        this.virtualList = this.createManagedBean(new VirtualList({\n            cssIdentifier: 'column-select',\n            ariaRole: 'tree',\n            listName: columnListName\n        }));\n        this.appendChild(this.virtualList.getGui());\n        this.virtualList.setComponentCreator((item, listItemElement) => {\n            _.setAriaLevel(listItemElement, (item.getDept() + 1));\n            return this.createComponentFromItem(item, listItemElement);\n        });\n        if (this.columnModel.isReady()) {\n            this.onColumnsChanged();\n        }\n        if (!params.suppressColumnMove && !this.gridOptionsService.is('suppressMovableColumns')) {\n            this.createManagedBean(new PrimaryColsListPanelItemDragFeature(this, this.virtualList));\n        }\n    }\n    createComponentFromItem(item, listItemElement) {\n        if (item.isGroup()) {\n            const renderedGroup = new ToolPanelColumnGroupComp(item, this.allowDragging, this.eventType, listItemElement);\n            this.getContext().createBean(renderedGroup);\n            return renderedGroup;\n        }\n        const columnComp = new ToolPanelColumnComp(item, this.allowDragging, this.groupsExist, listItemElement);\n        this.getContext().createBean(columnComp);\n        return columnComp;\n    }\n    onColumnsChanged() {\n        const expandedStates = this.getExpandedStates();\n        const pivotModeActive = this.columnModel.isPivotMode();\n        const shouldSyncColumnLayoutWithGrid = !this.params.suppressSyncLayoutWithGrid && !pivotModeActive;\n        if (shouldSyncColumnLayoutWithGrid) {\n            this.buildTreeFromWhatGridIsDisplaying();\n        }\n        else {\n            this.buildTreeFromProvidedColumnDefs();\n        }\n        this.setExpandedStates(expandedStates);\n        this.markFilteredColumns();\n        this.flattenAndFilterModel();\n    }\n    getDisplayedColsList() {\n        return this.displayedColsList;\n    }\n    getExpandedStates() {\n        if (!this.allColsTree) {\n            return {};\n        }\n        const res = {};\n        this.forEachItem(item => {\n            if (!item.isGroup()) {\n                return;\n            }\n            const colGroup = item.getColumnGroup();\n            if (colGroup) { // group should always exist, this is defensive\n                res[colGroup.getId()] = item.isExpanded();\n            }\n        });\n        return res;\n    }\n    setExpandedStates(states) {\n        if (!this.allColsTree) {\n            return;\n        }\n        this.forEachItem(item => {\n            if (!item.isGroup()) {\n                return;\n            }\n            const colGroup = item.getColumnGroup();\n            if (colGroup) { // group should always exist, this is defensive\n                const expanded = states[colGroup.getId()];\n                const groupExistedLastTime = expanded != null;\n                if (groupExistedLastTime) {\n                    item.setExpanded(expanded);\n                }\n            }\n        });\n    }\n    buildTreeFromWhatGridIsDisplaying() {\n        this.colDefService.syncLayoutWithGrid(this.setColumnLayout.bind(this));\n    }\n    setColumnLayout(colDefs) {\n        const columnTree = this.colDefService.createColumnTree(colDefs);\n        this.buildListModel(columnTree);\n        // using col defs to check if groups exist as it could be a custom layout\n        this.groupsExist = colDefs.some(colDef => {\n            return colDef && typeof colDef.children !== 'undefined';\n        });\n        this.markFilteredColumns();\n        this.flattenAndFilterModel();\n    }\n    buildTreeFromProvidedColumnDefs() {\n        // add column / group comps to tool panel\n        this.buildListModel(this.columnModel.getPrimaryColumnTree());\n        this.groupsExist = this.columnModel.isPrimaryColumnGroupsPresent();\n    }\n    buildListModel(columnTree) {\n        const columnExpandedListener = this.onColumnExpanded.bind(this);\n        const addListeners = (item) => {\n            item.addEventListener(ColumnModelItem.EVENT_EXPANDED_CHANGED, columnExpandedListener);\n            const removeFunc = item.removeEventListener.bind(item, ColumnModelItem.EVENT_EXPANDED_CHANGED, columnExpandedListener);\n            this.destroyColumnItemFuncs.push(removeFunc);\n        };\n        const recursivelyBuild = (tree, dept, parentList) => {\n            tree.forEach(child => {\n                if (child instanceof ProvidedColumnGroup) {\n                    createGroupItem(child, dept, parentList);\n                }\n                else {\n                    createColumnItem(child, dept, parentList);\n                }\n            });\n        };\n        const createGroupItem = (columnGroup, dept, parentList) => {\n            const columnGroupDef = columnGroup.getColGroupDef();\n            const skipThisGroup = columnGroupDef && columnGroupDef.suppressColumnsToolPanel;\n            if (skipThisGroup) {\n                return;\n            }\n            if (columnGroup.isPadding()) {\n                recursivelyBuild(columnGroup.getChildren(), dept, parentList);\n                return;\n            }\n            const displayName = this.columnModel.getDisplayNameForProvidedColumnGroup(null, columnGroup, 'columnToolPanel');\n            const item = new ColumnModelItem(displayName, columnGroup, dept, true, this.expandGroupsByDefault);\n            parentList.push(item);\n            addListeners(item);\n            recursivelyBuild(columnGroup.getChildren(), dept + 1, item.getChildren());\n        };\n        const createColumnItem = (column, dept, parentList) => {\n            const skipThisColumn = column.getColDef() && column.getColDef().suppressColumnsToolPanel;\n            if (skipThisColumn) {\n                return;\n            }\n            const displayName = this.columnModel.getDisplayNameForColumn(column, 'columnToolPanel');\n            parentList.push(new ColumnModelItem(displayName, column, dept));\n        };\n        this.destroyColumnTree();\n        recursivelyBuild(columnTree, 0, this.allColsTree);\n    }\n    onColumnExpanded() {\n        this.flattenAndFilterModel();\n    }\n    flattenAndFilterModel() {\n        this.displayedColsList = [];\n        const recursiveFunc = (item) => {\n            if (!item.isPassesFilter()) {\n                return;\n            }\n            this.displayedColsList.push(item);\n            if (item.isGroup() && item.isExpanded()) {\n                item.getChildren().forEach(recursiveFunc);\n            }\n        };\n        this.allColsTree.forEach(recursiveFunc);\n        this.virtualList.setModel(new UIColumnModel(this.displayedColsList));\n        const focusedRow = this.virtualList.getLastFocusedRow();\n        this.virtualList.refresh();\n        if (focusedRow != null) {\n            this.focusRowIfAlive(focusedRow);\n        }\n        this.notifyListeners();\n    }\n    focusRowIfAlive(rowIndex) {\n        window.setTimeout(() => {\n            if (this.isAlive()) {\n                this.virtualList.focusRow(rowIndex);\n            }\n        }, 0);\n    }\n    forEachItem(callback) {\n        const recursiveFunc = (items) => {\n            items.forEach(item => {\n                callback(item);\n                if (item.isGroup()) {\n                    recursiveFunc(item.getChildren());\n                }\n            });\n        };\n        recursiveFunc(this.allColsTree);\n    }\n    doSetExpandedAll(value) {\n        this.forEachItem(item => {\n            if (item.isGroup()) {\n                item.setExpanded(value);\n            }\n        });\n    }\n    setGroupsExpanded(expand, groupIds) {\n        if (!groupIds) {\n            this.doSetExpandedAll(expand);\n            return;\n        }\n        const expandedGroupIds = [];\n        this.forEachItem(item => {\n            if (!item.isGroup()) {\n                return;\n            }\n            const groupId = item.getColumnGroup().getId();\n            if (groupIds.indexOf(groupId) >= 0) {\n                item.setExpanded(expand);\n                expandedGroupIds.push(groupId);\n            }\n        });\n        const unrecognisedGroupIds = groupIds.filter(groupId => !_.includes(expandedGroupIds, groupId));\n        if (unrecognisedGroupIds.length > 0) {\n            console.warn('AG Grid: unable to find group(s) for supplied groupIds:', unrecognisedGroupIds);\n        }\n    }\n    getExpandState() {\n        let expandedCount = 0;\n        let notExpandedCount = 0;\n        this.forEachItem(item => {\n            if (!item.isGroup()) {\n                return;\n            }\n            if (item.isExpanded()) {\n                expandedCount++;\n            }\n            else {\n                notExpandedCount++;\n            }\n        });\n        if (expandedCount > 0 && notExpandedCount > 0) {\n            return ExpandState.INDETERMINATE;\n        }\n        if (notExpandedCount > 0) {\n            return ExpandState.COLLAPSED;\n        }\n        return ExpandState.EXPANDED;\n    }\n    doSetSelectedAll(selectAllChecked) {\n        this.modelItemUtils.selectAllChildren(this.allColsTree, selectAllChecked, this.eventType);\n    }\n    getSelectionState() {\n        let checkedCount = 0;\n        let uncheckedCount = 0;\n        const pivotMode = this.columnModel.isPivotMode();\n        this.forEachItem(item => {\n            if (item.isGroup()) {\n                return;\n            }\n            if (!item.isPassesFilter()) {\n                return;\n            }\n            const column = item.getColumn();\n            const colDef = column.getColDef();\n            let checked;\n            if (pivotMode) {\n                const noPivotModeOptionsAllowed = !column.isAllowPivot() && !column.isAllowRowGroup() && !column.isAllowValue();\n                if (noPivotModeOptionsAllowed) {\n                    return;\n                }\n                checked = column.isValueActive() || column.isPivotActive() || column.isRowGroupActive();\n            }\n            else {\n                if (colDef.lockVisible) {\n                    return;\n                }\n                checked = column.isVisible();\n            }\n            checked ? checkedCount++ : uncheckedCount++;\n        });\n        if (checkedCount > 0 && uncheckedCount > 0) {\n            return undefined;\n        }\n        return !(checkedCount === 0 || uncheckedCount > 0);\n    }\n    setFilterText(filterText) {\n        this.filterText = _.exists(filterText) ? filterText.toLowerCase() : null;\n        this.markFilteredColumns();\n        this.flattenAndFilterModel();\n    }\n    markFilteredColumns() {\n        const passesFilter = (item) => {\n            if (!_.exists(this.filterText)) {\n                return true;\n            }\n            const displayName = item.getDisplayName();\n            return displayName == null || displayName.toLowerCase().indexOf(this.filterText) !== -1;\n        };\n        const recursivelyCheckFilter = (item, parentPasses) => {\n            let atLeastOneChildPassed = false;\n            if (item.isGroup()) {\n                const groupPasses = passesFilter(item);\n                item.getChildren().forEach(child => {\n                    const childPasses = recursivelyCheckFilter(child, groupPasses || parentPasses);\n                    if (childPasses) {\n                        atLeastOneChildPassed = childPasses;\n                    }\n                });\n            }\n            const filterPasses = (parentPasses || atLeastOneChildPassed) ? true : passesFilter(item);\n            item.setPassesFilter(filterPasses);\n            return filterPasses;\n        };\n        this.allColsTree.forEach(item => recursivelyCheckFilter(item, false));\n    }\n    notifyListeners() {\n        this.fireGroupExpandedEvent();\n        this.fireSelectionChangedEvent();\n    }\n    fireGroupExpandedEvent() {\n        const expandState = this.getExpandState();\n        this.dispatchEvent({ type: 'groupExpanded', state: expandState });\n    }\n    fireSelectionChangedEvent() {\n        const selectionState = this.getSelectionState();\n        this.dispatchEvent({ type: 'selectionChanged', state: selectionState });\n    }\n}\nPrimaryColsListPanel.TEMPLATE = `<div class=\"${PRIMARY_COLS_LIST_PANEL_CLASS}\" role=\"presentation\"></div>`;\n__decorate([\n    Autowired('columnModel')\n], PrimaryColsListPanel.prototype, \"columnModel\", void 0);\n__decorate([\n    Autowired('toolPanelColDefService')\n], PrimaryColsListPanel.prototype, \"colDefService\", void 0);\n__decorate([\n    Autowired('modelItemUtils')\n], PrimaryColsListPanel.prototype, \"modelItemUtils\", void 0);\n__decorate([\n    PreDestroy\n], PrimaryColsListPanel.prototype, \"destroyColumnTree\", null);\n", "var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { Autowired, Component, Events, PreConstruct, RefSelector } from \"@ag-grid-community/core\";\nexport class PivotModePanel extends Component {\n    createTemplate() {\n        return /* html */ `<div class=\"ag-pivot-mode-panel\">\n                <ag-toggle-button ref=\"cbPivotMode\" class=\"ag-pivot-mode-select\"></ag-toggle-button>\n            </div>`;\n    }\n    init() {\n        this.setTemplate(this.createTemplate());\n        this.cbPivotMode.setValue(this.columnModel.isPivotMode());\n        const localeTextFunc = this.localeService.getLocaleTextFunc();\n        this.cbPivotMode.setLabel(localeTextFunc('pivotMode', 'Pivot Mode'));\n        this.addManagedListener(this.cbPivotMode, Events.EVENT_FIELD_VALUE_CHANGED, this.onBtPivotMode.bind(this));\n        this.addManagedListener(this.eventService, Events.EVENT_NEW_COLUMNS_LOADED, this.onPivotModeChanged.bind(this));\n        this.addManagedListener(this.eventService, Events.EVENT_COLUMN_PIVOT_MODE_CHANGED, this.onPivotModeChanged.bind(this));\n    }\n    onBtPivotMode() {\n        const newValue = !!this.cbPivotMode.getValue();\n        if (newValue !== this.columnModel.isPivotMode()) {\n            this.columnModel.setPivotMode(newValue, \"toolPanelUi\");\n            const api = this.gridOptionsService.api;\n            if (api) {\n                api.refreshHeader();\n            }\n        }\n    }\n    onPivotModeChanged() {\n        const pivotModeActive = this.columnModel.isPivotMode();\n        this.cbPivotMode.setValue(pivotModeActive);\n    }\n}\n__decorate([\n    Autowired('columnModel')\n], PivotModePanel.prototype, \"columnModel\", void 0);\n__decorate([\n    RefSelector('cbPivotMode')\n], PivotModePanel.prototype, \"cbPivotMode\", void 0);\n__decorate([\n    PreConstruct\n], PivotModePanel.prototype, \"init\", null);\n", "var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { Bean, BeanStub, Autowired, _, } from \"@ag-grid-community/core\";\nlet AggregationStage = class AggregationStage extends BeanStub {\n    // it's possible to recompute the aggregate without doing the other parts\n    // + api.refreshClientSideRowModel('aggregate')\n    execute(params) {\n        // if changed path is active, it means we came from a) change detection or b) transaction update.\n        // for both of these, if no value columns are present, it means there is nothing to aggregate now\n        // and there is no cleanup to be done (as value columns don't change between transactions or change\n        // detections). if no value columns and no changed path, means we have to go through all nodes in\n        // case we need to clean up agg data from before.\n        const noValueColumns = _.missingOrEmpty(this.columnModel.getValueColumns());\n        const noUserAgg = !this.gridOptionsService.getCallback('getGroupRowAgg');\n        const changedPathActive = params.changedPath && params.changedPath.isActive();\n        if (noValueColumns && noUserAgg && changedPathActive) {\n            return;\n        }\n        const aggDetails = this.createAggDetails(params);\n        this.recursivelyCreateAggData(aggDetails);\n    }\n    createAggDetails(params) {\n        const pivotActive = this.columnModel.isPivotActive();\n        const measureColumns = this.columnModel.getValueColumns();\n        const pivotColumns = pivotActive ? this.columnModel.getPivotColumns() : [];\n        const aggDetails = {\n            alwaysAggregateAtRootLevel: this.gridOptionsService.is('alwaysAggregateAtRootLevel'),\n            groupIncludeTotalFooter: this.gridOptionsService.is('groupIncludeTotalFooter'),\n            changedPath: params.changedPath,\n            valueColumns: measureColumns,\n            pivotColumns: pivotColumns,\n            filteredOnly: !this.isSuppressAggFilteredOnly(),\n            userAggFunc: this.gridOptionsService.getCallback('getGroupRowAgg'),\n        };\n        return aggDetails;\n    }\n    isSuppressAggFilteredOnly() {\n        const isGroupAggFiltering = this.gridOptionsService.getGroupAggFiltering() !== undefined;\n        return isGroupAggFiltering || this.gridOptionsService.is('suppressAggFilteredOnly');\n    }\n    recursivelyCreateAggData(aggDetails) {\n        const callback = (rowNode) => {\n            const hasNoChildren = !rowNode.hasChildren();\n            if (hasNoChildren) {\n                // this check is needed for TreeData, in case the node is no longer a child,\n                // but it was a child previously.\n                if (rowNode.aggData) {\n                    rowNode.setAggData(null);\n                }\n                // never agg data for leaf nodes\n                return;\n            }\n            //Optionally enable the aggregation at the root Node\n            const isRootNode = rowNode.level === -1;\n            // if total footer is displayed, the value is in use\n            if (isRootNode && !aggDetails.groupIncludeTotalFooter) {\n                const notPivoting = !this.columnModel.isPivotMode();\n                if (!aggDetails.alwaysAggregateAtRootLevel && notPivoting) {\n                    return;\n                }\n            }\n            this.aggregateRowNode(rowNode, aggDetails);\n        };\n        aggDetails.changedPath.forEachChangedNodeDepthFirst(callback, true);\n    }\n    aggregateRowNode(rowNode, aggDetails) {\n        const measureColumnsMissing = aggDetails.valueColumns.length === 0;\n        const pivotColumnsMissing = aggDetails.pivotColumns.length === 0;\n        let aggResult;\n        if (aggDetails.userAggFunc) {\n            aggResult = aggDetails.userAggFunc({ nodes: rowNode.childrenAfterFilter });\n        }\n        else if (measureColumnsMissing) {\n            aggResult = null;\n        }\n        else if (pivotColumnsMissing) {\n            aggResult = this.aggregateRowNodeUsingValuesOnly(rowNode, aggDetails);\n        }\n        else {\n            aggResult = this.aggregateRowNodeUsingValuesAndPivot(rowNode);\n        }\n        rowNode.setAggData(aggResult);\n        // if we are grouping, then it's possible there is a sibling footer\n        // to the group, so update the data here also if there is one\n        if (rowNode.sibling) {\n            rowNode.sibling.setAggData(aggResult);\n        }\n    }\n    aggregateRowNodeUsingValuesAndPivot(rowNode) {\n        var _a;\n        const result = {};\n        const secondaryColumns = (_a = this.columnModel.getSecondaryColumns()) !== null && _a !== void 0 ? _a : [];\n        secondaryColumns.forEach(secondaryCol => {\n            const { pivotValueColumn, pivotTotalColumnIds, colId, pivotKeys } = secondaryCol.getColDef();\n            if (_.exists(pivotTotalColumnIds)) {\n                return;\n            }\n            const keys = pivotKeys !== null && pivotKeys !== void 0 ? pivotKeys : [];\n            let values;\n            if (rowNode.leafGroup) {\n                // lowest level group, get the values from the mapped set\n                values = this.getValuesFromMappedSet(rowNode.childrenMapped, keys, pivotValueColumn);\n            }\n            else {\n                // value columns and pivot columns, non-leaf group\n                values = this.getValuesPivotNonLeaf(rowNode, colId);\n            }\n            result[colId] = this.aggregateValues(values, pivotValueColumn.getAggFunc(), pivotValueColumn, rowNode, secondaryCol);\n        });\n        secondaryColumns.forEach(secondaryCol => {\n            const { pivotValueColumn, pivotTotalColumnIds, colId } = secondaryCol.getColDef();\n            if (!_.exists(pivotTotalColumnIds)) {\n                return;\n            }\n            const aggResults = [];\n            //retrieve results for colIds associated with this pivot total column\n            if (!pivotTotalColumnIds || !pivotTotalColumnIds.length) {\n                return;\n            }\n            pivotTotalColumnIds.forEach((currentColId) => {\n                aggResults.push(result[currentColId]);\n            });\n            result[colId] = this.aggregateValues(aggResults, pivotValueColumn.getAggFunc(), pivotValueColumn, rowNode, secondaryCol);\n        });\n        return result;\n    }\n    aggregateRowNodeUsingValuesOnly(rowNode, aggDetails) {\n        const result = {};\n        const changedValueColumns = aggDetails.changedPath.isActive() ?\n            aggDetails.changedPath.getValueColumnsForNode(rowNode, aggDetails.valueColumns)\n            : aggDetails.valueColumns;\n        const notChangedValueColumns = aggDetails.changedPath.isActive() ?\n            aggDetails.changedPath.getNotValueColumnsForNode(rowNode, aggDetails.valueColumns)\n            : null;\n        const values2d = this.getValuesNormal(rowNode, changedValueColumns, aggDetails.filteredOnly);\n        const oldValues = rowNode.aggData;\n        changedValueColumns.forEach((valueColumn, index) => {\n            result[valueColumn.getId()] = this.aggregateValues(values2d[index], valueColumn.getAggFunc(), valueColumn, rowNode);\n        });\n        if (notChangedValueColumns && oldValues) {\n            notChangedValueColumns.forEach((valueColumn) => {\n                result[valueColumn.getId()] = oldValues[valueColumn.getId()];\n            });\n        }\n        return result;\n    }\n    getValuesPivotNonLeaf(rowNode, colId) {\n        const values = [];\n        rowNode.childrenAfterFilter.forEach((node) => {\n            const value = node.aggData[colId];\n            values.push(value);\n        });\n        return values;\n    }\n    getValuesFromMappedSet(mappedSet, keys, valueColumn) {\n        let mapPointer = mappedSet;\n        keys.forEach(key => (mapPointer = mapPointer ? mapPointer[key] : null));\n        if (!mapPointer) {\n            return [];\n        }\n        const values = [];\n        mapPointer.forEach((rowNode) => {\n            const value = this.valueService.getValue(valueColumn, rowNode);\n            values.push(value);\n        });\n        return values;\n    }\n    getValuesNormal(rowNode, valueColumns, filteredOnly) {\n        // create 2d array, of all values for all valueColumns\n        const values = [];\n        valueColumns.forEach(() => values.push([]));\n        const valueColumnCount = valueColumns.length;\n        const nodeList = filteredOnly ? rowNode.childrenAfterFilter : rowNode.childrenAfterGroup;\n        const rowCount = nodeList.length;\n        for (let i = 0; i < rowCount; i++) {\n            const childNode = nodeList[i];\n            for (let j = 0; j < valueColumnCount; j++) {\n                const valueColumn = valueColumns[j];\n                // if the row is a group, then it will only have an agg result value,\n                // which means valueGetter is never used.\n                const value = this.valueService.getValue(valueColumn, childNode);\n                values[j].push(value);\n            }\n        }\n        return values;\n    }\n    aggregateValues(values, aggFuncOrString, column, rowNode, pivotResultColumn) {\n        const aggFunc = typeof aggFuncOrString === 'string' ?\n            this.aggFuncService.getAggFunc(aggFuncOrString) :\n            aggFuncOrString;\n        if (typeof aggFunc !== 'function') {\n            console.error(`AG Grid: unrecognised aggregation function ${aggFuncOrString}`);\n            return null;\n        }\n        const aggFuncAny = aggFunc;\n        const params = {\n            values: values,\n            column: column,\n            colDef: column ? column.getColDef() : undefined,\n            pivotResultColumn: pivotResultColumn,\n            rowNode: rowNode,\n            data: rowNode ? rowNode.data : undefined,\n            api: this.gridOptionsService.api,\n            columnApi: this.gridOptionsService.columnApi,\n            context: this.gridOptionsService.context,\n        }; // the \"as any\" is needed to allow the deprecation warning messages\n        return aggFuncAny(params);\n    }\n};\n__decorate([\n    Autowired('columnModel')\n], AggregationStage.prototype, \"columnModel\", void 0);\n__decorate([\n    Autowired('valueService')\n], AggregationStage.prototype, \"valueService\", void 0);\n__decorate([\n    Autowired('aggFuncService')\n], AggregationStage.prototype, \"aggFuncService\", void 0);\nAggregationStage = __decorate([\n    Bean('aggregationStage')\n], AggregationStage);\nexport { AggregationStage };\n", "export class BatchRemover {\n    constructor() {\n        this.allSets = {};\n        this.allParents = [];\n    }\n    removeFromChildrenAfterGroup(parent, child) {\n        const set = this.getSet(parent);\n        set.removeFromChildrenAfterGroup[child.id] = true;\n    }\n    isRemoveFromAllLeafChildren(parent, child) {\n        const set = this.getSet(parent);\n        return !!set.removeFromAllLeafChildren[child.id];\n    }\n    preventRemoveFromAllLeafChildren(parent, child) {\n        const set = this.getSet(parent);\n        delete set.removeFromAllLeafChildren[child.id];\n    }\n    removeFromAllLeafChildren(parent, child) {\n        const set = this.getSet(parent);\n        set.removeFromAllLeafChildren[child.id] = true;\n    }\n    getSet(parent) {\n        if (!this.allSets[parent.id]) {\n            this.allSets[parent.id] = {\n                removeFromAllLeafChildren: {},\n                removeFromChildrenAfterGroup: {}\n            };\n            this.allParents.push(parent);\n        }\n        return this.allSets[parent.id];\n    }\n    getAllParents() {\n        return this.allParents;\n    }\n    flush() {\n        this.allParents.forEach(parent => {\n            const nodeDetails = this.allSets[parent.id];\n            parent.childrenAfterGroup = parent.childrenAfterGroup.filter(child => !nodeDetails.removeFromChildrenAfterGroup[child.id]);\n            parent.allLeafChildren = parent.allLeafChildren.filter(child => !nodeDetails.removeFromAllLeafChildren[child.id]);\n            parent.updateHasChildren();\n            if (parent.sibling) {\n                parent.sibling.childrenAfterGroup = parent.childrenAfterGroup;\n                parent.sibling.allLeafChildren = parent.allLeafChildren;\n            }\n        });\n        this.allSets = {};\n        this.allParents.length = 0;\n    }\n}\n", "var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { _, Autowired, Bean, BeanStub, NumberSequence, RowNode } from \"@ag-grid-community/core\";\nimport { BatchRemover } from \"./batchRemover.mjs\";\nlet GroupStage = class GroupStage extends BeanStub {\n    constructor() {\n        super(...arguments);\n        // we use a sequence variable so that each time we do a grouping, we don't\n        // reuse the ids - otherwise the rowRenderer will confuse rowNodes between redraws\n        // when it tries to animate between rows.\n        this.groupIdSequence = new NumberSequence();\n    }\n    execute(params) {\n        const details = this.createGroupingDetails(params);\n        if (details.transactions) {\n            this.handleTransaction(details);\n        }\n        else {\n            const afterColsChanged = params.afterColumnsChanged === true;\n            this.shotgunResetEverything(details, afterColsChanged);\n        }\n        if (!details.usingTreeData) {\n            // we don't do group sorting for tree data\n            this.positionLeafsAndGroups(params.changedPath);\n            this.orderGroups(details);\n        }\n        this.selectableService.updateSelectableAfterGrouping(details.rootNode);\n    }\n    positionLeafsAndGroups(changedPath) {\n        changedPath.forEachChangedNodeDepthFirst(group => {\n            if (group.childrenAfterGroup) {\n                const leafNodes = [];\n                const groupNodes = [];\n                let unbalancedNode;\n                group.childrenAfterGroup.forEach(row => {\n                    var _a;\n                    if (!((_a = row.childrenAfterGroup) === null || _a === void 0 ? void 0 : _a.length)) {\n                        leafNodes.push(row);\n                    }\n                    else {\n                        if (row.key === '' && !unbalancedNode) {\n                            unbalancedNode = row;\n                        }\n                        else {\n                            groupNodes.push(row);\n                        }\n                    }\n                });\n                if (unbalancedNode) {\n                    groupNodes.push(unbalancedNode);\n                }\n                group.childrenAfterGroup = [...leafNodes, ...groupNodes];\n            }\n        }, false);\n    }\n    createGroupingDetails(params) {\n        const { rowNode, changedPath, rowNodeTransactions, rowNodeOrder } = params;\n        const usingTreeData = this.gridOptionsService.is('treeData');\n        const groupedCols = usingTreeData ? null : this.columnModel.getRowGroupColumns();\n        const details = {\n            // someone complained that the parent attribute was causing some change detection\n            // to break in an angular add-on.  Taking the parent out breaks a cyclic dependency, hence this flag got introduced.\n            includeParents: !this.gridOptionsService.is('suppressParentsInRowNodes'),\n            expandByDefault: this.gridOptionsService.getNum('groupDefaultExpanded'),\n            groupedCols: groupedCols,\n            rootNode: rowNode,\n            pivotMode: this.columnModel.isPivotMode(),\n            groupedColCount: usingTreeData || !groupedCols ? 0 : groupedCols.length,\n            rowNodeOrder: rowNodeOrder,\n            transactions: rowNodeTransactions,\n            // if no transaction, then it's shotgun, changed path would be 'not active' at this point anyway\n            changedPath: changedPath,\n            groupAllowUnbalanced: this.gridOptionsService.is('groupAllowUnbalanced'),\n            isGroupOpenByDefault: this.gridOptionsService.getCallback('isGroupOpenByDefault'),\n            initialGroupOrderComparator: this.gridOptionsService.getCallback('initialGroupOrderComparator'),\n            createGroupFooter: this.gridOptionsService.isGroupIncludeFooterTrueOrCallback(),\n            usingTreeData: usingTreeData,\n            getDataPath: usingTreeData ? this.gridOptionsService.get('getDataPath') : undefined\n        };\n        return details;\n    }\n    handleTransaction(details) {\n        details.transactions.forEach(tran => {\n            // we don't allow batch remover for tree data as tree data uses Filler Nodes,\n            // and creating/deleting filler nodes needs to be done alongside the node deleting\n            // and moving. if we want to Batch Remover working with tree data then would need\n            // to consider how Filler Nodes would be impacted (it's possible that it can be easily\n            // modified to work, however for now I don't have the brain energy to work it all out).\n            const batchRemover = !details.usingTreeData ? new BatchRemover() : undefined;\n            // the order here of [add, remove, update] needs to be the same as in ClientSideNodeManager,\n            // as the order is important when a record with the same id is added and removed in the same\n            // transaction.\n            if (_.existsAndNotEmpty(tran.remove)) {\n                this.removeNodes(tran.remove, details, batchRemover);\n            }\n            if (_.existsAndNotEmpty(tran.update)) {\n                this.moveNodesInWrongPath(tran.update, details, batchRemover);\n            }\n            if (_.existsAndNotEmpty(tran.add)) {\n                this.insertNodes(tran.add, details, false);\n            }\n            // must flush here, and not allow another transaction to be applied,\n            // as each transaction must finish leaving the data in a consistent state.\n            if (batchRemover) {\n                const parentsWithChildrenRemoved = batchRemover.getAllParents().slice();\n                batchRemover.flush();\n                this.removeEmptyGroups(parentsWithChildrenRemoved, details);\n            }\n        });\n        if (details.rowNodeOrder) {\n            this.sortChildren(details);\n        }\n    }\n    // this is used when doing delta updates, eg Redux, keeps nodes in right order\n    sortChildren(details) {\n        details.changedPath.forEachChangedNodeDepthFirst(node => {\n            if (!node.childrenAfterGroup) {\n                return;\n            }\n            const didSort = _.sortRowNodesByOrder(node.childrenAfterGroup, details.rowNodeOrder);\n            if (didSort) {\n                details.changedPath.addParentNode(node);\n            }\n        }, false, true);\n    }\n    orderGroups(details) {\n        const comparator = details.initialGroupOrderComparator;\n        if (_.exists(comparator)) {\n            recursiveSort(details.rootNode);\n        }\n        function recursiveSort(rowNode) {\n            const doSort = _.exists(rowNode.childrenAfterGroup) &&\n                // we only want to sort groups, so we do not sort leafs (a leaf group has leafs as children)\n                !rowNode.leafGroup;\n            if (doSort) {\n                rowNode.childrenAfterGroup.sort((nodeA, nodeB) => comparator({ nodeA, nodeB }));\n                rowNode.childrenAfterGroup.forEach((childNode) => recursiveSort(childNode));\n            }\n        }\n    }\n    getExistingPathForNode(node, details) {\n        const res = [];\n        // when doing tree data, the node is part of the path,\n        // but when doing grid grouping, the node is not part of the path so we start with the parent.\n        let pointer = details.usingTreeData ? node : node.parent;\n        while (pointer && pointer !== details.rootNode) {\n            res.push({\n                key: pointer.key,\n                rowGroupColumn: pointer.rowGroupColumn,\n                field: pointer.field\n            });\n            pointer = pointer.parent;\n        }\n        res.reverse();\n        return res;\n    }\n    moveNodesInWrongPath(childNodes, details, batchRemover) {\n        childNodes.forEach(childNode => {\n            // we add node, even if parent has not changed, as the data could have\n            // changed, hence aggregations will be wrong\n            if (details.changedPath.isActive()) {\n                details.changedPath.addParentNode(childNode.parent);\n            }\n            const infoToKeyMapper = (item) => item.key;\n            const oldPath = this.getExistingPathForNode(childNode, details).map(infoToKeyMapper);\n            const newPath = this.getGroupInfo(childNode, details).map(infoToKeyMapper);\n            const nodeInCorrectPath = _.areEqual(oldPath, newPath);\n            if (!nodeInCorrectPath) {\n                this.moveNode(childNode, details, batchRemover);\n            }\n        });\n    }\n    moveNode(childNode, details, batchRemover) {\n        this.removeNodesInStages([childNode], details, batchRemover);\n        this.insertOneNode(childNode, details, true, batchRemover);\n        // hack - if we didn't do this, then renaming a tree item (ie changing rowNode.key) wouldn't get\n        // refreshed into the gui.\n        // this is needed to kick off the event that rowComp listens to for refresh. this in turn\n        // then will get each cell in the row to refresh - which is what we need as we don't know which\n        // columns will be displaying the rowNode.key info.\n        childNode.setData(childNode.data);\n        // we add both old and new parents to changed path, as both will need to be refreshed.\n        // we already added the old parent (in calling method), so just add the new parent here\n        if (details.changedPath.isActive()) {\n            const newParent = childNode.parent;\n            details.changedPath.addParentNode(newParent);\n        }\n    }\n    removeNodes(leafRowNodes, details, batchRemover) {\n        this.removeNodesInStages(leafRowNodes, details, batchRemover);\n        if (details.changedPath.isActive()) {\n            leafRowNodes.forEach(rowNode => details.changedPath.addParentNode(rowNode.parent));\n        }\n    }\n    removeNodesInStages(leafRowNodes, details, batchRemover) {\n        this.removeNodesFromParents(leafRowNodes, details, batchRemover);\n        if (details.usingTreeData) {\n            this.postRemoveCreateFillerNodes(leafRowNodes, details);\n            // When not TreeData, then removeEmptyGroups is called just before the BatchRemover is flushed.\n            // However for TreeData, there is no BatchRemover, so we have to call removeEmptyGroups here.\n            const nodeParents = leafRowNodes.map(n => n.parent);\n            this.removeEmptyGroups(nodeParents, details);\n        }\n    }\n    forEachParentGroup(details, group, callback) {\n        let pointer = group;\n        while (pointer && pointer !== details.rootNode) {\n            callback(pointer);\n            pointer = pointer.parent;\n        }\n    }\n    removeNodesFromParents(nodesToRemove, details, provided) {\n        // this method can be called with BatchRemover as optional. if it is missed, we created a local version\n        // and flush it at the end. if one is provided, we add to the provided one and it gets flushed elsewhere.\n        const batchRemoverIsLocal = provided == null;\n        const batchRemoverToUse = provided ? provided : new BatchRemover();\n        nodesToRemove.forEach(nodeToRemove => {\n            this.removeFromParent(nodeToRemove, batchRemoverToUse);\n            // remove from allLeafChildren. we clear down all parents EXCEPT the Root Node, as\n            // the ClientSideNodeManager is responsible for the Root Node.\n            this.forEachParentGroup(details, nodeToRemove.parent, parentNode => {\n                batchRemoverToUse.removeFromAllLeafChildren(parentNode, nodeToRemove);\n            });\n        });\n        if (batchRemoverIsLocal) {\n            batchRemoverToUse.flush();\n        }\n    }\n    postRemoveCreateFillerNodes(nodesToRemove, details) {\n        nodesToRemove.forEach(nodeToRemove => {\n            // if not group, and children are present, need to move children to a group.\n            // otherwise if no children, we can just remove without replacing.\n            const replaceWithGroup = nodeToRemove.hasChildren();\n            if (replaceWithGroup) {\n                const oldPath = this.getExistingPathForNode(nodeToRemove, details);\n                // because we just removed the userGroup, this will always return new support group\n                const newGroupNode = this.findParentForNode(nodeToRemove, oldPath, details);\n                // these properties are the ones that will be incorrect in the newly created group,\n                // so copy them from the old childNode\n                newGroupNode.expanded = nodeToRemove.expanded;\n                newGroupNode.allLeafChildren = nodeToRemove.allLeafChildren;\n                newGroupNode.childrenAfterGroup = nodeToRemove.childrenAfterGroup;\n                newGroupNode.childrenMapped = nodeToRemove.childrenMapped;\n                newGroupNode.updateHasChildren();\n                newGroupNode.childrenAfterGroup.forEach(rowNode => rowNode.parent = newGroupNode);\n            }\n        });\n    }\n    removeEmptyGroups(possibleEmptyGroups, details) {\n        // we do this multiple times, as when we remove groups, that means the parent of just removed\n        // group can then be empty. to get around this, if we remove, then we check everything again for\n        // newly emptied groups. the max number of times this will execute is the depth of the group tree.\n        let checkAgain = true;\n        const groupShouldBeRemoved = (rowNode) => {\n            // because of the while loop below, it's possible we already moved the node,\n            // so double check before trying to remove again.\n            const mapKey = this.getChildrenMappedKey(rowNode.key, rowNode.rowGroupColumn);\n            const parentRowNode = rowNode.parent;\n            const groupAlreadyRemoved = (parentRowNode && parentRowNode.childrenMapped) ?\n                !parentRowNode.childrenMapped[mapKey] : true;\n            if (groupAlreadyRemoved) {\n                // if not linked, then group was already removed\n                return false;\n            }\n            // if still not removed, then we remove if this group is empty\n            return !!rowNode.isEmptyRowGroupNode();\n        };\n        while (checkAgain) {\n            checkAgain = false;\n            const batchRemover = new BatchRemover();\n            possibleEmptyGroups.forEach(possibleEmptyGroup => {\n                // remove empty groups\n                this.forEachParentGroup(details, possibleEmptyGroup, rowNode => {\n                    if (groupShouldBeRemoved(rowNode)) {\n                        checkAgain = true;\n                        this.removeFromParent(rowNode, batchRemover);\n                        // we remove selection on filler nodes here, as the selection would not be removed\n                        // from the RowNodeManager, as filler nodes don't exist on the RowNodeManager\n                        rowNode.setSelectedParams({ newValue: false, source: 'rowGroupChanged' });\n                    }\n                });\n            });\n            batchRemover.flush();\n        }\n    }\n    // removes the node from the parent by:\n    // a) removing from childrenAfterGroup (using batchRemover if present, otherwise immediately)\n    // b) removing from childrenMapped (immediately)\n    // c) setRowTop(null) - as the rowRenderer uses this to know the RowNode is no longer needed\n    // d) setRowIndex(null) - as the rowNode will no longer be displayed.\n    removeFromParent(child, batchRemover) {\n        if (child.parent) {\n            if (batchRemover) {\n                batchRemover.removeFromChildrenAfterGroup(child.parent, child);\n            }\n            else {\n                _.removeFromArray(child.parent.childrenAfterGroup, child);\n                child.parent.updateHasChildren();\n            }\n        }\n        const mapKey = this.getChildrenMappedKey(child.key, child.rowGroupColumn);\n        if (child.parent && child.parent.childrenMapped) {\n            child.parent.childrenMapped[mapKey] = undefined;\n        }\n        // this is important for transition, see rowComp removeFirstPassFuncs. when doing animation and\n        // remove, if rowTop is still present, the rowComp thinks it's just moved position.\n        child.setRowTop(null);\n        child.setRowIndex(null);\n    }\n    addToParent(child, parent) {\n        const mapKey = this.getChildrenMappedKey(child.key, child.rowGroupColumn);\n        if (parent) {\n            const children = parent.childrenMapped != null;\n            if (children) {\n                parent.childrenMapped[mapKey] = child;\n            }\n            parent.childrenAfterGroup.push(child);\n            parent.updateHasChildren();\n        }\n    }\n    areGroupColsEqual(d1, d2) {\n        if (d1 == null || d2 == null || d1.pivotMode !== d2.pivotMode) {\n            return false;\n        }\n        return _.areEqual(d1.groupedCols, d2.groupedCols);\n    }\n    checkAllGroupDataAfterColsChanged(details) {\n        const recurse = (rowNodes) => {\n            if (!rowNodes) {\n                return;\n            }\n            rowNodes.forEach(rowNode => {\n                const isLeafNode = !details.usingTreeData && !rowNode.group;\n                if (isLeafNode) {\n                    return;\n                }\n                const groupInfo = {\n                    field: rowNode.field,\n                    key: rowNode.key,\n                    rowGroupColumn: rowNode.rowGroupColumn\n                };\n                this.setGroupData(rowNode, groupInfo, details);\n                recurse(rowNode.childrenAfterGroup);\n            });\n        };\n        recurse(details.rootNode.childrenAfterGroup);\n    }\n    shotgunResetEverything(details, afterColumnsChanged) {\n        if (this.noChangeInGroupingColumns(details, afterColumnsChanged)) {\n            return;\n        }\n        // groups are about to get disposed, so need to deselect any that are selected\n        this.selectionService.filterFromSelection((node) => node && !node.group);\n        const { rootNode, groupedCols } = details;\n        // because we are not creating the root node each time, we have the logic\n        // here to change leafGroup once.\n        // we set .leafGroup to false for tree data, as .leafGroup is only used when pivoting, and pivoting\n        // isn't allowed with treeData, so the grid never actually use .leafGroup when doing treeData.\n        rootNode.leafGroup = details.usingTreeData ? false : groupedCols.length === 0;\n        // we are doing everything from scratch, so reset childrenAfterGroup and childrenMapped from the rootNode\n        rootNode.childrenAfterGroup = [];\n        rootNode.childrenMapped = {};\n        rootNode.updateHasChildren();\n        const sibling = rootNode.sibling;\n        if (sibling) {\n            sibling.childrenAfterGroup = rootNode.childrenAfterGroup;\n            sibling.childrenMapped = rootNode.childrenMapped;\n        }\n        this.insertNodes(rootNode.allLeafChildren, details, false);\n    }\n    noChangeInGroupingColumns(details, afterColumnsChanged) {\n        let noFurtherProcessingNeeded = false;\n        const groupDisplayColumns = this.columnModel.getGroupDisplayColumns();\n        const newGroupDisplayColIds = groupDisplayColumns ?\n            groupDisplayColumns.map(c => c.getId()).join('-') : '';\n        if (afterColumnsChanged) {\n            // we only need to redo grouping if doing normal grouping (ie not tree data)\n            // and the group cols have changed.\n            noFurtherProcessingNeeded = details.usingTreeData || this.areGroupColsEqual(details, this.oldGroupingDetails);\n            // if the group display cols have changed, then we need to update rowNode.groupData\n            // (regardless of tree data or row grouping)\n            if (this.oldGroupDisplayColIds !== newGroupDisplayColIds) {\n                this.checkAllGroupDataAfterColsChanged(details);\n            }\n        }\n        this.oldGroupingDetails = details;\n        this.oldGroupDisplayColIds = newGroupDisplayColIds;\n        return noFurtherProcessingNeeded;\n    }\n    insertNodes(newRowNodes, details, isMove) {\n        newRowNodes.forEach(rowNode => {\n            this.insertOneNode(rowNode, details, isMove);\n            if (details.changedPath.isActive()) {\n                details.changedPath.addParentNode(rowNode.parent);\n            }\n        });\n    }\n    insertOneNode(childNode, details, isMove, batchRemover) {\n        const path = this.getGroupInfo(childNode, details);\n        const parentGroup = this.findParentForNode(childNode, path, details, batchRemover);\n        if (!parentGroup.group) {\n            console.warn(`AG Grid: duplicate group keys for row data, keys should be unique`, [parentGroup.data, childNode.data]);\n        }\n        if (details.usingTreeData) {\n            this.swapGroupWithUserNode(parentGroup, childNode, isMove);\n        }\n        else {\n            childNode.parent = parentGroup;\n            childNode.level = path.length;\n            parentGroup.childrenAfterGroup.push(childNode);\n            parentGroup.updateHasChildren();\n        }\n    }\n    findParentForNode(childNode, path, details, batchRemover) {\n        let nextNode = details.rootNode;\n        path.forEach((groupInfo, level) => {\n            nextNode = this.getOrCreateNextNode(nextNode, groupInfo, level, details);\n            // node gets added to all group nodes.\n            // note: we do not add to rootNode here, as the rootNode is the master list of rowNodes\n            if (!(batchRemover === null || batchRemover === void 0 ? void 0 : batchRemover.isRemoveFromAllLeafChildren(nextNode, childNode))) {\n                nextNode.allLeafChildren.push(childNode);\n            }\n            else {\n                // if this node is about to be removed, prevent that\n                batchRemover === null || batchRemover === void 0 ? void 0 : batchRemover.preventRemoveFromAllLeafChildren(nextNode, childNode);\n            }\n        });\n        return nextNode;\n    }\n    swapGroupWithUserNode(fillerGroup, userGroup, isMove) {\n        userGroup.parent = fillerGroup.parent;\n        userGroup.key = fillerGroup.key;\n        userGroup.field = fillerGroup.field;\n        userGroup.groupData = fillerGroup.groupData;\n        userGroup.level = fillerGroup.level;\n        // AG-3441 - preserve the existing expanded status of the node if we're moving it, so that\n        // you can drag a sub tree from one parent to another without changing its expansion\n        if (!isMove) {\n            userGroup.expanded = fillerGroup.expanded;\n        }\n        // we set .leafGroup to false for tree data, as .leafGroup is only used when pivoting, and pivoting\n        // isn't allowed with treeData, so the grid never actually use .leafGroup when doing treeData.\n        userGroup.leafGroup = fillerGroup.leafGroup;\n        // always null for userGroups, as row grouping is not allowed when doing tree data\n        userGroup.rowGroupIndex = fillerGroup.rowGroupIndex;\n        userGroup.allLeafChildren = fillerGroup.allLeafChildren;\n        userGroup.childrenAfterGroup = fillerGroup.childrenAfterGroup;\n        userGroup.childrenMapped = fillerGroup.childrenMapped;\n        userGroup.sibling = fillerGroup.sibling;\n        userGroup.updateHasChildren();\n        this.removeFromParent(fillerGroup);\n        userGroup.childrenAfterGroup.forEach((rowNode) => rowNode.parent = userGroup);\n        this.addToParent(userGroup, fillerGroup.parent);\n    }\n    getOrCreateNextNode(parentGroup, groupInfo, level, details) {\n        const key = this.getChildrenMappedKey(groupInfo.key, groupInfo.rowGroupColumn);\n        let nextNode = parentGroup.childrenMapped ? parentGroup.childrenMapped[key] : undefined;\n        if (!nextNode) {\n            nextNode = this.createGroup(groupInfo, parentGroup, level, details);\n            // attach the new group to the parent\n            this.addToParent(nextNode, parentGroup);\n        }\n        return nextNode;\n    }\n    createGroup(groupInfo, parent, level, details) {\n        const groupNode = new RowNode(this.beans);\n        groupNode.group = true;\n        groupNode.field = groupInfo.field;\n        groupNode.rowGroupColumn = groupInfo.rowGroupColumn;\n        this.setGroupData(groupNode, groupInfo, details);\n        // we put 'row-group-' before the group id, so it doesn't clash with standard row id's. we also use 't-' and 'b-'\n        // for top pinned and bottom pinned rows.\n        groupNode.id = RowNode.ID_PREFIX_ROW_GROUP + this.groupIdSequence.next();\n        groupNode.key = groupInfo.key;\n        groupNode.level = level;\n        groupNode.leafGroup = details.usingTreeData ? false : level === (details.groupedColCount - 1);\n        groupNode.allLeafChildren = [];\n        // why is this done here? we are not updating the children count as we go,\n        // i suspect this is updated in the filter stage\n        groupNode.setAllChildrenCount(0);\n        groupNode.rowGroupIndex = details.usingTreeData ? null : level;\n        groupNode.childrenAfterGroup = [];\n        groupNode.childrenMapped = {};\n        groupNode.updateHasChildren();\n        groupNode.parent = details.includeParents ? parent : null;\n        this.setExpandedInitialValue(details, groupNode);\n        return groupNode;\n    }\n    setGroupData(groupNode, groupInfo, details) {\n        groupNode.groupData = {};\n        const groupDisplayCols = this.columnModel.getGroupDisplayColumns();\n        groupDisplayCols.forEach(col => {\n            // newGroup.rowGroupColumn=null when working off GroupInfo, and we always display the group in the group column\n            // if rowGroupColumn is present, then it's grid row grouping and we only include if configuration says so\n            const displayGroupForCol = details.usingTreeData || (groupNode.rowGroupColumn ? col.isRowGroupDisplayed(groupNode.rowGroupColumn.getId()) : false);\n            if (displayGroupForCol) {\n                groupNode.groupData[col.getColId()] = groupInfo.key;\n            }\n        });\n    }\n    getChildrenMappedKey(key, rowGroupColumn) {\n        if (rowGroupColumn) {\n            // grouping by columns\n            return rowGroupColumn.getId() + '-' + key;\n        }\n        // tree data - we don't have rowGroupColumns\n        return key;\n    }\n    setExpandedInitialValue(details, groupNode) {\n        // if pivoting the leaf group is never expanded as we do not show leaf rows\n        if (details.pivotMode && groupNode.leafGroup) {\n            groupNode.expanded = false;\n            return;\n        }\n        // use callback if exists\n        const userCallback = details.isGroupOpenByDefault;\n        if (userCallback) {\n            const params = {\n                rowNode: groupNode,\n                field: groupNode.field,\n                key: groupNode.key,\n                level: groupNode.level,\n                rowGroupColumn: groupNode.rowGroupColumn\n            };\n            groupNode.expanded = userCallback(params) == true;\n            return;\n        }\n        // use expandByDefault if exists\n        const { expandByDefault } = details;\n        if (details.expandByDefault === -1) {\n            groupNode.expanded = true;\n            return;\n        }\n        // otherwise\n        groupNode.expanded = groupNode.level < expandByDefault;\n    }\n    getGroupInfo(rowNode, details) {\n        if (details.usingTreeData) {\n            return this.getGroupInfoFromCallback(rowNode, details);\n        }\n        return this.getGroupInfoFromGroupColumns(rowNode, details);\n    }\n    getGroupInfoFromCallback(rowNode, details) {\n        const keys = details.getDataPath ? details.getDataPath(rowNode.data) : null;\n        if (keys === null || keys === undefined || keys.length === 0) {\n            _.doOnce(() => console.warn(`AG Grid: getDataPath() should not return an empty path for data`, rowNode.data), 'groupStage.getGroupInfoFromCallback');\n        }\n        const groupInfoMapper = (key) => ({ key, field: null, rowGroupColumn: null });\n        return keys ? keys.map(groupInfoMapper) : [];\n    }\n    getGroupInfoFromGroupColumns(rowNode, details) {\n        const res = [];\n        details.groupedCols.forEach(groupCol => {\n            let key = this.valueService.getKeyForNode(groupCol, rowNode);\n            let keyExists = key !== null && key !== undefined && key !== '';\n            // unbalanced tree and pivot mode don't work together - not because of the grid, it doesn't make\n            // mathematical sense as you are building up a cube. so if pivot mode, we put in a blank key where missing.\n            // this keeps the tree balanced and hence can be represented as a group.\n            const createGroupForEmpty = details.pivotMode || !details.groupAllowUnbalanced;\n            if (createGroupForEmpty && !keyExists) {\n                key = '';\n                keyExists = true;\n            }\n            if (keyExists) {\n                const item = {\n                    key: key,\n                    field: groupCol.getColDef().field,\n                    rowGroupColumn: groupCol\n                };\n                res.push(item);\n            }\n        });\n        return res;\n    }\n};\n__decorate([\n    Autowired('columnModel')\n], GroupStage.prototype, \"columnModel\", void 0);\n__decorate([\n    Autowired('selectableService')\n], GroupStage.prototype, \"selectableService\", void 0);\n__decorate([\n    Autowired('valueService')\n], GroupStage.prototype, \"valueService\", void 0);\n__decorate([\n    Autowired('beans')\n], GroupStage.prototype, \"beans\", void 0);\n__decorate([\n    Autowired('selectionService')\n], GroupStage.prototype, \"selectionService\", void 0);\nGroupStage = __decorate([\n    Bean('groupStage')\n], GroupStage);\nexport { GroupStage };\n", "var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar PivotColDefService_1;\nimport { Autowired, Bean, BeanStub, PostConstruct, _ } from \"@ag-grid-community/core\";\nlet PivotColDefService = PivotColDefService_1 = class PivotColDefService extends BeanStub {\n    init() {\n        const getFieldSeparator = () => { var _a; return (_a = this.gos.get('serverSidePivotResultFieldSeparator')) !== null && _a !== void 0 ? _a : '_'; };\n        this.fieldSeparator = getFieldSeparator();\n        this.addManagedPropertyListener('serverSidePivotResultFieldSeparator', () => { this.fieldSeparator = getFieldSeparator(); });\n        const getPivotDefaultExpanded = () => { var _a; return (_a = this.gos.getNum('pivotDefaultExpanded')) !== null && _a !== void 0 ? _a : 0; };\n        this.pivotDefaultExpanded = getPivotDefaultExpanded();\n        this.addManagedPropertyListener('pivotDefaultExpanded', () => { this.pivotDefaultExpanded = getPivotDefaultExpanded(); });\n    }\n    createPivotColumnDefs(uniqueValues) {\n        // this is passed to the columnModel, to configure the columns and groups we show\n        const pivotColumnGroupDefs = this.createPivotColumnsFromUniqueValues(uniqueValues);\n        function extractColDefs(input, arr = []) {\n            input.forEach((def) => {\n                if (def.children !== undefined) {\n                    extractColDefs(def.children, arr);\n                }\n                else {\n                    arr.push(def);\n                }\n            });\n            return arr;\n        }\n        const pivotColumnDefs = extractColDefs(pivotColumnGroupDefs);\n        // additional columns that contain the aggregated total for each value column per row\n        this.addRowGroupTotals(pivotColumnGroupDefs, pivotColumnDefs);\n        // additional group columns that contain child totals for each collapsed child column / group\n        this.addExpandablePivotGroups(pivotColumnGroupDefs, pivotColumnDefs);\n        // additional group columns that contain an aggregated total across all child columns\n        this.addPivotTotalsToGroups(pivotColumnGroupDefs, pivotColumnDefs);\n        // we clone, so the colDefs in pivotColumnsGroupDefs and pivotColumnDefs are not shared. this is so that\n        // any changes the user makes (via processSecondaryColumnDefinitions) don't impact the internal aggregations,\n        // as these use the col defs also\n        const pivotColumnDefsClone = pivotColumnDefs.map(colDef => _.cloneObject(colDef));\n        return {\n            pivotColumnGroupDefs: pivotColumnGroupDefs,\n            pivotColumnDefs: pivotColumnDefsClone\n        };\n    }\n    createPivotColumnsFromUniqueValues(uniqueValues) {\n        const pivotColumns = this.columnModel.getPivotColumns();\n        const maxDepth = pivotColumns.length;\n        const pivotColumnGroupDefs = this.recursivelyBuildGroup(0, uniqueValues, [], maxDepth, pivotColumns);\n        return pivotColumnGroupDefs;\n    }\n    recursivelyBuildGroup(index, uniqueValue, pivotKeys, maxDepth, primaryPivotColumns) {\n        const measureColumns = this.columnModel.getValueColumns();\n        if (index >= maxDepth) { // Base case - build the measure columns\n            return this.buildMeasureCols(pivotKeys);\n        }\n        // sort by either user provided comparator, or our own one\n        const primaryPivotColumnDefs = primaryPivotColumns[index].getColDef();\n        const comparator = this.headerNameComparator.bind(this, primaryPivotColumnDefs.pivotComparator);\n        // Base case for the compact layout, instead of recursing build the last layer of groups as measure columns instead\n        if (measureColumns.length === 1 && this.gridOptionsService.is('removePivotHeaderRowWhenSingleValueColumn') && index === maxDepth - 1) {\n            const leafCols = [];\n            _.iterateObject(uniqueValue, (key) => {\n                const newPivotKeys = [...pivotKeys, key];\n                const colDef = this.createColDef(measureColumns[0], key, newPivotKeys);\n                colDef.columnGroupShow = 'open';\n                leafCols.push(colDef);\n            });\n            leafCols.sort(comparator);\n            return leafCols;\n        }\n        // Recursive case\n        const groups = [];\n        _.iterateObject(uniqueValue, (key, value) => {\n            // expand group by default based on depth of group. (pivotDefaultExpanded provides desired level of depth for expanding group by default)\n            const openByDefault = this.pivotDefaultExpanded === -1 || (index < this.pivotDefaultExpanded);\n            const newPivotKeys = [...pivotKeys, key];\n            groups.push({\n                children: this.recursivelyBuildGroup(index + 1, value, newPivotKeys, maxDepth, primaryPivotColumns),\n                headerName: key,\n                pivotKeys: newPivotKeys,\n                columnGroupShow: 'open',\n                openByDefault: openByDefault,\n                groupId: this.generateColumnGroupId(newPivotKeys),\n            });\n        });\n        groups.sort(comparator);\n        return groups;\n    }\n    buildMeasureCols(pivotKeys) {\n        const measureColumns = this.columnModel.getValueColumns();\n        if (measureColumns.length === 0) {\n            // if no value columns selected, then we insert one blank column, so the user at least sees columns\n            // rendered. otherwise the grid would render with no columns (just empty groups) which would give the\n            // impression that the grid is broken\n            return [this.createColDef(null, '-', pivotKeys)];\n        }\n        return measureColumns.map((measureCol) => {\n            const columnName = this.columnModel.getDisplayNameForColumn(measureCol, 'header');\n            return Object.assign(Object.assign({}, this.createColDef(measureCol, columnName, pivotKeys)), { columnGroupShow: 'open' });\n        });\n    }\n    ;\n    addExpandablePivotGroups(pivotColumnGroupDefs, pivotColumnDefs) {\n        if (this.gridOptionsService.is('suppressExpandablePivotGroups') ||\n            this.gridOptionsService.get('pivotColumnGroupTotals')) {\n            return;\n        }\n        const recursivelyAddSubTotals = (groupDef, currentPivotColumnDefs, acc) => {\n            const group = groupDef;\n            if (group.children) {\n                const childAcc = new Map();\n                group.children.forEach((grp) => {\n                    recursivelyAddSubTotals(grp, currentPivotColumnDefs, childAcc);\n                });\n                const firstGroup = !group.children.some(child => child.children);\n                this.columnModel.getValueColumns().forEach(valueColumn => {\n                    const columnName = this.columnModel.getDisplayNameForColumn(valueColumn, 'header');\n                    const totalColDef = this.createColDef(valueColumn, columnName, groupDef.pivotKeys);\n                    totalColDef.pivotTotalColumnIds = childAcc.get(valueColumn.getColId());\n                    totalColDef.columnGroupShow = 'closed';\n                    totalColDef.aggFunc = valueColumn.getAggFunc();\n                    if (!firstGroup) {\n                        // add total colDef to group and pivot colDefs array\n                        const children = groupDef.children;\n                        children.push(totalColDef);\n                        currentPivotColumnDefs.push(totalColDef);\n                    }\n                });\n                this.merge(acc, childAcc);\n            }\n            else {\n                const def = groupDef;\n                // check that value column exists, i.e. aggFunc is supplied\n                if (!def.pivotValueColumn) {\n                    return;\n                }\n                const pivotValueColId = def.pivotValueColumn.getColId();\n                const arr = acc.has(pivotValueColId) ? acc.get(pivotValueColId) : [];\n                arr.push(def.colId);\n                acc.set(pivotValueColId, arr);\n            }\n        };\n        pivotColumnGroupDefs.forEach((groupDef) => {\n            recursivelyAddSubTotals(groupDef, pivotColumnDefs, new Map());\n        });\n    }\n    addPivotTotalsToGroups(pivotColumnGroupDefs, pivotColumnDefs) {\n        if (!this.gridOptionsService.get('pivotColumnGroupTotals')) {\n            return;\n        }\n        const insertAfter = this.gridOptionsService.get('pivotColumnGroupTotals') === 'after';\n        const valueCols = this.columnModel.getValueColumns();\n        const aggFuncs = valueCols.map(valueCol => valueCol.getAggFunc());\n        // don't add pivot totals if there is less than 1 aggFunc or they are not all the same\n        if (!aggFuncs || aggFuncs.length < 1 || !this.sameAggFuncs(aggFuncs)) {\n            // console.warn('AG Grid: aborting adding pivot total columns - value columns require same aggFunc');\n            return;\n        }\n        // arbitrarily select a value column to use as a template for pivot columns\n        const valueColumn = valueCols[0];\n        pivotColumnGroupDefs.forEach((groupDef) => {\n            this.recursivelyAddPivotTotal(groupDef, pivotColumnDefs, valueColumn, insertAfter);\n        });\n    }\n    recursivelyAddPivotTotal(groupDef, pivotColumnDefs, valueColumn, insertAfter) {\n        const group = groupDef;\n        if (!group.children) {\n            const def = groupDef;\n            return def.colId ? [def.colId] : null;\n        }\n        let colIds = [];\n        // need to recurse children first to obtain colIds used in the aggregation stage\n        group.children\n            .forEach((grp) => {\n            const childColIds = this.recursivelyAddPivotTotal(grp, pivotColumnDefs, valueColumn, insertAfter);\n            if (childColIds) {\n                colIds = colIds.concat(childColIds);\n            }\n        });\n        // only add total colDef if there is more than 1 child node\n        if (group.children.length > 1) {\n            const localeTextFunc = this.localeService.getLocaleTextFunc();\n            const headerName = localeTextFunc('pivotColumnGroupTotals', 'Total');\n            //create total colDef using an arbitrary value column as a template\n            const totalColDef = this.createColDef(valueColumn, headerName, groupDef.pivotKeys, true);\n            totalColDef.pivotTotalColumnIds = colIds;\n            totalColDef.aggFunc = valueColumn.getAggFunc();\n            // add total colDef to group and pivot colDefs array\n            const children = groupDef.children;\n            insertAfter ? children.push(totalColDef) : children.unshift(totalColDef);\n            pivotColumnDefs.push(totalColDef);\n        }\n        return colIds;\n    }\n    addRowGroupTotals(pivotColumnGroupDefs, pivotColumnDefs) {\n        if (!this.gridOptionsService.get('pivotRowTotals')) {\n            return;\n        }\n        const insertAfter = this.gridOptionsService.get('pivotRowTotals') === 'after';\n        const valueColumns = this.columnModel.getValueColumns();\n        // order of row group totals depends on position\n        const valueCols = insertAfter ? valueColumns.slice() : valueColumns.slice().reverse();\n        for (let i = 0; i < valueCols.length; i++) {\n            const valueCol = valueCols[i];\n            let colIds = [];\n            pivotColumnGroupDefs.forEach((groupDef) => {\n                colIds = colIds.concat(this.extractColIdsForValueColumn(groupDef, valueCol));\n            });\n            const withGroup = valueCols.length > 1 || !this.gridOptionsService.is('removePivotHeaderRowWhenSingleValueColumn');\n            this.createRowGroupTotal(pivotColumnGroupDefs, pivotColumnDefs, valueCol, colIds, insertAfter, withGroup);\n        }\n    }\n    extractColIdsForValueColumn(groupDef, valueColumn) {\n        const group = groupDef;\n        if (!group.children) {\n            const colDef = group;\n            return colDef.pivotValueColumn === valueColumn && colDef.colId ? [colDef.colId] : [];\n        }\n        let colIds = [];\n        group.children\n            .forEach((grp) => {\n            this.extractColIdsForValueColumn(grp, valueColumn);\n            const childColIds = this.extractColIdsForValueColumn(grp, valueColumn);\n            colIds = colIds.concat(childColIds);\n        });\n        return colIds;\n    }\n    createRowGroupTotal(parentChildren, pivotColumnDefs, valueColumn, colIds, insertAfter, addGroup) {\n        const measureColumns = this.columnModel.getValueColumns();\n        let colDef;\n        if (measureColumns.length === 0) {\n            colDef = this.createColDef(null, '-', []);\n        }\n        else {\n            const columnName = this.columnModel.getDisplayNameForColumn(valueColumn, 'header');\n            colDef = this.createColDef(valueColumn, columnName, []);\n            colDef.pivotTotalColumnIds = colIds;\n        }\n        colDef.colId = PivotColDefService_1.PIVOT_ROW_TOTAL_PREFIX + colDef.colId;\n        pivotColumnDefs.push(colDef);\n        const valueGroup = addGroup ? {\n            children: [colDef],\n            pivotKeys: [],\n            groupId: `${PivotColDefService_1.PIVOT_ROW_TOTAL_PREFIX}_pivotGroup_${valueColumn.getColId()}`,\n        } : colDef;\n        insertAfter ? parentChildren.push(valueGroup) : parentChildren.unshift(valueGroup);\n    }\n    createColDef(valueColumn, headerName, pivotKeys, totalColumn = false) {\n        const colDef = {};\n        // This is null when there are no measure columns and we're creating placeholder columns\n        if (valueColumn) {\n            const colDefToCopy = valueColumn.getColDef();\n            Object.assign(colDef, colDefToCopy);\n            // even if original column was hidden, we always show the pivot value column, otherwise it would be\n            // very confusing for people thinking the pivot is broken\n            colDef.hide = false;\n        }\n        colDef.headerName = headerName;\n        colDef.colId = this.generateColumnId(pivotKeys || [], valueColumn && !totalColumn ? valueColumn.getColId() : '');\n        // pivot columns repeat over field, so it makes sense to use the unique id instead. For example if you want to\n        // assign values to pinned bottom rows using setPinnedBottomRowData the value service will use this colId.\n        colDef.field = colDef.colId;\n        // this is to support using pinned rows, normally the data will be extracted from the aggData object using the colId\n        // however pinned rows still access the data object by field, this prevents values with dots from being treated as complex objects\n        colDef.valueGetter = (params) => { var _a; return (_a = params.data) === null || _a === void 0 ? void 0 : _a[params.colDef.field]; };\n        colDef.pivotKeys = pivotKeys;\n        colDef.pivotValueColumn = valueColumn;\n        if (colDef.filter === true) {\n            colDef.filter = 'agNumberColumnFilter';\n        }\n        return colDef;\n    }\n    sameAggFuncs(aggFuncs) {\n        if (aggFuncs.length == 1) {\n            return true;\n        }\n        //check if all aggFunc's match\n        for (let i = 1; i < aggFuncs.length; i++) {\n            if (aggFuncs[i] !== aggFuncs[0]) {\n                return false;\n            }\n        }\n        return true;\n    }\n    headerNameComparator(userComparator, a, b) {\n        if (userComparator) {\n            return userComparator(a.headerName, b.headerName);\n        }\n        else {\n            if (a.headerName && !b.headerName) {\n                return 1;\n            }\n            else if (!a.headerName && b.headerName) {\n                return -1;\n            }\n            // slightly naff here - just to satify typescript\n            // really should be &&, but if so ts complains\n            // the above if/else checks would deal with either being falsy, so at this stage if either are falsy, both are\n            // ..still naff though\n            if (!a.headerName || !b.headerName) {\n                return 0;\n            }\n            if (a.headerName < b.headerName) {\n                return -1;\n            }\n            if (a.headerName > b.headerName) {\n                return 1;\n            }\n            return 0;\n        }\n    }\n    merge(m1, m2) {\n        m2.forEach((value, key, map) => {\n            const existingList = m1.has(key) ? m1.get(key) : [];\n            const updatedList = [...existingList, ...value];\n            m1.set(key, updatedList);\n        });\n    }\n    generateColumnGroupId(pivotKeys) {\n        const pivotCols = this.columnModel.getPivotColumns().map((col) => col.getColId());\n        return `pivotGroup_${pivotCols.join('-')}_${pivotKeys.join('-')}`;\n    }\n    generateColumnId(pivotKeys, measureColumnId) {\n        const pivotCols = this.columnModel.getPivotColumns().map((col) => col.getColId());\n        return `pivot_${pivotCols.join('-')}_${pivotKeys.join('-')}_${measureColumnId}`;\n    }\n    /**\n     * Used by the SSRM to create secondary columns from provided fields\n     * @param fields\n     */\n    createColDefsFromFields(fields) {\n        ;\n        // tear the ids down into groups, while this could be done in-step with the next stage, the lookup is faster \n        // than searching col group children array for the right group\n        const uniqueValues = {};\n        for (let i = 0; i < fields.length; i++) {\n            const field = fields[i];\n            const parts = field.split(this.fieldSeparator);\n            let level = uniqueValues;\n            for (let p = 0; p < parts.length; p++) {\n                const part = parts[p];\n                if (level[part] == null) {\n                    level[part] = {};\n                }\n                level = level[part];\n            }\n        }\n        const uniqueValuesToGroups = (id, key, uniqueValues, depth) => {\n            var _a;\n            const children = [];\n            for (let key in uniqueValues) {\n                const item = uniqueValues[key];\n                const child = uniqueValuesToGroups(`${id}${this.fieldSeparator}${key}`, key, item, depth + 1);\n                children.push(child);\n            }\n            if (children.length === 0) {\n                const col = {\n                    colId: id,\n                    headerName: key,\n                    // this is to support using pinned rows, normally the data will be extracted from the aggData object using the colId\n                    // however pinned rows still access the data object by field, this prevents values with dots from being treated as complex objects\n                    valueGetter: (params) => { var _a; return (_a = params.data) === null || _a === void 0 ? void 0 : _a[id]; },\n                };\n                const potentialAggCol = this.columnModel.getPrimaryColumn(key);\n                if (potentialAggCol) {\n                    col.headerName = (_a = this.columnModel.getDisplayNameForColumn(potentialAggCol, 'header')) !== null && _a !== void 0 ? _a : key;\n                    col.aggFunc = potentialAggCol.getAggFunc();\n                    col.pivotValueColumn = potentialAggCol;\n                }\n                return col;\n            }\n            // this is a bit sketchy. As the fields can be anything we just build groups as deep as the fields go.\n            // nothing says user has to give us groups the same depth.\n            const collapseSingleChildren = this.gridOptionsService.is('removePivotHeaderRowWhenSingleValueColumn');\n            if (collapseSingleChildren && children.length === 1 && 'colId' in children[0]) {\n                children[0].headerName = key;\n                return children[0];\n            }\n            const group = {\n                openByDefault: this.pivotDefaultExpanded === -1 || depth < this.pivotDefaultExpanded,\n                groupId: id,\n                headerName: key,\n                children,\n            };\n            return group;\n        };\n        const res = [];\n        for (let key in uniqueValues) {\n            const item = uniqueValues[key];\n            const col = uniqueValuesToGroups(key, key, item, 0);\n            res.push(col);\n        }\n        return res;\n    }\n};\nPivotColDefService.PIVOT_ROW_TOTAL_PREFIX = 'PivotRowTotal_';\n__decorate([\n    Autowired('columnModel')\n], PivotColDefService.prototype, \"columnModel\", void 0);\n__decorate([\n    Autowired('gridOptionsService')\n], PivotColDefService.prototype, \"gos\", void 0);\n__decorate([\n    PostConstruct\n], PivotColDefService.prototype, \"init\", null);\nPivotColDefService = PivotColDefService_1 = __decorate([\n    Bean('pivotColDefService')\n], PivotColDefService);\nexport { PivotColDefService };\n", "var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { Autowired, Bean, BeanStub, _ } from \"@ag-grid-community/core\";\nlet PivotStage = class PivotStage extends BeanStub {\n    constructor() {\n        super(...arguments);\n        this.uniqueValues = {};\n    }\n    execute(params) {\n        const changedPath = params.changedPath;\n        if (this.columnModel.isPivotActive()) {\n            this.executePivotOn(changedPath);\n        }\n        else {\n            this.executePivotOff(changedPath);\n        }\n    }\n    executePivotOff(changedPath) {\n        this.aggregationColumnsHashLastTime = null;\n        this.uniqueValues = {};\n        if (this.columnModel.isSecondaryColumnsPresent()) {\n            this.columnModel.setSecondaryColumns(null, \"rowModelUpdated\");\n            if (changedPath) {\n                changedPath.setInactive();\n            }\n        }\n    }\n    executePivotOn(changedPath) {\n        const uniqueValues = this.bucketUpRowNodes(changedPath);\n        const uniqueValuesChanged = this.setUniqueValues(uniqueValues);\n        const aggregationColumns = this.columnModel.getValueColumns();\n        const aggregationColumnsHash = aggregationColumns.map((column) => `${column.getId()}-${column.getColDef().headerName}`).join('#');\n        const aggregationFuncsHash = aggregationColumns.map((column) => column.getAggFunc().toString()).join('#');\n        const aggregationColumnsChanged = this.aggregationColumnsHashLastTime !== aggregationColumnsHash;\n        const aggregationFuncsChanged = this.aggregationFuncsHashLastTime !== aggregationFuncsHash;\n        this.aggregationColumnsHashLastTime = aggregationColumnsHash;\n        this.aggregationFuncsHashLastTime = aggregationFuncsHash;\n        const groupColumnsHash = this.columnModel.getRowGroupColumns().map((column) => column.getId()).join('#');\n        const groupColumnsChanged = groupColumnsHash !== this.groupColumnsHashLastTime;\n        this.groupColumnsHashLastTime = groupColumnsHash;\n        if (uniqueValuesChanged || aggregationColumnsChanged || groupColumnsChanged || aggregationFuncsChanged) {\n            const { pivotColumnGroupDefs, pivotColumnDefs } = this.pivotColDefService.createPivotColumnDefs(this.uniqueValues);\n            this.pivotColumnDefs = pivotColumnDefs;\n            this.columnModel.setSecondaryColumns(pivotColumnGroupDefs, \"rowModelUpdated\");\n            // because the secondary columns have changed, then the aggregation needs to visit the whole\n            // tree again, so we make the changedPath not active, to force aggregation to visit all paths.\n            if (changedPath) {\n                changedPath.setInactive();\n            }\n        }\n    }\n    setUniqueValues(newValues) {\n        const json1 = JSON.stringify(newValues);\n        const json2 = JSON.stringify(this.uniqueValues);\n        const uniqueValuesChanged = json1 !== json2;\n        // we only continue the below if the unique values are different, as otherwise\n        // the result will be the same as the last time we did it\n        if (uniqueValuesChanged) {\n            this.uniqueValues = newValues;\n            return true;\n        }\n        else {\n            return false;\n        }\n    }\n    bucketUpRowNodes(changedPath) {\n        // accessed from inside inner function\n        const uniqueValues = {};\n        // ensure childrenMapped is cleared, as if a node has been filtered out it should not have mapped children.\n        changedPath.forEachChangedNodeDepthFirst(node => {\n            if (node.leafGroup) {\n                node.childrenMapped = null;\n            }\n        });\n        const recursivelyBucketFilteredChildren = (node) => {\n            var _a;\n            if (node.leafGroup) {\n                this.bucketRowNode(node, uniqueValues);\n            }\n            else {\n                (_a = node.childrenAfterFilter) === null || _a === void 0 ? void 0 : _a.forEach(recursivelyBucketFilteredChildren);\n            }\n        };\n        changedPath.executeFromRootNode(recursivelyBucketFilteredChildren);\n        return uniqueValues;\n    }\n    bucketRowNode(rowNode, uniqueValues) {\n        const pivotColumns = this.columnModel.getPivotColumns();\n        if (pivotColumns.length === 0) {\n            rowNode.childrenMapped = null;\n        }\n        else {\n            rowNode.childrenMapped = this.bucketChildren(rowNode.childrenAfterFilter, pivotColumns, 0, uniqueValues);\n        }\n        if (rowNode.sibling) {\n            rowNode.sibling.childrenMapped = rowNode.childrenMapped;\n        }\n    }\n    bucketChildren(children, pivotColumns, pivotIndex, uniqueValues) {\n        const mappedChildren = {};\n        const pivotColumn = pivotColumns[pivotIndex];\n        // map the children out based on the pivot column\n        children.forEach((child) => {\n            let key = this.valueService.getKeyForNode(pivotColumn, child);\n            if (_.missing(key)) {\n                key = '';\n            }\n            if (!uniqueValues[key]) {\n                uniqueValues[key] = {};\n            }\n            if (!mappedChildren[key]) {\n                mappedChildren[key] = [];\n            }\n            mappedChildren[key].push(child);\n        });\n        // if it's the last pivot column, return as is, otherwise go one level further in the map\n        if (pivotIndex === pivotColumns.length - 1) {\n            return mappedChildren;\n        }\n        else {\n            const result = {};\n            _.iterateObject(mappedChildren, (key, value) => {\n                result[key] = this.bucketChildren(value, pivotColumns, pivotIndex + 1, uniqueValues[key]);\n            });\n            return result;\n        }\n    }\n    getPivotColumnDefs() {\n        return this.pivotColumnDefs;\n    }\n};\n__decorate([\n    Autowired('valueService')\n], PivotStage.prototype, \"valueService\", void 0);\n__decorate([\n    Autowired('columnModel')\n], PivotStage.prototype, \"columnModel\", void 0);\n__decorate([\n    Autowired('pivotColDefService')\n], PivotStage.prototype, \"pivotColDefService\", void 0);\nPivotStage = __decorate([\n    Bean('pivotStage')\n], PivotStage);\nexport { PivotStage };\n", "var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar AggFuncService_1;\nimport { Bean, BeanStub, PostConstruct, _ } from '@ag-grid-community/core';\n// @ts-ignore\nconst AGBigInt = typeof BigInt === 'undefined' ? null : BigInt;\nlet AggFuncService = AggFuncService_1 = class AggFuncService extends BeanStub {\n    constructor() {\n        super(...arguments);\n        this.aggFuncsMap = {};\n        this.initialised = false;\n    }\n    init() {\n        if (this.initialised) {\n            return;\n        }\n        this.initialiseWithDefaultAggregations();\n        this.addAggFuncs(this.gridOptionsService.get('aggFuncs'));\n    }\n    initialiseWithDefaultAggregations() {\n        this.aggFuncsMap[AggFuncService_1.AGG_SUM] = aggSum;\n        this.aggFuncsMap[AggFuncService_1.AGG_FIRST] = aggFirst;\n        this.aggFuncsMap[AggFuncService_1.AGG_LAST] = aggLast;\n        this.aggFuncsMap[AggFuncService_1.AGG_MIN] = aggMin;\n        this.aggFuncsMap[AggFuncService_1.AGG_MAX] = aggMax;\n        this.aggFuncsMap[AggFuncService_1.AGG_COUNT] = aggCount;\n        this.aggFuncsMap[AggFuncService_1.AGG_AVG] = aggAvg;\n        this.initialised = true;\n    }\n    isAggFuncPossible(column, func) {\n        const allKeys = this.getFuncNames(column);\n        const allowed = _.includes(allKeys, func);\n        const funcExists = _.exists(this.aggFuncsMap[func]);\n        return allowed && funcExists;\n    }\n    getDefaultAggFunc(column) {\n        const defaultAgg = column.getColDef().defaultAggFunc;\n        if (_.exists(defaultAgg) && this.isAggFuncPossible(column, defaultAgg)) {\n            return defaultAgg;\n        }\n        if (this.isAggFuncPossible(column, AggFuncService_1.AGG_SUM)) {\n            return AggFuncService_1.AGG_SUM;\n        }\n        const allKeys = this.getFuncNames(column);\n        return _.existsAndNotEmpty(allKeys) ? allKeys[0] : null;\n    }\n    addAggFuncs(aggFuncs) {\n        _.iterateObject(aggFuncs, this.addAggFunc.bind(this));\n    }\n    addAggFunc(key, aggFunc) {\n        this.init();\n        this.aggFuncsMap[key] = aggFunc;\n    }\n    getAggFunc(name) {\n        this.init();\n        return this.aggFuncsMap[name];\n    }\n    getFuncNames(column) {\n        const userAllowedFuncs = column.getColDef().allowedAggFuncs;\n        return userAllowedFuncs == null ? Object.keys(this.aggFuncsMap).sort() : userAllowedFuncs;\n    }\n    clear() {\n        this.aggFuncsMap = {};\n    }\n};\nAggFuncService.AGG_SUM = 'sum';\nAggFuncService.AGG_FIRST = 'first';\nAggFuncService.AGG_LAST = 'last';\nAggFuncService.AGG_MIN = 'min';\nAggFuncService.AGG_MAX = 'max';\nAggFuncService.AGG_COUNT = 'count';\nAggFuncService.AGG_AVG = 'avg';\n__decorate([\n    PostConstruct\n], AggFuncService.prototype, \"init\", null);\nAggFuncService = AggFuncService_1 = __decorate([\n    Bean('aggFuncService')\n], AggFuncService);\nexport { AggFuncService };\nfunction aggSum(params) {\n    const { values } = params;\n    let result = null; // the logic ensures that we never combine bigint arithmetic with numbers, but TS is hard to please\n    // for optimum performance, we use a for loop here rather than calling any helper methods or using functional code\n    for (let i = 0; i < values.length; i++) {\n        const value = values[i];\n        if (typeof value === 'number') {\n            if (result === null) {\n                result = value;\n            }\n            else {\n                if (AGBigInt) {\n                    result += typeof result === 'number' ? value : AGBigInt(value);\n                }\n                else {\n                    result += value;\n                }\n            }\n        }\n        else if (typeof value === 'bigint') {\n            if (result === null) {\n                result = value;\n            }\n            else {\n                result = (typeof result === 'bigint' ? result : AGBigInt(result)) + value;\n            }\n        }\n    }\n    return result;\n}\nfunction aggFirst(params) {\n    return params.values.length > 0 ? params.values[0] : null;\n}\nfunction aggLast(params) {\n    return params.values.length > 0 ? _.last(params.values) : null;\n}\nfunction aggMin(params) {\n    const { values } = params;\n    let result = null;\n    // for optimum performance, we use a for loop here rather than calling any helper methods or using functional code\n    for (let i = 0; i < values.length; i++) {\n        const value = values[i];\n        if ((typeof value === 'number' || typeof value === 'bigint') && (result === null || result > value)) {\n            result = value;\n        }\n    }\n    return result;\n}\nfunction aggMax(params) {\n    const { values } = params;\n    let result = null;\n    // for optimum performance, we use a for loop here rather than calling any helper methods or using functional code\n    for (let i = 0; i < values.length; i++) {\n        const value = values[i];\n        if ((typeof value === 'number' || typeof value === 'bigint') && (result === null || result < value)) {\n            result = value;\n        }\n    }\n    return result;\n}\nfunction aggCount(params) {\n    var _a, _b;\n    const { values } = params;\n    let result = 0;\n    // for optimum performance, we use a for loop here rather than calling any helper methods or using functional code\n    for (let i = 0; i < values.length; i++) {\n        const value = values[i];\n        // check if the value is from a group, in which case use the group's count\n        result += value != null && typeof value.value === 'number' ? value.value : 1;\n    }\n    // the previous aggregation data\n    const existingAggData = (_b = (_a = params.rowNode) === null || _a === void 0 ? void 0 : _a.aggData) === null || _b === void 0 ? void 0 : _b[params.column.getColId()];\n    if (existingAggData && existingAggData.value === result) {\n        // the underlying values haven't changed, return the old object to avoid triggering change detection\n        return existingAggData;\n    }\n    // it's important to wrap it in the object so we can determine if this is a group level\n    return {\n        value: result,\n        toString: function () {\n            return this.value.toString();\n        },\n        // used for sorting\n        toNumber: function () {\n            return this.value;\n        }\n    };\n}\n// the average function is tricky as the multiple levels require weighted averages\n// for the non-leaf node aggregations.\nfunction aggAvg(params) {\n    var _a, _b, _c;\n    const { values } = params;\n    let sum = 0; // the logic ensures that we never combine bigint arithmetic with numbers, but TS is hard to please\n    let count = 0;\n    // for optimum performance, we use a for loop here rather than calling any helper methods or using functional code\n    for (let i = 0; i < values.length; i++) {\n        const currentValue = values[i];\n        let valueToAdd = null;\n        if (typeof currentValue === 'number' || typeof currentValue === 'bigint') {\n            valueToAdd = currentValue;\n            count++;\n        }\n        else if (currentValue != null && (typeof currentValue.value === 'number' || typeof currentValue.value === 'bigint') && typeof currentValue.count === 'number') {\n            // we are aggregating groups, so we take the aggregated values to calculated a weighted average\n            if (AGBigInt) {\n                valueToAdd = currentValue.value * (typeof currentValue.value === 'number' ? currentValue.count : AGBigInt(currentValue.count));\n            }\n            else {\n                valueToAdd = currentValue.value * currentValue.count;\n            }\n            count += currentValue.count;\n        }\n        if (typeof valueToAdd === 'number') {\n            if (AGBigInt) {\n                sum += typeof sum === 'number' ? valueToAdd : AGBigInt(valueToAdd);\n            }\n            else {\n                sum += valueToAdd;\n            }\n        }\n        else if (typeof valueToAdd === 'bigint') {\n            sum = (typeof sum === 'bigint' ? sum : AGBigInt(sum)) + valueToAdd;\n        }\n    }\n    let value = null;\n    // avoid divide by zero error\n    if (count > 0) {\n        if (AGBigInt) {\n            value = sum / (typeof sum === 'number' ? count : AGBigInt(count));\n        }\n        else {\n            value = sum / count;\n        }\n    }\n    // the previous aggregation data\n    const existingAggData = (_b = (_a = params.rowNode) === null || _a === void 0 ? void 0 : _a.aggData) === null || _b === void 0 ? void 0 : _b[(_c = params.column) === null || _c === void 0 ? void 0 : _c.getColId()];\n    if (existingAggData && existingAggData.count === count && existingAggData.value === value) {\n        // the underlying values haven't changed, return the old object to avoid triggering change detection\n        return existingAggData;\n    }\n    // the result will be an object. when this cell is rendered, only the avg is shown.\n    // however when this cell is part of another aggregation, the count is also needed\n    // to create a weighted average for the next level.\n    return {\n        count,\n        value,\n        // the grid by default uses toString to render values for an object, so this\n        // is a trick to get the default cellRenderer to display the avg value\n        toString: function () {\n            return typeof this.value === 'number' || typeof this.value === 'bigint' ? this.value.toString() : '';\n        },\n        // used for sorting\n        toNumber: function () {\n            return this.value;\n        }\n    };\n}\n", "var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { DragSourceType, Component, Autowired, Events, TouchListener, DragAndDropService, PostConstruct, Column, RefSelector, Optional, VirtualList, KeyCode, _, } from \"@ag-grid-community/core\";\nexport class DropZoneColumnComp extends Component {\n    constructor(column, dragSourceDropTarget, ghost, dropZonePurpose, horizontal) {\n        super();\n        this.column = column;\n        this.dragSourceDropTarget = dragSourceDropTarget;\n        this.ghost = ghost;\n        this.dropZonePurpose = dropZonePurpose;\n        this.horizontal = horizontal;\n        this.popupShowing = false;\n    }\n    init() {\n        this.setTemplate(DropZoneColumnComp.TEMPLATE);\n        const eGui = this.getGui();\n        const isFunctionsReadOnly = this.gridOptionsService.is('functionsReadOnly');\n        this.addElementClasses(eGui);\n        this.addElementClasses(this.eDragHandle, 'drag-handle');\n        this.addElementClasses(this.eText, 'text');\n        this.addElementClasses(this.eButton, 'button');\n        this.eDragHandle.appendChild(_.createIconNoSpan('columnDrag', this.gridOptionsService));\n        this.eButton.appendChild(_.createIconNoSpan('cancel', this.gridOptionsService));\n        this.setupSort();\n        this.displayName = this.columnModel.getDisplayNameForColumn(this.column, 'columnDrop');\n        this.setupComponents();\n        if (!this.ghost && !isFunctionsReadOnly) {\n            this.addDragSource();\n        }\n        this.setupAria();\n        this.addManagedListener(this.eventService, Column.EVENT_SORT_CHANGED, () => {\n            this.setupAria();\n        });\n        this.setupTooltip();\n        this.activateTabIndex();\n    }\n    setupAria() {\n        const translate = this.localeService.getLocaleTextFunc();\n        const { name, aggFuncName } = this.getColumnAndAggFuncName();\n        const aggSeparator = translate('ariaDropZoneColumnComponentAggFuncSeparator', ' of ');\n        const sortDirection = {\n            asc: translate('ariaDropZoneColumnComponentSortAscending', 'ascending'),\n            desc: translate('ariaDropZoneColumnComponentSortDescending', 'descending'),\n        };\n        const columnSort = this.column.getSort();\n        const isSortSuppressed = this.gridOptionsService.is('rowGroupPanelSuppressSort');\n        const ariaInstructions = [\n            [\n                aggFuncName && `${aggFuncName}${aggSeparator}`,\n                name,\n                this.isGroupingZone() && !isSortSuppressed && columnSort && `, ${sortDirection[columnSort]}`\n            ].filter(part => !!part).join(''),\n        ];\n        const isFunctionsReadOnly = this.gridOptionsService.is('functionsReadOnly');\n        if (this.isAggregationZone() && !isFunctionsReadOnly) {\n            const aggregationMenuAria = translate('ariaDropZoneColumnValueItemDescription', 'Press ENTER to change the aggregation type');\n            ariaInstructions.push(aggregationMenuAria);\n        }\n        if (this.isGroupingZone() && this.column.getColDef().sortable && !isSortSuppressed) {\n            const sortProgressAria = translate('ariaDropZoneColumnGroupItemDescription', 'Press ENTER to sort');\n            ariaInstructions.push(sortProgressAria);\n        }\n        const deleteAria = translate('ariaDropZoneColumnComponentDescription', 'Press DELETE to remove');\n        ariaInstructions.push(deleteAria);\n        _.setAriaLabel(this.getGui(), ariaInstructions.join('. '));\n    }\n    setupTooltip() {\n        const refresh = () => {\n            const newTooltipText = this.column.getColDef().headerTooltip;\n            this.setTooltip(newTooltipText);\n        };\n        refresh();\n        this.addManagedListener(this.eventService, Events.EVENT_NEW_COLUMNS_LOADED, refresh);\n    }\n    setupSort() {\n        const canSort = this.column.getColDef().sortable;\n        const isGroupingZone = this.isGroupingZone();\n        if (!canSort || !isGroupingZone) {\n            return;\n        }\n        if (!this.gridOptionsService.is('rowGroupPanelSuppressSort')) {\n            this.eSortIndicator.setupSort(this.column, true);\n            const performSort = (event) => {\n                event.preventDefault();\n                const sortUsingCtrl = this.gridOptionsService.get('multiSortKey') === 'ctrl';\n                const multiSort = sortUsingCtrl ? (event.ctrlKey || event.metaKey) : event.shiftKey;\n                this.sortController.progressSort(this.column, multiSort, 'uiColumnSorted');\n            };\n            this.addGuiEventListener('click', performSort);\n            this.addGuiEventListener('keydown', (e) => {\n                const isEnter = e.key === KeyCode.ENTER;\n                if (isEnter && this.isGroupingZone()) {\n                    performSort(e);\n                }\n            });\n        }\n    }\n    addDragSource() {\n        const dragSource = {\n            type: DragSourceType.ToolPanel,\n            eElement: this.eDragHandle,\n            getDefaultIconName: () => DragAndDropService.ICON_HIDE,\n            getDragItem: () => this.createDragItem(),\n            dragItemName: this.displayName,\n            dragSourceDropTarget: this.dragSourceDropTarget\n        };\n        this.dragAndDropService.addDragSource(dragSource, true);\n        this.addDestroyFunc(() => this.dragAndDropService.removeDragSource(dragSource));\n    }\n    createDragItem() {\n        const visibleState = {};\n        visibleState[this.column.getId()] = this.column.isVisible();\n        return {\n            columns: [this.column],\n            visibleState: visibleState\n        };\n    }\n    setupComponents() {\n        this.setTextValue();\n        this.setupRemove();\n        if (this.ghost) {\n            this.addCssClass('ag-column-drop-cell-ghost');\n        }\n        if (this.isAggregationZone() && !this.gridOptionsService.is('functionsReadOnly')) {\n            this.addGuiEventListener('click', this.onShowAggFuncSelection.bind(this));\n        }\n    }\n    setupRemove() {\n        _.setDisplayed(this.eButton, !this.gridOptionsService.is('functionsReadOnly'));\n        const agEvent = { type: DropZoneColumnComp.EVENT_COLUMN_REMOVE };\n        this.addGuiEventListener('keydown', (e) => {\n            const isEnter = e.key === KeyCode.ENTER;\n            const isDelete = e.key === KeyCode.DELETE;\n            if (isDelete) {\n                e.preventDefault();\n                this.dispatchEvent(agEvent);\n            }\n            if (isEnter && this.isAggregationZone() && !this.gridOptionsService.is('functionsReadOnly')) {\n                e.preventDefault();\n                this.onShowAggFuncSelection();\n            }\n        });\n        this.addManagedListener(this.eButton, 'click', (mouseEvent) => {\n            this.dispatchEvent(agEvent);\n            mouseEvent.stopPropagation();\n        });\n        const touchListener = new TouchListener(this.eButton);\n        this.addManagedListener(touchListener, TouchListener.EVENT_TAP, () => {\n            this.dispatchEvent(agEvent);\n        });\n        this.addDestroyFunc(touchListener.destroy.bind(touchListener));\n    }\n    getColumnAndAggFuncName() {\n        const name = this.displayName;\n        let aggFuncName = '';\n        if (this.isAggregationZone()) {\n            const aggFunc = this.column.getAggFunc();\n            // if aggFunc is a string, we can use it, but if it's a function, then we swap with 'func'\n            const aggFuncString = typeof aggFunc === 'string' ? aggFunc : 'agg';\n            const localeTextFunc = this.localeService.getLocaleTextFunc();\n            aggFuncName = localeTextFunc(aggFuncString, aggFuncString);\n        }\n        return { name, aggFuncName };\n    }\n    setTextValue() {\n        const { name, aggFuncName } = this.getColumnAndAggFuncName();\n        const displayValue = this.isAggregationZone() ? `${aggFuncName}(${name})` : name;\n        const displayValueSanitised = _.escapeString(displayValue);\n        this.eText.innerHTML = displayValueSanitised;\n    }\n    onShowAggFuncSelection() {\n        if (this.popupShowing) {\n            return;\n        }\n        this.popupShowing = true;\n        const virtualList = new VirtualList({ cssIdentifier: 'select-agg-func' });\n        const rows = this.aggFuncService.getFuncNames(this.column);\n        const eGui = this.getGui();\n        const virtualListGui = virtualList.getGui();\n        virtualList.setModel({\n            getRow: function (index) { return rows[index]; },\n            getRowCount: function () { return rows.length; }\n        });\n        this.getContext().createBean(virtualList);\n        const ePopup = _.loadTemplate(/* html*/ `<div class=\"ag-select-agg-func-popup\"></div>`);\n        ePopup.style.top = '0px';\n        ePopup.style.left = '0px';\n        ePopup.appendChild(virtualListGui);\n        ePopup.style.width = `${eGui.clientWidth}px`;\n        const focusoutListener = this.addManagedListener(ePopup, 'focusout', (e) => {\n            if (!ePopup.contains(e.relatedTarget) && addPopupRes) {\n                addPopupRes.hideFunc();\n            }\n        });\n        const popupHiddenFunc = (callbackEvent) => {\n            this.destroyBean(virtualList);\n            this.popupShowing = false;\n            if ((callbackEvent === null || callbackEvent === void 0 ? void 0 : callbackEvent.key) === 'Escape') {\n                eGui.focus();\n            }\n            if (focusoutListener) {\n                focusoutListener();\n            }\n        };\n        const translate = this.localeService.getLocaleTextFunc();\n        const addPopupRes = this.popupService.addPopup({\n            modal: true,\n            eChild: ePopup,\n            closeOnEsc: true,\n            closedCallback: popupHiddenFunc,\n            ariaLabel: translate('ariaLabelAggregationFunction', 'Aggregation Function')\n        });\n        if (addPopupRes) {\n            virtualList.setComponentCreator(this.createAggSelect.bind(this, addPopupRes.hideFunc));\n        }\n        virtualList.addGuiEventListener('keydown', (e) => {\n            if (e.key === KeyCode.ENTER || e.key === KeyCode.SPACE) {\n                const row = virtualList.getLastFocusedRow();\n                if (row == null) {\n                    return;\n                }\n                const comp = virtualList.getComponentAt(row);\n                if (comp) {\n                    comp.selectItem();\n                }\n            }\n        });\n        this.popupService.positionPopupByComponent({\n            type: 'aggFuncSelect',\n            eventSource: eGui,\n            ePopup: ePopup,\n            keepWithinBounds: true,\n            column: this.column,\n            position: 'under'\n        });\n        virtualList.refresh();\n        let rowToFocus = rows.findIndex(r => r === this.column.getAggFunc());\n        if (rowToFocus === -1) {\n            rowToFocus = 0;\n        }\n        virtualList.focusRow(rowToFocus);\n    }\n    createAggSelect(hidePopup, value) {\n        const itemSelected = () => {\n            hidePopup();\n            if (this.gridOptionsService.is('functionsPassive')) {\n                const event = {\n                    type: Events.EVENT_COLUMN_AGG_FUNC_CHANGE_REQUEST,\n                    columns: [this.column],\n                    aggFunc: value\n                };\n                this.eventService.dispatchEvent(event);\n            }\n            else {\n                this.columnModel.setColumnAggFunc(this.column, value, \"toolPanelDragAndDrop\");\n            }\n        };\n        const localeTextFunc = this.localeService.getLocaleTextFunc();\n        const aggFuncString = value.toString();\n        const aggFuncStringTranslated = localeTextFunc(aggFuncString, aggFuncString);\n        const comp = new AggItemComp(itemSelected, aggFuncStringTranslated);\n        return comp;\n    }\n    addElementClasses(el, suffix) {\n        suffix = suffix ? `-${suffix}` : '';\n        const direction = this.horizontal ? 'horizontal' : 'vertical';\n        el.classList.add(`ag-column-drop-cell${suffix}`, `ag-column-drop-${direction}-cell${suffix}`);\n    }\n    isAggregationZone() {\n        return this.dropZonePurpose === 'aggregation';\n    }\n    isGroupingZone() {\n        return this.dropZonePurpose === 'rowGroup';\n    }\n}\nDropZoneColumnComp.EVENT_COLUMN_REMOVE = 'columnRemove';\nDropZoneColumnComp.TEMPLATE = `<span role=\"option\">\n          <span ref=\"eDragHandle\" class=\"ag-drag-handle ag-column-drop-cell-drag-handle\" role=\"presentation\"></span>\n          <span ref=\"eText\" class=\"ag-column-drop-cell-text\" aria-hidden=\"true\"></span>\n          <ag-sort-indicator ref=\"eSortIndicator\"></ag-sort-indicator>\n          <span ref=\"eButton\" class=\"ag-column-drop-cell-button\" role=\"presentation\"></span>\n        </span>`;\n__decorate([\n    Autowired('dragAndDropService')\n], DropZoneColumnComp.prototype, \"dragAndDropService\", void 0);\n__decorate([\n    Autowired('columnModel')\n], DropZoneColumnComp.prototype, \"columnModel\", void 0);\n__decorate([\n    Autowired('popupService')\n], DropZoneColumnComp.prototype, \"popupService\", void 0);\n__decorate([\n    Optional('aggFuncService')\n], DropZoneColumnComp.prototype, \"aggFuncService\", void 0);\n__decorate([\n    Autowired('sortController')\n], DropZoneColumnComp.prototype, \"sortController\", void 0);\n__decorate([\n    RefSelector('eText')\n], DropZoneColumnComp.prototype, \"eText\", void 0);\n__decorate([\n    RefSelector('eDragHandle')\n], DropZoneColumnComp.prototype, \"eDragHandle\", void 0);\n__decorate([\n    RefSelector('eButton')\n], DropZoneColumnComp.prototype, \"eButton\", void 0);\n__decorate([\n    RefSelector('eSortIndicator')\n], DropZoneColumnComp.prototype, \"eSortIndicator\", void 0);\n__decorate([\n    PostConstruct\n], DropZoneColumnComp.prototype, \"init\", null);\nclass AggItemComp extends Component {\n    constructor(itemSelected, value) {\n        super(/* html */ `<div class=\"ag-select-agg-func-item\"/>`);\n        this.selectItem = itemSelected;\n        this.getGui().innerText = value;\n        this.addGuiEventListener('click', this.selectItem);\n    }\n}\n", "var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { Autowired, Component, DragSourceType, Events, KeyCode, ManagedFocusFeature, PositionableFeature, _ } from \"@ag-grid-community/core\";\nimport { DropZoneColumnComp } from \"./dropZoneColumnComp.mjs\";\nexport class BaseDropZonePanel extends Component {\n    constructor(horizontal, dropZonePurpose) {\n        super(/* html */ `<div class=\"ag-unselectable\" role=\"presentation\"></div>`);\n        this.horizontal = horizontal;\n        this.dropZonePurpose = dropZonePurpose;\n        this.state = BaseDropZonePanel.STATE_NOT_DRAGGING;\n        this.guiDestroyFunctions = [];\n        this.childColumnComponents = [];\n        this.resizeEnabled = false;\n        this.addElementClasses(this.getGui());\n        this.eColumnDropList = document.createElement('div');\n        this.addElementClasses(this.eColumnDropList, 'list');\n        _.setAriaRole(this.eColumnDropList, 'listbox');\n    }\n    isHorizontal() {\n        return this.horizontal;\n    }\n    toggleResizable(resizable) {\n        this.positionableFeature.setResizable(resizable ? { bottom: true } : false);\n        this.resizeEnabled = resizable;\n    }\n    setBeans(beans) {\n        this.beans = beans;\n    }\n    destroy() {\n        this.destroyGui();\n        super.destroy();\n    }\n    destroyGui() {\n        this.guiDestroyFunctions.forEach(func => func());\n        this.guiDestroyFunctions.length = 0;\n        this.childColumnComponents.length = 0;\n        _.clearElement(this.getGui());\n        _.clearElement(this.eColumnDropList);\n    }\n    init(params) {\n        this.params = params;\n        this.createManagedBean(new ManagedFocusFeature(this.getFocusableElement(), {\n            handleKeyDown: this.handleKeyDown.bind(this)\n        }));\n        this.addManagedListener(this.beans.eventService, Events.EVENT_NEW_COLUMNS_LOADED, this.refreshGui.bind(this));\n        this.addManagedPropertyListener('functionsReadOnly', this.refreshGui.bind(this));\n        this.setupDropTarget();\n        this.positionableFeature = new PositionableFeature(this.getGui(), { minHeight: 100 });\n        this.createManagedBean(this.positionableFeature);\n        // we don't know if this bean will be initialised before columnModel.\n        // if columnModel first, then below will work\n        // if columnModel second, then below will put blank in, and then above event gets first when columnModel is set up\n        this.refreshGui();\n        _.setAriaLabel(this.eColumnDropList, this.getAriaLabel());\n    }\n    handleKeyDown(e) {\n        const isVertical = !this.horizontal;\n        let isNext = e.key === KeyCode.DOWN;\n        let isPrevious = e.key === KeyCode.UP;\n        if (!isVertical) {\n            const isRtl = this.gridOptionsService.is('enableRtl');\n            isNext = (!isRtl && e.key === KeyCode.RIGHT) || (isRtl && e.key === KeyCode.LEFT);\n            isPrevious = (!isRtl && e.key === KeyCode.LEFT) || (isRtl && e.key === KeyCode.RIGHT);\n        }\n        if (!isNext && !isPrevious) {\n            return;\n        }\n        const el = this.focusService.findNextFocusableElement(this.getFocusableElement(), false, isPrevious);\n        if (el) {\n            e.preventDefault();\n            el.focus();\n        }\n    }\n    addElementClasses(el, suffix) {\n        suffix = suffix ? `-${suffix}` : '';\n        const direction = this.horizontal ? 'horizontal' : 'vertical';\n        el.classList.add(`ag-column-drop${suffix}`, `ag-column-drop-${direction}${suffix}`);\n    }\n    setupDropTarget() {\n        this.dropTarget = {\n            getContainer: this.getGui.bind(this),\n            getIconName: this.getIconName.bind(this),\n            onDragging: this.onDragging.bind(this),\n            onDragEnter: this.onDragEnter.bind(this),\n            onDragLeave: this.onDragLeave.bind(this),\n            onDragStop: this.onDragStop.bind(this),\n            isInterestedIn: this.isInterestedIn.bind(this)\n        };\n        this.beans.dragAndDropService.addDropTarget(this.dropTarget);\n    }\n    isInterestedIn(type) {\n        // not interested in row drags\n        return type === DragSourceType.HeaderCell || type === DragSourceType.ToolPanel;\n    }\n    checkInsertIndex(draggingEvent) {\n        const newIndex = this.getNewInsertIndex(draggingEvent);\n        // <0 happens when drag is no a direction we are interested in, eg drag is up/down but in horizontal panel\n        if (newIndex < 0) {\n            return false;\n        }\n        const changed = newIndex !== this.insertIndex;\n        if (changed) {\n            this.insertIndex = newIndex;\n        }\n        return changed;\n    }\n    getNewInsertIndex(draggingEvent) {\n        const mouseEvent = draggingEvent.event;\n        const mouseLocation = this.horizontal ? mouseEvent.clientX : mouseEvent.clientY;\n        const boundsList = this.childColumnComponents.map(col => (col.getGui().getBoundingClientRect()));\n        // find the non-ghost component we're hovering\n        const hoveredIndex = boundsList.findIndex(rect => (this.horizontal ? (rect.right > mouseLocation && rect.left < mouseLocation) : (rect.top < mouseLocation && rect.bottom > mouseLocation)));\n        // not hovering a non-ghost component\n        if (hoveredIndex === -1) {\n            const enableRtl = this.beans.gridOptionsService.is('enableRtl');\n            // if mouse is below or right of all components then new index should be placed last\n            const isLast = boundsList.every(rect => (mouseLocation > (this.horizontal ? rect.right : rect.bottom)));\n            if (isLast) {\n                return enableRtl && this.horizontal ? 0 : this.childColumnComponents.length;\n            }\n            // if mouse is above or left of all components, new index is first\n            const isFirst = boundsList.every(rect => (mouseLocation < (this.horizontal ? rect.left : rect.top)));\n            if (isFirst) {\n                return enableRtl && this.horizontal ? this.childColumnComponents.length : 0;\n            }\n            // must be hovering a ghost, don't change the index\n            return this.insertIndex;\n        }\n        // if the old index is equal to or less than the index of our new target\n        // we need to shift right, to insert after rather than before\n        if (this.insertIndex <= hoveredIndex) {\n            return hoveredIndex + 1;\n        }\n        return hoveredIndex;\n    }\n    checkDragStartedBySelf(draggingEvent) {\n        if (this.state !== BaseDropZonePanel.STATE_NOT_DRAGGING) {\n            return;\n        }\n        this.state = BaseDropZonePanel.STATE_REARRANGE_COLUMNS;\n        this.potentialDndColumns = draggingEvent.dragSource.getDragItem().columns || [];\n        this.refreshGui();\n        this.checkInsertIndex(draggingEvent);\n        this.refreshGui();\n    }\n    onDragging(draggingEvent) {\n        this.checkDragStartedBySelf(draggingEvent);\n        if (this.checkInsertIndex(draggingEvent)) {\n            this.refreshGui();\n        }\n    }\n    onDragEnter(draggingEvent) {\n        // this will contain all columns that are potential drops\n        const dragColumns = draggingEvent.dragSource.getDragItem().columns || [];\n        this.state = BaseDropZonePanel.STATE_NEW_COLUMNS_IN;\n        // take out columns that are not droppable\n        const goodDragColumns = dragColumns.filter(this.isColumnDroppable.bind(this));\n        if (goodDragColumns.length > 0) {\n            const hideColumnOnExit = this.isRowGroupPanel() && !this.gridOptionsService.is('suppressRowGroupHidesColumns') && !draggingEvent.fromNudge;\n            if (hideColumnOnExit) {\n                const dragItem = draggingEvent.dragSource.getDragItem();\n                const columns = dragItem.columns;\n                this.setColumnsVisible(columns, false, \"uiColumnDragged\");\n            }\n            this.potentialDndColumns = goodDragColumns;\n            this.checkInsertIndex(draggingEvent);\n            this.refreshGui();\n        }\n    }\n    setColumnsVisible(columns, visible, source = \"api\") {\n        if (columns) {\n            const allowedCols = columns.filter(c => !c.getColDef().lockVisible);\n            this.colModel.setColumnsVisible(allowedCols, visible, source);\n        }\n    }\n    isPotentialDndColumns() {\n        return _.existsAndNotEmpty(this.potentialDndColumns);\n    }\n    isRowGroupPanel() {\n        return this.dropZonePurpose === 'rowGroup';\n    }\n    onDragLeave(draggingEvent) {\n        // if the dragging started from us, we remove the group, however if it started\n        // some place else, then we don't, as it was only 'asking'\n        if (this.state === BaseDropZonePanel.STATE_REARRANGE_COLUMNS) {\n            const columns = draggingEvent.dragSource.getDragItem().columns || [];\n            this.removeColumns(columns);\n        }\n        if (this.isPotentialDndColumns()) {\n            const showColumnOnExit = this.isRowGroupPanel() && !this.gridOptionsService.is('suppressMakeColumnVisibleAfterUnGroup') && !draggingEvent.fromNudge;\n            if (showColumnOnExit) {\n                const dragItem = draggingEvent.dragSource.getDragItem();\n                this.setColumnsVisible(dragItem.columns, true, \"uiColumnDragged\");\n            }\n            this.potentialDndColumns = [];\n            this.refreshGui();\n        }\n        this.state = BaseDropZonePanel.STATE_NOT_DRAGGING;\n    }\n    onDragStop() {\n        if (this.isPotentialDndColumns()) {\n            let success = false;\n            if (this.state === BaseDropZonePanel.STATE_NEW_COLUMNS_IN) {\n                this.addColumns(this.potentialDndColumns);\n                success = true;\n            }\n            else {\n                success = this.rearrangeColumns(this.potentialDndColumns);\n            }\n            this.potentialDndColumns = [];\n            // If the function is passive, then we don't refresh, as we assume the client application\n            // is going to call setRowGroups / setPivots / setValues at a later point which will then\n            // cause a refresh. This gives a nice GUI where the ghost stays until the app has caught\n            // up with the changes. However, if there was no change in the order, then we do need to\n            // refresh to reset the columns\n            if (!this.beans.gridOptionsService.is('functionsPassive') || !success) {\n                this.refreshGui();\n            }\n        }\n        this.state = BaseDropZonePanel.STATE_NOT_DRAGGING;\n    }\n    removeColumns(columnsToRemove) {\n        const newColumnList = this.getExistingColumns().filter(col => !_.includes(columnsToRemove, col));\n        this.updateColumns(newColumnList);\n    }\n    addColumns(columnsToAdd) {\n        if (!columnsToAdd) {\n            return;\n        }\n        const newColumnList = this.getExistingColumns().slice();\n        const colsToAddNoDuplicates = columnsToAdd.filter(col => newColumnList.indexOf(col) < 0);\n        _.insertArrayIntoArray(newColumnList, colsToAddNoDuplicates, this.insertIndex);\n        this.updateColumns(newColumnList);\n    }\n    rearrangeColumns(columnsToAdd) {\n        const newColumnList = this.getNonGhostColumns().slice();\n        _.insertArrayIntoArray(newColumnList, columnsToAdd, this.insertIndex);\n        if (_.areEqual(newColumnList, this.getExistingColumns())) {\n            return false;\n        }\n        this.updateColumns(newColumnList);\n        return true;\n    }\n    refreshGui() {\n        // we reset the scroll position after the refresh.\n        // if we don't do this, then the list will always scroll to the top\n        // each time we refresh it. this is because part of the refresh empties\n        // out the list which sets scroll to zero. so the user could be just\n        // reordering the list - we want to prevent the resetting of the scroll.\n        // this is relevant for vertical display only (as horizontal has no scroll)\n        const scrollTop = this.eColumnDropList.scrollTop;\n        const resizeEnabled = this.resizeEnabled;\n        const focusedIndex = this.getFocusedItem();\n        let alternateElement = this.focusService.findNextFocusableElement();\n        if (!alternateElement) {\n            alternateElement = this.focusService.findNextFocusableElement(undefined, false, true);\n        }\n        this.toggleResizable(false);\n        this.destroyGui();\n        this.addIconAndTitleToGui();\n        this.addEmptyMessageToGui();\n        this.addColumnsToGui();\n        if (!this.isHorizontal()) {\n            this.eColumnDropList.scrollTop = scrollTop;\n        }\n        if (resizeEnabled) {\n            this.toggleResizable(resizeEnabled);\n        }\n        // focus should only be restored when keyboard mode\n        // otherwise mouse clicks will cause containers to scroll\n        // without no apparent reason.\n        if (this.focusService.isKeyboardMode()) {\n            this.restoreFocus(focusedIndex, alternateElement);\n        }\n    }\n    getFocusedItem() {\n        const eGui = this.getGui();\n        const activeElement = this.gridOptionsService.getDocument().activeElement;\n        if (!eGui.contains(activeElement)) {\n            return -1;\n        }\n        const items = Array.from(eGui.querySelectorAll('.ag-column-drop-cell'));\n        return items.indexOf(activeElement);\n    }\n    restoreFocus(index, alternateElement) {\n        const eGui = this.getGui();\n        const items = Array.from(eGui.querySelectorAll('.ag-column-drop-cell'));\n        if (index === -1) {\n            return;\n        }\n        if (items.length === 0) {\n            alternateElement.focus();\n        }\n        const indexToFocus = Math.min(items.length - 1, index);\n        const el = items[indexToFocus];\n        if (el) {\n            el.focus();\n        }\n    }\n    getNonGhostColumns() {\n        const existingColumns = this.getExistingColumns();\n        if (this.isPotentialDndColumns()) {\n            return existingColumns.filter(column => !_.includes(this.potentialDndColumns, column));\n        }\n        return existingColumns;\n    }\n    addColumnsToGui() {\n        const nonGhostColumns = this.getNonGhostColumns();\n        const itemsToAddToGui = nonGhostColumns.map(column => (this.createColumnComponent(column, false)));\n        if (this.isPotentialDndColumns()) {\n            const dndColumns = this.potentialDndColumns.map(column => (this.createColumnComponent(column, true)));\n            if (this.insertIndex >= itemsToAddToGui.length) {\n                itemsToAddToGui.push(...dndColumns);\n            }\n            else {\n                itemsToAddToGui.splice(this.insertIndex, 0, ...dndColumns);\n            }\n        }\n        this.appendChild(this.eColumnDropList);\n        itemsToAddToGui.forEach((columnComponent, index) => {\n            if (index > 0) {\n                this.addArrow(this.eColumnDropList);\n            }\n            this.eColumnDropList.appendChild(columnComponent.getGui());\n        });\n        this.addAriaLabelsToComponents();\n    }\n    addAriaLabelsToComponents() {\n        this.childColumnComponents.forEach((comp, idx) => {\n            const eGui = comp.getGui();\n            _.setAriaPosInSet(eGui, idx + 1);\n            _.setAriaSetSize(eGui, this.childColumnComponents.length);\n        });\n    }\n    createColumnComponent(column, ghost) {\n        const columnComponent = new DropZoneColumnComp(column, this.dropTarget, ghost, this.dropZonePurpose, this.horizontal);\n        columnComponent.addEventListener(DropZoneColumnComp.EVENT_COLUMN_REMOVE, this.removeColumns.bind(this, [column]));\n        this.beans.context.createBean(columnComponent);\n        this.guiDestroyFunctions.push(() => this.destroyBean(columnComponent));\n        if (!ghost) {\n            this.childColumnComponents.push(columnComponent);\n        }\n        return columnComponent;\n    }\n    addIconAndTitleToGui() {\n        const eGroupIcon = this.params.icon;\n        const eTitleBar = document.createElement('div');\n        _.setAriaHidden(eTitleBar, true);\n        this.addElementClasses(eTitleBar, 'title-bar');\n        this.addElementClasses(eGroupIcon, 'icon');\n        this.addOrRemoveCssClass('ag-column-drop-empty', this.isExistingColumnsEmpty());\n        eTitleBar.appendChild(eGroupIcon);\n        if (!this.horizontal) {\n            const eTitle = document.createElement('span');\n            this.addElementClasses(eTitle, 'title');\n            eTitle.innerHTML = this.params.title;\n            eTitleBar.appendChild(eTitle);\n        }\n        this.appendChild(eTitleBar);\n    }\n    isExistingColumnsEmpty() {\n        return this.getExistingColumns().length === 0;\n    }\n    addEmptyMessageToGui() {\n        if (!this.isExistingColumnsEmpty() || this.isPotentialDndColumns()) {\n            return;\n        }\n        const eMessage = document.createElement('span');\n        eMessage.innerHTML = this.params.emptyMessage;\n        this.addElementClasses(eMessage, 'empty-message');\n        this.eColumnDropList.appendChild(eMessage);\n    }\n    addArrow(eParent) {\n        // only add the arrows if the layout is horizontal\n        if (this.horizontal) {\n            // for RTL it's a left arrow, otherwise it's a right arrow\n            const enableRtl = this.beans.gridOptionsService.is('enableRtl');\n            const icon = _.createIconNoSpan(enableRtl ? 'smallLeft' : 'smallRight', this.beans.gridOptionsService);\n            this.addElementClasses(icon, 'cell-separator');\n            eParent.appendChild(icon);\n        }\n    }\n}\nBaseDropZonePanel.STATE_NOT_DRAGGING = 'notDragging';\nBaseDropZonePanel.STATE_NEW_COLUMNS_IN = 'newColumnsIn';\nBaseDropZonePanel.STATE_REARRANGE_COLUMNS = 'rearrangeColumns';\n__decorate([\n    Autowired('columnModel')\n], BaseDropZonePanel.prototype, \"colModel\", void 0);\n__decorate([\n    Autowired('focusService')\n], BaseDropZonePanel.prototype, \"focusService\", void 0);\n", "var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { _, Autowired, DragAndDropService, Events, PostConstruct } from \"@ag-grid-community/core\";\nimport { BaseDropZonePanel } from \"./baseDropZonePanel.mjs\";\nexport class RowGroupDropZonePanel extends BaseDropZonePanel {\n    constructor(horizontal) {\n        super(horizontal, 'rowGroup');\n    }\n    passBeansUp() {\n        super.setBeans({\n            gridOptionsService: this.gridOptionsService,\n            eventService: this.eventService,\n            context: this.getContext(),\n            loggerFactory: this.loggerFactory,\n            dragAndDropService: this.dragAndDropService\n        });\n        const localeTextFunc = this.localeService.getLocaleTextFunc();\n        const emptyMessage = localeTextFunc('rowGroupColumnsEmptyMessage', 'Drag here to set row groups');\n        const title = localeTextFunc('groups', 'Row Groups');\n        super.init({\n            dragAndDropIcon: DragAndDropService.ICON_GROUP,\n            icon: _.createIconNoSpan('rowGroupPanel', this.gridOptionsService, null),\n            emptyMessage: emptyMessage,\n            title\n        });\n        this.addManagedListener(this.eventService, Events.EVENT_COLUMN_ROW_GROUP_CHANGED, this.refreshGui.bind(this));\n    }\n    getAriaLabel() {\n        const translate = this.localeService.getLocaleTextFunc();\n        const label = translate('ariaRowGroupDropZonePanelLabel', 'Row Groups');\n        return label;\n    }\n    getTooltipParams() {\n        const res = super.getTooltipParams();\n        res.location = 'rowGroupColumnsList';\n        return res;\n    }\n    isColumnDroppable(column) {\n        // we never allow grouping of secondary columns\n        if (this.gridOptionsService.is('functionsReadOnly') || !column.isPrimary()) {\n            return false;\n        }\n        return column.isAllowRowGroup() && !column.isRowGroupActive();\n    }\n    updateColumns(columns) {\n        if (this.gridOptionsService.is('functionsPassive')) {\n            const event = {\n                type: Events.EVENT_COLUMN_ROW_GROUP_CHANGE_REQUEST,\n                columns: columns\n            };\n            this.eventService.dispatchEvent(event);\n        }\n        else {\n            this.columnModel.setRowGroupColumns(columns, \"toolPanelUi\");\n        }\n    }\n    getIconName() {\n        return this.isPotentialDndColumns() ? DragAndDropService.ICON_GROUP : DragAndDropService.ICON_NOT_ALLOWED;\n    }\n    getExistingColumns() {\n        return this.columnModel.getRowGroupColumns();\n    }\n}\n__decorate([\n    Autowired('columnModel')\n], RowGroupDropZonePanel.prototype, \"columnModel\", void 0);\n__decorate([\n    Autowired('loggerFactory')\n], RowGroupDropZonePanel.prototype, \"loggerFactory\", void 0);\n__decorate([\n    Autowired('dragAndDropService')\n], RowGroupDropZonePanel.prototype, \"dragAndDropService\", void 0);\n__decorate([\n    PostConstruct\n], RowGroupDropZonePanel.prototype, \"passBeansUp\", null);\n", "var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { _, Autowired, DragAndDropService, Events, PostConstruct } from \"@ag-grid-community/core\";\nimport { BaseDropZonePanel } from \"./baseDropZonePanel.mjs\";\nexport class PivotDropZonePanel extends BaseDropZonePanel {\n    constructor(horizontal) {\n        super(horizontal, 'pivot');\n    }\n    passBeansUp() {\n        super.setBeans({\n            gridOptionsService: this.gridOptionsService,\n            eventService: this.eventService,\n            context: this.getContext(),\n            loggerFactory: this.loggerFactory,\n            dragAndDropService: this.dragAndDropService\n        });\n        const localeTextFunc = this.localeService.getLocaleTextFunc();\n        const emptyMessage = localeTextFunc('pivotColumnsEmptyMessage', 'Drag here to set column labels');\n        const title = localeTextFunc('pivots', 'Column Labels');\n        super.init({\n            dragAndDropIcon: DragAndDropService.ICON_GROUP,\n            icon: _.createIconNoSpan('pivotPanel', this.gridOptionsService, null),\n            emptyMessage: emptyMessage,\n            title: title\n        });\n        this.addManagedListener(this.eventService, Events.EVENT_NEW_COLUMNS_LOADED, this.refresh.bind(this));\n        this.addManagedListener(this.eventService, Events.EVENT_COLUMN_PIVOT_CHANGED, this.refresh.bind(this));\n        this.addManagedListener(this.eventService, Events.EVENT_COLUMN_PIVOT_MODE_CHANGED, this.checkVisibility.bind(this));\n        this.refresh();\n    }\n    getAriaLabel() {\n        const translate = this.localeService.getLocaleTextFunc();\n        const label = translate('ariaPivotDropZonePanelLabel', 'Column Labels');\n        return label;\n    }\n    getTooltipParams() {\n        const res = super.getTooltipParams();\n        res.location = 'pivotColumnsList';\n        return res;\n    }\n    refresh() {\n        this.checkVisibility();\n        this.refreshGui();\n    }\n    checkVisibility() {\n        const pivotMode = this.columnModel.isPivotMode();\n        if (this.isHorizontal()) {\n            // what we do for horizontal (ie the pivot panel at the top) depends\n            // on the user property as well as pivotMode.\n            switch (this.gridOptionsService.get('pivotPanelShow')) {\n                case 'always':\n                    this.setDisplayed(pivotMode);\n                    break;\n                case 'onlyWhenPivoting':\n                    const pivotActive = this.columnModel.isPivotActive();\n                    this.setDisplayed(pivotMode && pivotActive);\n                    break;\n                default:\n                    // never show it\n                    this.setDisplayed(false);\n                    break;\n            }\n        }\n        else {\n            // in toolPanel, the pivot panel is always shown when pivot mode is on\n            this.setDisplayed(pivotMode);\n        }\n    }\n    isColumnDroppable(column) {\n        // we never allow grouping of secondary columns\n        if (this.gridOptionsService.is('functionsReadOnly') || !column.isPrimary()) {\n            return false;\n        }\n        return column.isAllowPivot() && !column.isPivotActive();\n    }\n    updateColumns(columns) {\n        if (this.gridOptionsService.is('functionsPassive')) {\n            const event = {\n                type: Events.EVENT_COLUMN_PIVOT_CHANGE_REQUEST,\n                columns: columns\n            };\n            this.eventService.dispatchEvent(event);\n        }\n        else {\n            this.columnModel.setPivotColumns(columns, \"toolPanelUi\");\n        }\n    }\n    getIconName() {\n        return this.isPotentialDndColumns() ? DragAndDropService.ICON_PIVOT : DragAndDropService.ICON_NOT_ALLOWED;\n    }\n    getExistingColumns() {\n        return this.columnModel.getPivotColumns();\n    }\n}\n__decorate([\n    Autowired('columnModel')\n], PivotDropZonePanel.prototype, \"columnModel\", void 0);\n__decorate([\n    Autowired('loggerFactory')\n], PivotDropZonePanel.prototype, \"loggerFactory\", void 0);\n__decorate([\n    Autowired('dragAndDropService')\n], PivotDropZonePanel.prototype, \"dragAndDropService\", void 0);\n__decorate([\n    PostConstruct\n], PivotDropZonePanel.prototype, \"passBeansUp\", null);\n", "var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { Autowired, Component, Events, PostConstruct, _ } from \"@ag-grid-community/core\";\nimport { RowGroupDropZonePanel } from \"./rowGroupDropZonePanel.mjs\";\nimport { PivotDropZonePanel } from \"./pivotDropZonePanel.mjs\";\nexport class GridHeaderDropZones extends Component {\n    constructor() {\n        super();\n    }\n    postConstruct() {\n        this.setGui(this.createNorthPanel());\n        this.addManagedListener(this.eventService, Events.EVENT_COLUMN_ROW_GROUP_CHANGED, this.onRowGroupChanged.bind(this));\n        this.addManagedListener(this.eventService, Events.EVENT_NEW_COLUMNS_LOADED, this.onRowGroupChanged.bind(this));\n        this.addManagedPropertyListener('rowGroupPanelShow', this.onRowGroupChanged.bind(this));\n        this.onRowGroupChanged();\n    }\n    createNorthPanel() {\n        const topPanelGui = document.createElement('div');\n        const dropPanelVisibleListener = this.onDropPanelVisible.bind(this);\n        topPanelGui.classList.add('ag-column-drop-wrapper');\n        _.setAriaRole(topPanelGui, 'presentation');\n        this.rowGroupComp = new RowGroupDropZonePanel(true);\n        this.createManagedBean(this.rowGroupComp);\n        this.pivotComp = new PivotDropZonePanel(true);\n        this.createManagedBean(this.pivotComp);\n        topPanelGui.appendChild(this.rowGroupComp.getGui());\n        topPanelGui.appendChild(this.pivotComp.getGui());\n        this.addManagedListener(this.rowGroupComp, Component.EVENT_DISPLAYED_CHANGED, dropPanelVisibleListener);\n        this.addManagedListener(this.pivotComp, Component.EVENT_DISPLAYED_CHANGED, dropPanelVisibleListener);\n        this.onDropPanelVisible();\n        return topPanelGui;\n    }\n    onDropPanelVisible() {\n        const bothDisplayed = this.rowGroupComp.isDisplayed() && this.pivotComp.isDisplayed();\n        this.rowGroupComp.addOrRemoveCssClass('ag-column-drop-horizontal-half-width', bothDisplayed);\n        this.pivotComp.addOrRemoveCssClass('ag-column-drop-horizontal-half-width', bothDisplayed);\n    }\n    onRowGroupChanged() {\n        if (!this.rowGroupComp) {\n            return;\n        }\n        const rowGroupPanelShow = this.gridOptionsService.get('rowGroupPanelShow');\n        if (rowGroupPanelShow === 'always') {\n            this.rowGroupComp.setDisplayed(true);\n        }\n        else if (rowGroupPanelShow === 'onlyWhenGrouping') {\n            const grouping = !this.columnModel.isRowGroupEmpty();\n            this.rowGroupComp.setDisplayed(grouping);\n        }\n        else {\n            this.rowGroupComp.setDisplayed(false);\n        }\n    }\n}\n__decorate([\n    Autowired('columnModel')\n], GridHeaderDropZones.prototype, \"columnModel\", void 0);\n__decorate([\n    PostConstruct\n], GridHeaderDropZones.prototype, \"postConstruct\", null);\n", "var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { Autowired, Bean, BeanStub, } from \"@ag-grid-community/core\";\nlet FilterAggregatesStage = class FilterAggregatesStage extends BeanStub {\n    execute(params) {\n        const isPivotMode = this.columnModel.isPivotMode();\n        const isAggFilterActive = this.filterManager.isAggregateFilterPresent()\n            || this.filterManager.isAggregateQuickFilterPresent();\n        // This is the default filter for applying only to leaf nodes, realistically this should not apply as primary agg columns,\n        // should not be applied by the filterManager if getGroupAggFiltering is missing. Predicate will apply filters to leaf level.\n        const defaultPrimaryColumnPredicate = (params) => !params.node.group;\n        // Default secondary column predicate, selecting only leaf level groups.\n        const defaultSecondaryColumnPredicate = ((params) => params.node.leafGroup);\n        // The predicate to determine whether filters should apply to this row. Either defined by the user in groupAggFiltering or a default depending\n        // on current pivot mode status.\n        const applyFilterToNode = this.gridOptionsService.getGroupAggFiltering()\n            || (isPivotMode ? defaultSecondaryColumnPredicate : defaultPrimaryColumnPredicate);\n        const { changedPath } = params;\n        const preserveChildren = (node, recursive = false) => {\n            if (node.childrenAfterFilter) {\n                node.childrenAfterAggFilter = node.childrenAfterFilter;\n                if (recursive) {\n                    node.childrenAfterAggFilter.forEach((child) => preserveChildren(child, recursive));\n                }\n                this.setAllChildrenCount(node);\n            }\n            if (node.sibling) {\n                node.sibling.childrenAfterAggFilter = node.childrenAfterAggFilter;\n            }\n        };\n        const filterChildren = (node) => {\n            var _a;\n            node.childrenAfterAggFilter = ((_a = node.childrenAfterFilter) === null || _a === void 0 ? void 0 : _a.filter((child) => {\n                var _a;\n                const shouldFilterRow = applyFilterToNode({ node: child });\n                if (shouldFilterRow) {\n                    const doesNodePassFilter = this.filterManager.doesRowPassAggregateFilters({ rowNode: child });\n                    if (doesNodePassFilter) {\n                        // Node has passed, so preserve children\n                        preserveChildren(child, true);\n                        return true;\n                    }\n                }\n                const hasChildPassed = (_a = child.childrenAfterAggFilter) === null || _a === void 0 ? void 0 : _a.length;\n                return hasChildPassed;\n            })) || null;\n            this.setAllChildrenCount(node);\n            if (node.sibling) {\n                node.sibling.childrenAfterAggFilter = node.childrenAfterAggFilter;\n            }\n        };\n        changedPath.forEachChangedNodeDepthFirst(isAggFilterActive ? filterChildren : preserveChildren, true);\n    }\n    setAllChildrenCountTreeData(rowNode) {\n        // for tree data, we include all children, groups and leafs\n        let allChildrenCount = 0;\n        rowNode.childrenAfterAggFilter.forEach((child) => {\n            // include child itself\n            allChildrenCount++;\n            // include children of children\n            allChildrenCount += child.allChildrenCount;\n        });\n        rowNode.setAllChildrenCount(allChildrenCount);\n    }\n    setAllChildrenCountGridGrouping(rowNode) {\n        // for grid data, we only count the leafs\n        let allChildrenCount = 0;\n        rowNode.childrenAfterAggFilter.forEach((child) => {\n            if (child.group) {\n                allChildrenCount += child.allChildrenCount;\n            }\n            else {\n                allChildrenCount++;\n            }\n        });\n        rowNode.setAllChildrenCount(allChildrenCount);\n    }\n    setAllChildrenCount(rowNode) {\n        if (!rowNode.hasChildren()) {\n            rowNode.setAllChildrenCount(null);\n            return;\n        }\n        if (this.gridOptionsService.is('treeData')) {\n            this.setAllChildrenCountTreeData(rowNode);\n        }\n        else {\n            this.setAllChildrenCountGridGrouping(rowNode);\n        }\n    }\n};\n__decorate([\n    Autowired('filterManager')\n], FilterAggregatesStage.prototype, \"filterManager\", void 0);\n__decorate([\n    Autowired('columnModel')\n], FilterAggregatesStage.prototype, \"columnModel\", void 0);\nFilterAggregatesStage = __decorate([\n    Bean('filterAggregatesStage')\n], FilterAggregatesStage);\nexport { FilterAggregatesStage };\n", "// DO NOT UPDATE MANUALLY: Generated from script during build time\nexport const VERSION = '30.2.1';\n", "var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { _, AgPromise, AgSelect, Autowired, Events, PostConstruct, RefSelector, TabGuardComp, } from '@ag-grid-community/core';\nexport class GroupFilter extends TabGuardComp {\n    constructor() {\n        super(/* html */ `\n            <div class=\"ag-group-filter\">\n                <div ref=\"eGroupField\"></div>\n                <div ref=\"eUnderlyingFilter\"></div>\n            </div>\n        `);\n    }\n    postConstruct() {\n        this.initialiseTabGuard({});\n    }\n    init(params) {\n        this.params = params;\n        this.validateParams();\n        return this.updateGroups().then(() => {\n            this.addManagedListener(this.eventService, Events.EVENT_COLUMN_ROW_GROUP_CHANGED, () => this.onColumnRowGroupChanged());\n        });\n    }\n    validateParams() {\n        const { colDef } = this.params;\n        if (colDef.field) {\n            _.doOnce(() => console.warn('AG Grid: Group Column Filter does not work with the colDef property \"field\". This property will be ignored.'), 'groupFilterFieldParam');\n        }\n        if (colDef.filterValueGetter) {\n            _.doOnce(() => console.warn('AG Grid: Group Column Filter does not work with the colDef property \"filterValueGetter\". This property will be ignored.'), 'groupFilterFilterValueGetterParam');\n        }\n        if (colDef.filterParams) {\n            _.doOnce(() => console.warn('AG Grid: Group Column Filter does not work with the colDef property \"filterParams\". This property will be ignored.'), 'groupFilterFilterParams');\n        }\n    }\n    updateGroups() {\n        const sourceColumns = this.updateGroupField();\n        return this.getUnderlyingFilters(sourceColumns);\n    }\n    getSourceColumns() {\n        this.groupColumn = this.params.column;\n        if (this.gridOptionsService.is('treeData')) {\n            _.doOnce(() => console.warn('AG Grid: Group Column Filter does not work with Tree Data enabled. Please disable Tree Data, or use a different filter.'), 'groupFilterTreeData');\n            return [];\n        }\n        const sourceColumns = this.columnModel.getSourceColumnsForGroupColumn(this.groupColumn);\n        if (!sourceColumns) {\n            _.doOnce(() => console.warn('AG Grid: Group Column Filter only works on group columns. Please use a different filter.'), 'groupFilterNotGroupColumn');\n            return [];\n        }\n        return sourceColumns;\n    }\n    updateGroupField() {\n        _.clearElement(this.eGroupField);\n        if (this.eGroupFieldSelect) {\n            this.destroyBean(this.eGroupFieldSelect);\n        }\n        const allSourceColumns = this.getSourceColumns();\n        const sourceColumns = allSourceColumns.filter(sourceColumn => sourceColumn.isFilterAllowed());\n        if (!sourceColumns.length) {\n            this.selectedColumn = undefined;\n            _.setDisplayed(this.eGroupField, false);\n            return null;\n        }\n        if (allSourceColumns.length === 1) {\n            // we only want to hide the group field element if there's only one group column.\n            // If there's one group column that has a filter, but multiple columns in total,\n            // we should still show the select so the user knows which column it's for.\n            this.selectedColumn = sourceColumns[0];\n            _.setDisplayed(this.eGroupField, false);\n        }\n        else {\n            // keep the old selected column if it's still valid\n            if (!this.selectedColumn || !sourceColumns.some(column => column.getId() === this.selectedColumn.getId())) {\n                this.selectedColumn = sourceColumns[0];\n            }\n            this.createGroupFieldSelectElement(sourceColumns);\n            this.eGroupField.appendChild(this.eGroupFieldSelect.getGui());\n            this.eGroupField.appendChild(_.loadTemplate(/* html */ `<div class=\"ag-filter-separator\"></div>`));\n            _.setDisplayed(this.eGroupField, true);\n        }\n        return sourceColumns;\n    }\n    createGroupFieldSelectElement(sourceColumns) {\n        this.eGroupFieldSelect = this.createManagedBean(new AgSelect());\n        const localeTextFunc = this.localeService.getLocaleTextFunc();\n        this.eGroupFieldSelect.setLabel(localeTextFunc('groupFilterSelect', 'Select field:'));\n        this.eGroupFieldSelect.setLabelAlignment('top');\n        this.eGroupFieldSelect.addOptions(sourceColumns.map(sourceColumn => {\n            var _a;\n            return ({\n                value: sourceColumn.getId(),\n                text: (_a = this.columnModel.getDisplayNameForColumn(sourceColumn, 'groupFilter', false)) !== null && _a !== void 0 ? _a : undefined\n            });\n        }));\n        this.eGroupFieldSelect.setValue(this.selectedColumn.getId());\n        this.eGroupFieldSelect.onValueChange((newValue) => this.updateSelectedColumn(newValue));\n        this.eGroupFieldSelect.addCssClass('ag-group-filter-field-select-wrapper');\n        if (sourceColumns.length === 1) {\n            this.eGroupFieldSelect.setDisabled(true);\n        }\n    }\n    getUnderlyingFilters(sourceColumns) {\n        if (!sourceColumns) {\n            this.filterColumnPairs = undefined;\n            this.selectedFilter = undefined;\n            this.groupColumn.setFilterActive(false, 'columnRowGroupChanged');\n            return AgPromise.resolve();\n        }\n        const filterPromises = [];\n        const filterColumnPairs = [];\n        sourceColumns.forEach(column => {\n            const filterWrapper = this.filterManager.getOrCreateFilterWrapper(column, 'COLUMN_MENU');\n            if (filterWrapper === null || filterWrapper === void 0 ? void 0 : filterWrapper.filterPromise) {\n                filterPromises.push(filterWrapper.filterPromise.then(filter => {\n                    if (filter) {\n                        filterColumnPairs.push({\n                            filter,\n                            column\n                        });\n                    }\n                    if (column.getId() === this.selectedColumn.getId()) {\n                        this.selectedFilter = filter !== null && filter !== void 0 ? filter : undefined;\n                    }\n                    return filter;\n                }));\n            }\n        });\n        return AgPromise.all(filterPromises).then(() => {\n            this.filterColumnPairs = filterColumnPairs;\n            this.groupColumn.setFilterActive(this.isFilterActive(), 'columnRowGroupChanged');\n        });\n    }\n    addUnderlyingFilterElement() {\n        _.clearElement(this.eUnderlyingFilter);\n        if (!this.selectedColumn) {\n            return AgPromise.resolve();\n        }\n        const filterWrapper = this.filterManager.getOrCreateFilterWrapper(this.selectedColumn, 'COLUMN_MENU');\n        if (!filterWrapper) {\n            return AgPromise.resolve();\n        }\n        return filterWrapper.guiPromise.then(gui => {\n            var _a;\n            this.eUnderlyingFilter.appendChild(gui);\n            (_a = filterWrapper.filterPromise) === null || _a === void 0 ? void 0 : _a.then(filter => {\n                var _a, _b;\n                (_a = filter === null || filter === void 0 ? void 0 : filter.afterGuiAttached) === null || _a === void 0 ? void 0 : _a.call(filter, this.afterGuiAttachedParams);\n                if (!((_b = this.afterGuiAttachedParams) === null || _b === void 0 ? void 0 : _b.suppressFocus) && this.eGroupFieldSelect && !this.eGroupFieldSelect.isDisabled()) {\n                    this.eGroupFieldSelect.getFocusableElement().focus();\n                }\n            });\n        });\n    }\n    updateSelectedColumn(columnId) {\n        var _a, _b;\n        if (!columnId) {\n            return;\n        }\n        (_b = (_a = this.selectedFilter) === null || _a === void 0 ? void 0 : _a.afterGuiDetached) === null || _b === void 0 ? void 0 : _b.call(_a);\n        const selectedFilterColumnPair = this.getFilterColumnPair(columnId);\n        this.selectedColumn = selectedFilterColumnPair === null || selectedFilterColumnPair === void 0 ? void 0 : selectedFilterColumnPair.column;\n        this.selectedFilter = selectedFilterColumnPair === null || selectedFilterColumnPair === void 0 ? void 0 : selectedFilterColumnPair.filter;\n        this.dispatchEvent({\n            type: GroupFilter.EVENT_SELECTED_COLUMN_CHANGED\n        });\n        this.addUnderlyingFilterElement();\n    }\n    isFilterActive() {\n        var _a;\n        return !!((_a = this.filterColumnPairs) === null || _a === void 0 ? void 0 : _a.some(({ filter }) => filter.isFilterActive()));\n    }\n    doesFilterPass() {\n        return true;\n    }\n    getModel() {\n        return null;\n    }\n    setModel() {\n        return AgPromise.resolve();\n    }\n    afterGuiAttached(params) {\n        this.afterGuiAttachedParams = params;\n        this.addUnderlyingFilterElement();\n    }\n    afterGuiDetached() {\n        var _a, _b;\n        _.clearElement(this.eUnderlyingFilter);\n        (_b = (_a = this.selectedFilter) === null || _a === void 0 ? void 0 : _a.afterGuiDetached) === null || _b === void 0 ? void 0 : _b.call(_a);\n    }\n    onColumnRowGroupChanged() {\n        this.updateGroups().then(() => {\n            this.dispatchEvent({\n                type: GroupFilter.EVENT_COLUMN_ROW_GROUP_CHANGED\n            });\n            this.eventService.dispatchEvent({\n                type: 'filterAllowedUpdated'\n            });\n        });\n    }\n    getFilterColumnPair(columnId) {\n        var _a;\n        if (!columnId) {\n            return undefined;\n        }\n        return (_a = this.filterColumnPairs) === null || _a === void 0 ? void 0 : _a.find(({ column }) => column.getId() === columnId);\n    }\n    getSelectedFilter() {\n        return this.selectedFilter;\n    }\n    getSelectedColumn() {\n        return this.selectedColumn;\n    }\n    isFilterAllowed() {\n        return !!this.selectedColumn;\n    }\n    destroy() {\n        super.destroy();\n    }\n}\nGroupFilter.EVENT_COLUMN_ROW_GROUP_CHANGED = 'columnRowGroupChanged';\nGroupFilter.EVENT_SELECTED_COLUMN_CHANGED = 'selectedColumnChanged';\n__decorate([\n    Autowired('filterManager')\n], GroupFilter.prototype, \"filterManager\", void 0);\n__decorate([\n    Autowired('columnModel')\n], GroupFilter.prototype, \"columnModel\", void 0);\n__decorate([\n    RefSelector('eGroupField')\n], GroupFilter.prototype, \"eGroupField\", void 0);\n__decorate([\n    RefSelector('eUnderlyingFilter')\n], GroupFilter.prototype, \"eUnderlyingFilter\", void 0);\n__decorate([\n    PostConstruct\n], GroupFilter.prototype, \"postConstruct\", null);\n", "var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { _, AgInputTextField, AgPromise, Autowired, Column, Component, RefSelector, } from '@ag-grid-community/core';\nimport { GroupFilter } from './groupFilter.mjs';\nexport class GroupFloatingFilterComp extends Component {\n    constructor() {\n        super(/* html */ `\n            <div ref=\"eFloatingFilter\" class=\"ag-group-floating-filter ag-floating-filter-input\" role=\"presentation\"></div>\n        `);\n        this.haveAddedColumnListeners = false;\n    }\n    init(params) {\n        this.params = params;\n        // we only support showing the underlying floating filter for multiple group columns\n        const canShowUnderlyingFloatingFilter = this.gridOptionsService.get('groupDisplayType') === 'multipleColumns';\n        return new AgPromise(resolve => {\n            this.params.parentFilterInstance(parentFilterInstance => {\n                this.parentFilterInstance = parentFilterInstance;\n                if (canShowUnderlyingFloatingFilter) {\n                    this.setupUnderlyingFloatingFilterElement().then(() => resolve());\n                }\n                else {\n                    this.setupReadOnlyFloatingFilterElement();\n                    resolve();\n                }\n            });\n        }).then(() => {\n            this.addManagedListener(this.parentFilterInstance, GroupFilter.EVENT_SELECTED_COLUMN_CHANGED, () => this.onSelectedColumnChanged());\n            this.addManagedListener(this.parentFilterInstance, GroupFilter.EVENT_COLUMN_ROW_GROUP_CHANGED, () => this.onColumnRowGroupChanged());\n        });\n    }\n    onParamsUpdated(params) {\n        this.params = params;\n        this.setParams();\n    }\n    setParams() {\n        var _a;\n        const displayName = this.columnModel.getDisplayNameForColumn(this.params.column, 'header', true);\n        const translate = this.localeService.getLocaleTextFunc();\n        (_a = this.eFloatingFilterText) === null || _a === void 0 ? void 0 : _a.setInputAriaLabel(`${displayName} ${translate('ariaFilterInput', 'Filter Input')}`);\n    }\n    setupReadOnlyFloatingFilterElement() {\n        if (!this.eFloatingFilterText) {\n            this.eFloatingFilterText = this.createManagedBean(new AgInputTextField());\n            this.eFloatingFilterText\n                .setDisabled(true)\n                .addGuiEventListener('click', () => this.params.showParentFilter());\n            this.setParams();\n        }\n        this.updateDisplayedValue();\n        this.eFloatingFilter.appendChild(this.eFloatingFilterText.getGui());\n    }\n    setupUnderlyingFloatingFilterElement() {\n        this.showingUnderlyingFloatingFilter = false;\n        this.underlyingFloatingFilter = undefined;\n        _.clearElement(this.eFloatingFilter);\n        const column = this.parentFilterInstance.getSelectedColumn();\n        // we can only show the underlying filter if there is one instance (e.g. the underlying column is not visible)\n        if (column && !column.isVisible()) {\n            const compDetails = this.filterManager.getFloatingFilterCompDetails(column, this.params.showParentFilter);\n            if (compDetails) {\n                this.compDetails = compDetails;\n                if (!this.haveAddedColumnListeners) {\n                    this.haveAddedColumnListeners = true;\n                    this.addManagedListener(column, Column.EVENT_VISIBLE_CHANGED, this.onColumnVisibleChanged.bind(this));\n                    this.addManagedListener(column, Column.EVENT_COL_DEF_CHANGED, this.onColDefChanged.bind(this));\n                }\n                return compDetails.newAgStackInstance().then(floatingFilter => {\n                    var _a, _b;\n                    this.underlyingFloatingFilter = floatingFilter;\n                    (_a = this.underlyingFloatingFilter) === null || _a === void 0 ? void 0 : _a.onParentModelChanged((_b = this.parentFilterInstance.getSelectedFilter()) === null || _b === void 0 ? void 0 : _b.getModel());\n                    this.appendChild(floatingFilter.getGui());\n                    this.showingUnderlyingFloatingFilter = true;\n                });\n            }\n        }\n        // fallback to the read-only version\n        this.setupReadOnlyFloatingFilterElement();\n        return AgPromise.resolve();\n    }\n    onColumnVisibleChanged() {\n        this.setupUnderlyingFloatingFilterElement();\n    }\n    onColDefChanged(event) {\n        var _a, _b;\n        if (!event.column) {\n            return;\n        }\n        const compDetails = this.filterManager.getFloatingFilterCompDetails(event.column, this.params.showParentFilter);\n        if (compDetails) {\n            (_b = (_a = this.underlyingFloatingFilter) === null || _a === void 0 ? void 0 : _a.onParamsUpdated) === null || _b === void 0 ? void 0 : _b.call(_a, compDetails.params);\n        }\n    }\n    onParentModelChanged(_model, event) {\n        var _a, _b;\n        if (this.showingUnderlyingFloatingFilter) {\n            (_a = this.underlyingFloatingFilter) === null || _a === void 0 ? void 0 : _a.onParentModelChanged((_b = this.parentFilterInstance.getSelectedFilter()) === null || _b === void 0 ? void 0 : _b.getModel(), event);\n        }\n        else {\n            this.updateDisplayedValue();\n        }\n    }\n    updateDisplayedValue() {\n        if (!this.parentFilterInstance || !this.eFloatingFilterText) {\n            return;\n        }\n        const selectedFilter = this.parentFilterInstance.getSelectedFilter();\n        if (!selectedFilter) {\n            this.eFloatingFilterText.setValue('');\n            this.eFloatingFilterText.setDisplayed(false);\n            return;\n        }\n        this.eFloatingFilterText.setDisplayed(true);\n        if (selectedFilter.getModelAsString) {\n            const filterModel = selectedFilter.getModel();\n            this.eFloatingFilterText.setValue(filterModel == null ? '' : selectedFilter.getModelAsString(filterModel));\n        }\n        else {\n            this.eFloatingFilterText.setValue('');\n        }\n    }\n    onSelectedColumnChanged() {\n        if (!this.showingUnderlyingFloatingFilter) {\n            this.updateDisplayedValue();\n        }\n    }\n    onColumnRowGroupChanged() {\n        if (!this.showingUnderlyingFloatingFilter) {\n            this.updateDisplayedValue();\n        }\n    }\n    destroy() {\n        super.destroy();\n    }\n}\n__decorate([\n    Autowired('columnModel')\n], GroupFloatingFilterComp.prototype, \"columnModel\", void 0);\n__decorate([\n    Autowired('filterManager')\n], GroupFloatingFilterComp.prototype, \"filterManager\", void 0);\n__decorate([\n    RefSelector('eFloatingFilter')\n], GroupFloatingFilterComp.prototype, \"eFloatingFilter\", void 0);\n", "import { ModuleNames } from \"@ag-grid-community/core\";\nimport { EnterpriseCoreModule } from \"@ag-grid-enterprise/core\";\nimport { AggregationStage } from \"./rowGrouping/aggregationStage.mjs\";\nimport { GroupStage } from \"./rowGrouping/groupStage.mjs\";\nimport { PivotColDefService } from \"./rowGrouping/pivotColDefService.mjs\";\nimport { PivotStage } from \"./rowGrouping/pivotStage.mjs\";\nimport { AggFuncService } from \"./rowGrouping/aggFuncService.mjs\";\nimport { GridHeaderDropZones } from \"./rowGrouping/columnDropZones/gridHeaderDropZones.mjs\";\nimport { FilterAggregatesStage } from \"./rowGrouping/filterAggregatesStage.mjs\";\nimport { VERSION } from \"./version.mjs\";\nimport { GroupFilter } from \"./rowGrouping/groupFilter/groupFilter.mjs\";\nimport { GroupFloatingFilterComp } from \"./rowGrouping/groupFilter/groupFloatingFilter.mjs\";\nexport const RowGroupingModule = {\n    version: VERSION,\n    moduleName: ModuleNames.RowGroupingModule,\n    beans: [AggregationStage, FilterAggregatesStage, GroupStage, PivotColDefService, PivotStage, AggFuncService],\n    agStackComponents: [\n        { componentName: 'AgGridHeaderDropZones', componentClass: GridHeaderDropZones }\n    ],\n    userComponents: [\n        { componentName: 'agGroupColumnFilter', componentClass: GroupFilter },\n        { componentName: 'agGroupColumnFloatingFilter', componentClass: GroupFloatingFilterComp },\n    ],\n    dependantModules: [\n        EnterpriseCoreModule\n    ]\n};\n", "var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { _, Autowired, DragAndDropService, Events, PostConstruct } from \"@ag-grid-community/core\";\nimport { BaseDropZonePanel } from \"./baseDropZonePanel.mjs\";\nexport class ValuesDropZonePanel extends BaseDropZonePanel {\n    constructor(horizontal) {\n        super(horizontal, 'aggregation');\n    }\n    passBeansUp() {\n        super.setBeans({\n            gridOptionsService: this.gridOptionsService,\n            eventService: this.eventService,\n            context: this.getContext(),\n            loggerFactory: this.loggerFactory,\n            dragAndDropService: this.dragAndDropService\n        });\n        const localeTextFunc = this.localeService.getLocaleTextFunc();\n        const emptyMessage = localeTextFunc('valueColumnsEmptyMessage', 'Drag here to aggregate');\n        const title = localeTextFunc('values', 'Values');\n        super.init({\n            dragAndDropIcon: DragAndDropService.ICON_AGGREGATE,\n            icon: _.createIconNoSpan('valuePanel', this.gridOptionsService, null),\n            emptyMessage: emptyMessage,\n            title: title\n        });\n        this.addManagedListener(this.eventService, Events.EVENT_COLUMN_VALUE_CHANGED, this.refreshGui.bind(this));\n    }\n    getAriaLabel() {\n        const translate = this.localeService.getLocaleTextFunc();\n        const label = translate('ariaValuesDropZonePanelLabel', 'Values');\n        return label;\n    }\n    getTooltipParams() {\n        const res = super.getTooltipParams();\n        res.location = 'valueColumnsList';\n        return res;\n    }\n    getIconName() {\n        return this.isPotentialDndColumns() ? DragAndDropService.ICON_AGGREGATE : DragAndDropService.ICON_NOT_ALLOWED;\n    }\n    isColumnDroppable(column) {\n        // we never allow grouping of secondary columns\n        if (this.gridOptionsService.is('functionsReadOnly') || !column.isPrimary()) {\n            return false;\n        }\n        return column.isAllowValue() && !column.isValueActive();\n    }\n    updateColumns(columns) {\n        if (this.gridOptionsService.is('functionsPassive')) {\n            const event = {\n                type: Events.EVENT_COLUMN_VALUE_CHANGE_REQUEST,\n                columns: columns\n            };\n            this.eventService.dispatchEvent(event);\n        }\n        else {\n            this.columnModel.setValueColumns(columns, \"toolPanelUi\");\n        }\n    }\n    getExistingColumns() {\n        return this.columnModel.getValueColumns();\n    }\n}\n__decorate([\n    Autowired('columnModel')\n], ValuesDropZonePanel.prototype, \"columnModel\", void 0);\n__decorate([\n    Autowired('loggerFactory')\n], ValuesDropZonePanel.prototype, \"loggerFactory\", void 0);\n__decorate([\n    Autowired('dragAndDropService')\n], ValuesDropZonePanel.prototype, \"dragAndDropService\", void 0);\n__decorate([\n    PostConstruct\n], ValuesDropZonePanel.prototype, \"passBeansUp\", null);\n", "var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { Component, RefSelector, PositionableFeature } from \"@ag-grid-community/core\";\nexport class PrimaryColsPanel extends Component {\n    constructor() {\n        super(PrimaryColsPanel.TEMPLATE);\n    }\n    // we allow dragging in the toolPanel, but not when this component appears in the column menu\n    init(allowDragging, params, eventType) {\n        this.allowDragging = allowDragging;\n        this.params = params;\n        this.eventType = eventType;\n        this.primaryColsHeaderPanel.init(this.params);\n        const hideFilter = this.params.suppressColumnFilter;\n        const hideSelect = this.params.suppressColumnSelectAll;\n        const hideExpand = this.params.suppressColumnExpandAll;\n        if (hideExpand && hideFilter && hideSelect) {\n            this.primaryColsHeaderPanel.setDisplayed(false);\n        }\n        this.addManagedListener(this.primaryColsListPanel, 'groupExpanded', this.onGroupExpanded.bind(this));\n        this.addManagedListener(this.primaryColsListPanel, 'selectionChanged', this.onSelectionChange.bind(this));\n        this.primaryColsListPanel.init(this.params, this.allowDragging, this.eventType);\n        this.addManagedListener(this.primaryColsHeaderPanel, 'expandAll', this.onExpandAll.bind(this));\n        this.addManagedListener(this.primaryColsHeaderPanel, 'collapseAll', this.onCollapseAll.bind(this));\n        this.addManagedListener(this.primaryColsHeaderPanel, 'selectAll', this.onSelectAll.bind(this));\n        this.addManagedListener(this.primaryColsHeaderPanel, 'unselectAll', this.onUnselectAll.bind(this));\n        this.addManagedListener(this.primaryColsHeaderPanel, 'filterChanged', this.onFilterChanged.bind(this));\n        this.positionableFeature = new PositionableFeature(this.getGui(), { minHeight: 100 });\n        this.createManagedBean(this.positionableFeature);\n    }\n    toggleResizable(resizable) {\n        this.positionableFeature.setResizable(resizable ? { bottom: true } : false);\n    }\n    onExpandAll() {\n        this.primaryColsListPanel.doSetExpandedAll(true);\n    }\n    onCollapseAll() {\n        this.primaryColsListPanel.doSetExpandedAll(false);\n    }\n    expandGroups(groupIds) {\n        this.primaryColsListPanel.setGroupsExpanded(true, groupIds);\n    }\n    collapseGroups(groupIds) {\n        this.primaryColsListPanel.setGroupsExpanded(false, groupIds);\n    }\n    setColumnLayout(colDefs) {\n        this.primaryColsListPanel.setColumnLayout(colDefs);\n    }\n    onFilterChanged(event) {\n        this.primaryColsListPanel.setFilterText(event.filterText);\n    }\n    syncLayoutWithGrid() {\n        this.primaryColsListPanel.onColumnsChanged();\n    }\n    onSelectAll() {\n        this.primaryColsListPanel.doSetSelectedAll(true);\n    }\n    onUnselectAll() {\n        this.primaryColsListPanel.doSetSelectedAll(false);\n    }\n    onGroupExpanded(event) {\n        this.primaryColsHeaderPanel.setExpandState(event.state);\n    }\n    onSelectionChange(event) {\n        this.primaryColsHeaderPanel.setSelectionState(event.state);\n    }\n}\nPrimaryColsPanel.TEMPLATE = `<div class=\"ag-column-select\">\n            <ag-primary-cols-header ref=\"primaryColsHeaderPanel\"></ag-primary-cols-header>\n            <ag-primary-cols-list ref=\"primaryColsListPanel\"></ag-primary-cols-list>\n        </div>`;\n__decorate([\n    RefSelector('primaryColsHeaderPanel')\n], PrimaryColsPanel.prototype, \"primaryColsHeaderPanel\", void 0);\n__decorate([\n    RefSelector('primaryColsListPanel')\n], PrimaryColsPanel.prototype, \"primaryColsListPanel\", void 0);\n", "var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { _, Autowired, Component, Events, ModuleNames, ModuleRegistry } from \"@ag-grid-community/core\";\nimport { PivotModePanel } from \"./pivotModePanel.mjs\";\nimport { PivotDropZonePanel, RowGroupDropZonePanel, ValuesDropZonePanel } from \"@ag-grid-enterprise/row-grouping\";\nimport { PrimaryColsPanel } from \"./primaryColsPanel.mjs\";\nexport class ColumnToolPanel extends Component {\n    constructor() {\n        super(ColumnToolPanel.TEMPLATE);\n        this.initialised = false;\n        this.childDestroyFuncs = [];\n    }\n    // lazy initialise the panel\n    setVisible(visible) {\n        super.setDisplayed(visible);\n        if (visible && !this.initialised) {\n            this.init(this.params);\n        }\n    }\n    init(params) {\n        const defaultParams = {\n            suppressColumnMove: false,\n            suppressColumnSelectAll: false,\n            suppressColumnFilter: false,\n            suppressColumnExpandAll: false,\n            contractColumnSelection: false,\n            suppressPivotMode: false,\n            suppressRowGroups: false,\n            suppressValues: false,\n            suppressPivots: false,\n            suppressSyncLayoutWithGrid: false,\n            api: this.gridApi,\n            columnApi: this.columnApi,\n        };\n        this.params = Object.assign(Object.assign(Object.assign({}, defaultParams), params), { context: this.gridOptionsService.context });\n        if (this.isRowGroupingModuleLoaded() && !this.params.suppressPivotMode) {\n            // DO NOT CHANGE TO createManagedBean\n            this.pivotModePanel = this.createBean(new PivotModePanel());\n            this.childDestroyFuncs.push(() => this.destroyBean(this.pivotModePanel));\n            this.appendChild(this.pivotModePanel);\n        }\n        // DO NOT CHANGE TO createManagedBean\n        this.primaryColsPanel = this.createBean(new PrimaryColsPanel());\n        this.childDestroyFuncs.push(() => this.destroyBean(this.primaryColsPanel));\n        this.primaryColsPanel.init(true, this.params, \"toolPanelUi\");\n        this.primaryColsPanel.addCssClass('ag-column-panel-column-select');\n        this.appendChild(this.primaryColsPanel);\n        if (this.isRowGroupingModuleLoaded()) {\n            if (!this.params.suppressRowGroups) {\n                // DO NOT CHANGE TO createManagedBean\n                this.rowGroupDropZonePanel = this.createBean(new RowGroupDropZonePanel(false));\n                this.childDestroyFuncs.push(() => this.destroyBean(this.rowGroupDropZonePanel));\n                this.appendChild(this.rowGroupDropZonePanel);\n            }\n            if (!this.params.suppressValues) {\n                // DO NOT CHANGE TO createManagedBean\n                this.valuesDropZonePanel = this.createBean(new ValuesDropZonePanel(false));\n                this.childDestroyFuncs.push(() => this.destroyBean(this.valuesDropZonePanel));\n                this.appendChild(this.valuesDropZonePanel);\n            }\n            if (!this.params.suppressPivots) {\n                // DO NOT CHANGE TO createManagedBean\n                this.pivotDropZonePanel = this.createBean(new PivotDropZonePanel(false));\n                this.childDestroyFuncs.push(() => this.destroyBean(this.pivotDropZonePanel));\n                this.appendChild(this.pivotDropZonePanel);\n            }\n            this.setLastVisible();\n            const pivotModeListener = this.addManagedListener(this.eventService, Events.EVENT_COLUMN_PIVOT_MODE_CHANGED, () => {\n                this.resetChildrenHeight();\n                this.setLastVisible();\n            });\n            this.childDestroyFuncs.push(() => pivotModeListener());\n        }\n        this.initialised = true;\n    }\n    setPivotModeSectionVisible(visible) {\n        if (!this.isRowGroupingModuleLoaded()) {\n            return;\n        }\n        if (this.pivotModePanel) {\n            this.pivotModePanel.setDisplayed(visible);\n        }\n        else if (visible) {\n            this.pivotModePanel = this.createBean(new PivotModePanel());\n            // ensure pivot mode panel is positioned at the top of the columns tool panel\n            this.getGui().insertBefore(this.pivotModePanel.getGui(), this.getGui().firstChild);\n            this.childDestroyFuncs.push(() => this.destroyBean(this.pivotModePanel));\n        }\n        this.setLastVisible();\n    }\n    setRowGroupsSectionVisible(visible) {\n        if (!this.isRowGroupingModuleLoaded()) {\n            return;\n        }\n        if (this.rowGroupDropZonePanel) {\n            this.rowGroupDropZonePanel.setDisplayed(visible);\n        }\n        else if (visible) {\n            this.rowGroupDropZonePanel = this.createManagedBean(new RowGroupDropZonePanel(false));\n            this.appendChild(this.rowGroupDropZonePanel);\n        }\n        this.setLastVisible();\n    }\n    setValuesSectionVisible(visible) {\n        if (!this.isRowGroupingModuleLoaded()) {\n            return;\n        }\n        if (this.valuesDropZonePanel) {\n            this.valuesDropZonePanel.setDisplayed(visible);\n        }\n        else if (visible) {\n            this.valuesDropZonePanel = this.createManagedBean(new ValuesDropZonePanel(false));\n            this.appendChild(this.valuesDropZonePanel);\n        }\n        this.setLastVisible();\n    }\n    setPivotSectionVisible(visible) {\n        if (!this.isRowGroupingModuleLoaded()) {\n            return;\n        }\n        if (this.pivotDropZonePanel) {\n            this.pivotDropZonePanel.setDisplayed(visible);\n        }\n        else if (visible) {\n            this.pivotDropZonePanel = this.createManagedBean(new PivotDropZonePanel(false));\n            this.appendChild(this.pivotDropZonePanel);\n            this.pivotDropZonePanel.setDisplayed(visible);\n        }\n        this.setLastVisible();\n    }\n    setResizers() {\n        [\n            this.primaryColsPanel,\n            this.rowGroupDropZonePanel,\n            this.valuesDropZonePanel,\n            this.pivotDropZonePanel\n        ].forEach(panel => {\n            if (!panel) {\n                return;\n            }\n            const eGui = panel.getGui();\n            panel.toggleResizable(!eGui.classList.contains('ag-last-column-drop') && !eGui.classList.contains('ag-hidden'));\n        });\n    }\n    setLastVisible() {\n        const eGui = this.getGui();\n        const columnDrops = Array.prototype.slice.call(eGui.querySelectorAll('.ag-column-drop'));\n        columnDrops.forEach(columnDrop => columnDrop.classList.remove('ag-last-column-drop'));\n        const columnDropEls = eGui.querySelectorAll('.ag-column-drop:not(.ag-hidden)');\n        const lastVisible = _.last(columnDropEls);\n        if (lastVisible) {\n            lastVisible.classList.add('ag-last-column-drop');\n        }\n        this.setResizers();\n    }\n    resetChildrenHeight() {\n        const eGui = this.getGui();\n        const children = eGui.children;\n        for (let i = 0; i < children.length; i++) {\n            const child = children[i];\n            child.style.removeProperty('height');\n            child.style.removeProperty('flex');\n        }\n    }\n    isRowGroupingModuleLoaded() {\n        return ModuleRegistry.__assertRegistered(ModuleNames.RowGroupingModule, 'Row Grouping', this.context.getGridId());\n    }\n    expandColumnGroups(groupIds) {\n        this.primaryColsPanel.expandGroups(groupIds);\n    }\n    collapseColumnGroups(groupIds) {\n        this.primaryColsPanel.collapseGroups(groupIds);\n    }\n    setColumnLayout(colDefs) {\n        this.primaryColsPanel.setColumnLayout(colDefs);\n    }\n    syncLayoutWithGrid() {\n        this.primaryColsPanel.syncLayoutWithGrid();\n    }\n    destroyChildren() {\n        this.childDestroyFuncs.forEach(func => func());\n        this.childDestroyFuncs.length = 0;\n        _.clearElement(this.getGui());\n    }\n    refresh() {\n        this.destroyChildren();\n        this.init(this.params);\n    }\n    // this is a user component, and IComponent has \"public destroy()\" as part of the interface.\n    // so this must be public.\n    destroy() {\n        this.destroyChildren();\n        super.destroy();\n    }\n}\nColumnToolPanel.TEMPLATE = `<div class=\"ag-column-panel\"></div>`;\n__decorate([\n    Autowired(\"gridApi\")\n], ColumnToolPanel.prototype, \"gridApi\", void 0);\n__decorate([\n    Autowired(\"columnApi\")\n], ColumnToolPanel.prototype, \"columnApi\", void 0);\n", "var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { Events, Bean, Autowired, _ } from \"@ag-grid-community/core\";\nlet ModelItemUtils = class ModelItemUtils {\n    selectAllChildren(colTree, selectAllChecked, eventType) {\n        const cols = this.extractAllLeafColumns(colTree);\n        this.setAllColumns(cols, selectAllChecked, eventType);\n    }\n    setColumn(col, selectAllChecked, eventType) {\n        this.setAllColumns([col], selectAllChecked, eventType);\n    }\n    setAllColumns(cols, selectAllChecked, eventType) {\n        if (this.columnModel.isPivotMode()) {\n            this.setAllPivot(cols, selectAllChecked, eventType);\n        }\n        else {\n            this.setAllVisible(cols, selectAllChecked, eventType);\n        }\n    }\n    extractAllLeafColumns(allItems) {\n        const res = [];\n        const recursiveFunc = (items) => {\n            items.forEach(item => {\n                if (!item.isPassesFilter()) {\n                    return;\n                }\n                if (item.isGroup()) {\n                    recursiveFunc(item.getChildren());\n                }\n                else {\n                    res.push(item.getColumn());\n                }\n            });\n        };\n        recursiveFunc(allItems);\n        return res;\n    }\n    setAllVisible(columns, visible, eventType) {\n        const colStateItems = [];\n        columns.forEach(col => {\n            if (col.getColDef().lockVisible) {\n                return;\n            }\n            if (col.isVisible() != visible) {\n                colStateItems.push({\n                    colId: col.getId(),\n                    hide: !visible\n                });\n            }\n        });\n        if (colStateItems.length > 0) {\n            this.columnModel.applyColumnState({ state: colStateItems }, eventType);\n        }\n    }\n    setAllPivot(columns, value, eventType) {\n        if (this.gridOptionsService.is('functionsPassive')) {\n            this.setAllPivotPassive(columns, value);\n        }\n        else {\n            this.setAllPivotActive(columns, value, eventType);\n        }\n    }\n    setAllPivotPassive(columns, value) {\n        const copyOfPivotColumns = this.columnModel.getPivotColumns().slice();\n        const copyOfValueColumns = this.columnModel.getValueColumns().slice();\n        const copyOfRowGroupColumns = this.columnModel.getRowGroupColumns().slice();\n        let pivotChanged = false;\n        let valueChanged = false;\n        let rowGroupChanged = false;\n        const turnOnAction = (col) => {\n            // don't change any column that's already got a function active\n            if (col.isAnyFunctionActive()) {\n                return;\n            }\n            if (col.isAllowValue()) {\n                copyOfValueColumns.push(col);\n                valueChanged = true;\n            }\n            else if (col.isAllowRowGroup()) {\n                copyOfRowGroupColumns.push(col);\n                pivotChanged = true;\n            }\n            else if (col.isAllowPivot()) {\n                copyOfPivotColumns.push(col);\n                rowGroupChanged = true;\n            }\n        };\n        const turnOffAction = (col) => {\n            if (!col.isAnyFunctionActive()) {\n                return;\n            }\n            if (copyOfPivotColumns.indexOf(col) >= 0) {\n                _.removeFromArray(copyOfPivotColumns, col);\n                pivotChanged = true;\n            }\n            if (copyOfValueColumns.indexOf(col) >= 0) {\n                _.removeFromArray(copyOfValueColumns, col);\n                valueChanged = true;\n            }\n            if (copyOfRowGroupColumns.indexOf(col) >= 0) {\n                _.removeFromArray(copyOfRowGroupColumns, col);\n                rowGroupChanged = true;\n            }\n        };\n        const action = value ? turnOnAction : turnOffAction;\n        columns.forEach(action);\n        if (pivotChanged) {\n            const event = {\n                type: Events.EVENT_COLUMN_PIVOT_CHANGE_REQUEST,\n                columns: copyOfPivotColumns\n            };\n            this.eventService.dispatchEvent(event);\n        }\n        if (rowGroupChanged) {\n            const event = {\n                type: Events.EVENT_COLUMN_ROW_GROUP_CHANGE_REQUEST,\n                columns: copyOfRowGroupColumns\n            };\n            this.eventService.dispatchEvent(event);\n        }\n        if (valueChanged) {\n            const event = {\n                type: Events.EVENT_COLUMN_VALUE_CHANGE_REQUEST,\n                columns: copyOfRowGroupColumns\n            };\n            this.eventService.dispatchEvent(event);\n        }\n    }\n    setAllPivotActive(columns, value, eventType) {\n        const colStateItems = [];\n        const turnOnAction = (col) => {\n            // don't change any column that's already got a function active\n            if (col.isAnyFunctionActive()) {\n                return;\n            }\n            if (col.isAllowValue()) {\n                const aggFunc = typeof col.getAggFunc() === 'string'\n                    ? col.getAggFunc()\n                    : this.aggFuncService.getDefaultAggFunc(col);\n                colStateItems.push({\n                    colId: col.getId(),\n                    aggFunc: aggFunc\n                });\n            }\n            else if (col.isAllowRowGroup()) {\n                colStateItems.push({\n                    colId: col.getId(),\n                    rowGroup: true\n                });\n            }\n            else if (col.isAllowPivot()) {\n                colStateItems.push({\n                    colId: col.getId(),\n                    pivot: true\n                });\n            }\n        };\n        const turnOffAction = (col) => {\n            const isActive = col.isPivotActive() || col.isRowGroupActive() || col.isValueActive();\n            if (isActive) {\n                colStateItems.push({\n                    colId: col.getId(),\n                    pivot: false,\n                    rowGroup: false,\n                    aggFunc: null\n                });\n            }\n        };\n        const action = value ? turnOnAction : turnOffAction;\n        columns.forEach(action);\n        if (colStateItems.length > 0) {\n            this.columnModel.applyColumnState({ state: colStateItems }, eventType);\n        }\n    }\n    updateColumns(params) {\n        const { columns, visibleState, pivotState, eventType } = params;\n        const state = columns.map(column => {\n            const colId = column.getColId();\n            if (this.columnModel.isPivotMode()) {\n                const pivotStateForColumn = pivotState === null || pivotState === void 0 ? void 0 : pivotState[colId];\n                return {\n                    colId,\n                    pivot: pivotStateForColumn === null || pivotStateForColumn === void 0 ? void 0 : pivotStateForColumn.pivot,\n                    rowGroup: pivotStateForColumn === null || pivotStateForColumn === void 0 ? void 0 : pivotStateForColumn.rowGroup,\n                    aggFunc: pivotStateForColumn === null || pivotStateForColumn === void 0 ? void 0 : pivotStateForColumn.aggFunc,\n                };\n            }\n            else {\n                return {\n                    colId,\n                    hide: !(visibleState === null || visibleState === void 0 ? void 0 : visibleState[colId])\n                };\n            }\n        });\n        this.columnModel.applyColumnState({ state }, eventType);\n    }\n    createPivotState(column) {\n        return {\n            pivot: column.isPivotActive(),\n            rowGroup: column.isRowGroupActive(),\n            aggFunc: column.isValueActive() ? column.getAggFunc() : undefined\n        };\n    }\n};\n__decorate([\n    Autowired('aggFuncService')\n], ModelItemUtils.prototype, \"aggFuncService\", void 0);\n__decorate([\n    Autowired('columnModel')\n], ModelItemUtils.prototype, \"columnModel\", void 0);\n__decorate([\n    Autowired('gridOptionsService')\n], ModelItemUtils.prototype, \"gridOptionsService\", void 0);\n__decorate([\n    Autowired('eventService')\n], ModelItemUtils.prototype, \"eventService\", void 0);\nModelItemUtils = __decorate([\n    Bean('modelItemUtils')\n], ModelItemUtils);\nexport { ModelItemUtils };\n", "// DO NOT UPDATE MANUALLY: Generated from script during build time\nexport const VERSION = '30.2.1';\n", "import { ModuleNames } from \"@ag-grid-community/core\";\nimport { EnterpriseCoreModule } from \"@ag-grid-enterprise/core\";\nimport { PrimaryColsHeaderPanel } from \"./columnToolPanel/primaryColsHeaderPanel.mjs\";\nimport { PrimaryColsListPanel } from \"./columnToolPanel/primaryColsListPanel.mjs\";\nimport { ColumnToolPanel } from \"./columnToolPanel/columnToolPanel.mjs\";\nimport { PrimaryColsPanel } from \"./columnToolPanel/primaryColsPanel.mjs\";\nimport { RowGroupingModule } from \"@ag-grid-enterprise/row-grouping\";\nimport { SideBarModule } from \"@ag-grid-enterprise/side-bar\";\nimport { ModelItemUtils } from \"./columnToolPanel/modelItemUtils.mjs\";\nimport { VERSION } from \"./version.mjs\";\nexport const ColumnsToolPanelModule = {\n    version: VERSION,\n    moduleName: ModuleNames.ColumnsToolPanelModule,\n    beans: [ModelItemUtils],\n    agStackComponents: [\n        { componentName: 'AgPrimaryColsHeader', componentClass: PrimaryColsHeaderPanel },\n        { componentName: 'AgPrimaryColsList', componentClass: PrimaryColsListPanel },\n        { componentName: 'AgPrimaryCols', componentClass: PrimaryColsPanel }\n    ],\n    userComponents: [\n        { componentName: 'agColumnsToolPanel', componentClass: ColumnToolPanel },\n    ],\n    dependantModules: [\n        EnterpriseCoreModule,\n        RowGroupingModule,\n        SideBarModule\n    ]\n};\n"],
  "mappings": "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",
  "names": ["ExpandState", "__decorate", "__decorate", "__decorate", "__decorate", "__decorate", "__decorate", "__decorate", "AggregationStage", "__decorate", "GroupStage", "__decorate", "PivotColDefService", "uniqueValues", "key", "_a", "__decorate", "PivotStage", "__decorate", "AggFuncService", "__decorate", "__decorate", "__decorate", "__decorate", "__decorate", "__decorate", "FilterAggregatesStage", "params", "_a", "__decorate", "_a", "__decorate", "__decorate", "__decorate", "__decorate", "__decorate", "ModelItemUtils", "VERSION", "VERSION"]
}
