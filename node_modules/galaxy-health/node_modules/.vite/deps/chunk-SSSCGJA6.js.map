{
  "version": 3,
  "sources": ["../../../../../node_modules/@ag-grid-enterprise/side-bar/dist/esm/es6/sideBar/horizontalResizeComp.mjs", "../../../../../node_modules/@ag-grid-enterprise/side-bar/dist/esm/es6/sideBar/sideBarButtonComp.mjs", "../../../../../node_modules/@ag-grid-enterprise/side-bar/dist/esm/es6/sideBar/sideBarButtonsComp.mjs", "../../../../../node_modules/@ag-grid-enterprise/side-bar/dist/esm/es6/sideBar/sideBarDefParser.mjs", "../../../../../node_modules/@ag-grid-enterprise/side-bar/dist/esm/es6/sideBar/toolPanelWrapper.mjs", "../../../../../node_modules/@ag-grid-enterprise/side-bar/dist/esm/es6/sideBar/sideBarComp.mjs", "../../../../../node_modules/@ag-grid-enterprise/side-bar/dist/esm/es6/sideBar/common/toolPanelColDefService.mjs", "../../../../../node_modules/@ag-grid-enterprise/side-bar/dist/esm/es6/version.mjs", "../../../../../node_modules/@ag-grid-enterprise/side-bar/dist/esm/es6/sideBarModule.mjs"],
  "sourcesContent": ["var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { Autowired, Component, PostConstruct, Events } from \"@ag-grid-community/core\";\nexport class HorizontalResizeComp extends Component {\n    constructor() {\n        super(/* html */ `<div class=\"ag-tool-panel-horizontal-resize\"></div>`);\n        this.minWidth = 100;\n        this.maxWidth = null;\n    }\n    setElementToResize(elementToResize) {\n        this.elementToResize = elementToResize;\n    }\n    postConstruct() {\n        const finishedWithResizeFunc = this.horizontalResizeService.addResizeBar({\n            eResizeBar: this.getGui(),\n            dragStartPixels: 1,\n            onResizeStart: this.onResizeStart.bind(this),\n            onResizing: this.onResizing.bind(this),\n            onResizeEnd: this.onResizeEnd.bind(this)\n        });\n        this.addDestroyFunc(finishedWithResizeFunc);\n        this.setInverted(this.gridOptionsService.is('enableRtl'));\n    }\n    dispatchResizeEvent(start, end, width) {\n        const event = {\n            type: Events.EVENT_TOOL_PANEL_SIZE_CHANGED,\n            width: width,\n            started: start,\n            ended: end,\n        };\n        this.eventService.dispatchEvent(event);\n    }\n    onResizeStart() {\n        this.startingWidth = this.elementToResize.offsetWidth;\n        this.dispatchResizeEvent(true, false, this.startingWidth);\n    }\n    onResizeEnd(delta) {\n        return this.onResizing(delta, true);\n    }\n    onResizing(delta, isEnd = false) {\n        const direction = this.inverted ? -1 : 1;\n        let newWidth = Math.max(this.minWidth, Math.floor(this.startingWidth - (delta * direction)));\n        if (this.maxWidth != null) {\n            newWidth = Math.min(this.maxWidth, newWidth);\n        }\n        this.elementToResize.style.width = `${newWidth}px`;\n        this.dispatchResizeEvent(false, isEnd, newWidth);\n    }\n    setInverted(inverted) {\n        this.inverted = inverted;\n    }\n    setMaxWidth(value) {\n        this.maxWidth = value;\n    }\n    setMinWidth(value) {\n        if (value != null) {\n            this.minWidth = value;\n        }\n        else {\n            this.minWidth = 100;\n        }\n    }\n}\n__decorate([\n    Autowired('horizontalResizeService')\n], HorizontalResizeComp.prototype, \"horizontalResizeService\", void 0);\n__decorate([\n    PostConstruct\n], HorizontalResizeComp.prototype, \"postConstruct\", null);\n", "var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { Component, PostConstruct, RefSelector, _, } from \"@ag-grid-community/core\";\nexport class SideBarButtonComp extends Component {\n    constructor(toolPanelDef) {\n        super();\n        this.toolPanelDef = toolPanelDef;\n    }\n    getToolPanelId() {\n        return this.toolPanelDef.id;\n    }\n    postConstruct() {\n        const template = this.createTemplate();\n        this.setTemplate(template);\n        this.setLabel();\n        this.setIcon();\n        this.addManagedListener(this.eToggleButton, 'click', this.onButtonPressed.bind(this));\n        this.eToggleButton.setAttribute('id', `ag-${this.getCompId()}-button`);\n    }\n    createTemplate() {\n        const res = /* html */ `<div class=\"ag-side-button\" role=\"presentation\">\n                <button type=\"button\" ref=\"eToggleButton\" tabindex=\"-1\" role=\"tab\" aria-expanded=\"false\" class=\"ag-button ag-side-button-button\">\n                    <div ref=\"eIconWrapper\" class=\"ag-side-button-icon-wrapper\" aria-hidden=\"true\"></div>\n                    <span ref =\"eLabel\" class=\"ag-side-button-label\"></span>\n                </button>\n            </div>`;\n        return res;\n    }\n    setLabel() {\n        const translate = this.localeService.getLocaleTextFunc();\n        const def = this.toolPanelDef;\n        const label = translate(def.labelKey, def.labelDefault);\n        this.eLabel.innerText = label;\n    }\n    setIcon() {\n        this.eIconWrapper.insertAdjacentElement('afterbegin', _.createIconNoSpan(this.toolPanelDef.iconKey, this.gridOptionsService));\n    }\n    onButtonPressed() {\n        this.dispatchEvent({ type: SideBarButtonComp.EVENT_TOGGLE_BUTTON_CLICKED });\n    }\n    setSelected(selected) {\n        this.addOrRemoveCssClass('ag-selected', selected);\n        _.setAriaExpanded(this.eToggleButton, selected);\n    }\n    getButtonElement() {\n        return this.eToggleButton;\n    }\n}\nSideBarButtonComp.EVENT_TOGGLE_BUTTON_CLICKED = 'toggleButtonClicked';\n__decorate([\n    RefSelector('eToggleButton')\n], SideBarButtonComp.prototype, \"eToggleButton\", void 0);\n__decorate([\n    RefSelector('eIconWrapper')\n], SideBarButtonComp.prototype, \"eIconWrapper\", void 0);\n__decorate([\n    RefSelector('eLabel')\n], SideBarButtonComp.prototype, \"eLabel\", void 0);\n__decorate([\n    PostConstruct\n], SideBarButtonComp.prototype, \"postConstruct\", null);\n", "var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { Autowired, Component, PostConstruct, PreDestroy, _, KeyCode } from \"@ag-grid-community/core\";\nimport { SideBarButtonComp } from \"./sideBarButtonComp.mjs\";\nexport class SideBarButtonsComp extends Component {\n    constructor() {\n        super(SideBarButtonsComp.TEMPLATE);\n        this.buttonComps = [];\n    }\n    postConstruct() {\n        this.addManagedListener(this.getFocusableElement(), 'keydown', this.handleKeyDown.bind(this));\n    }\n    handleKeyDown(e) {\n        if (e.key !== KeyCode.TAB || !e.shiftKey) {\n            return;\n        }\n        const lastColumn = _.last(this.columnModel.getAllDisplayedColumns());\n        if (this.focusService.focusGridView(lastColumn, true)) {\n            e.preventDefault();\n        }\n    }\n    setActiveButton(id) {\n        this.buttonComps.forEach(comp => {\n            comp.setSelected(id === comp.getToolPanelId());\n        });\n    }\n    addButtonComp(def) {\n        const buttonComp = this.createBean(new SideBarButtonComp(def));\n        this.buttonComps.push(buttonComp);\n        this.appendChild(buttonComp);\n        buttonComp.addEventListener(SideBarButtonComp.EVENT_TOGGLE_BUTTON_CLICKED, () => {\n            this.dispatchEvent({\n                type: SideBarButtonsComp.EVENT_SIDE_BAR_BUTTON_CLICKED,\n                toolPanelId: def.id\n            });\n        });\n        return buttonComp;\n    }\n    clearButtons() {\n        this.buttonComps = this.destroyBeans(this.buttonComps);\n        _.clearElement(this.getGui());\n    }\n}\nSideBarButtonsComp.EVENT_SIDE_BAR_BUTTON_CLICKED = 'sideBarButtonClicked';\nSideBarButtonsComp.TEMPLATE = `<div class=\"ag-side-buttons\" role=\"tablist\"></div>`;\n__decorate([\n    Autowired('focusService')\n], SideBarButtonsComp.prototype, \"focusService\", void 0);\n__decorate([\n    Autowired('columnModel')\n], SideBarButtonsComp.prototype, \"columnModel\", void 0);\n__decorate([\n    PostConstruct\n], SideBarButtonsComp.prototype, \"postConstruct\", null);\n__decorate([\n    PreDestroy\n], SideBarButtonsComp.prototype, \"clearButtons\", null);\n", "export class SideBarDefParser {\n    static parse(toParse) {\n        if (!toParse) {\n            return undefined;\n        }\n        if (toParse === true) {\n            return {\n                toolPanels: [\n                    SideBarDefParser.DEFAULT_COLUMN_COMP,\n                    SideBarDefParser.DEFAULT_FILTER_COMP,\n                ],\n                defaultToolPanel: 'columns'\n            };\n        }\n        if (typeof toParse === 'string') {\n            return SideBarDefParser.parse([toParse]);\n        }\n        if (Array.isArray(toParse)) {\n            const comps = [];\n            toParse.forEach(key => {\n                const lookupResult = SideBarDefParser.DEFAULT_BY_KEY[key];\n                if (!lookupResult) {\n                    console.warn(`AG Grid: the key ${key} is not a valid key for specifying a tool panel, valid keys are: ${Object.keys(SideBarDefParser.DEFAULT_BY_KEY).join(',')}`);\n                    return;\n                }\n                comps.push(lookupResult);\n            });\n            if (comps.length === 0) {\n                return undefined;\n            }\n            return {\n                toolPanels: comps,\n                defaultToolPanel: comps[0].id\n            };\n        }\n        const result = {\n            toolPanels: SideBarDefParser.parseComponents(toParse.toolPanels),\n            defaultToolPanel: toParse.defaultToolPanel,\n            hiddenByDefault: toParse.hiddenByDefault,\n            position: toParse.position\n        };\n        return result;\n    }\n    static parseComponents(from) {\n        const result = [];\n        if (!from) {\n            return result;\n        }\n        from.forEach((it) => {\n            let toAdd = null;\n            if (typeof it === 'string') {\n                const lookupResult = SideBarDefParser.DEFAULT_BY_KEY[it];\n                if (!lookupResult) {\n                    console.warn(`AG Grid: the key ${it} is not a valid key for specifying a tool panel, valid keys are: ${Object.keys(SideBarDefParser.DEFAULT_BY_KEY).join(',')}`);\n                    return;\n                }\n                toAdd = lookupResult;\n            }\n            else {\n                toAdd = it;\n            }\n            result.push(toAdd);\n        });\n        return result;\n    }\n}\nSideBarDefParser.DEFAULT_COLUMN_COMP = {\n    id: 'columns',\n    labelDefault: 'Columns',\n    labelKey: 'columns',\n    iconKey: 'columns',\n    toolPanel: 'agColumnsToolPanel',\n};\nSideBarDefParser.DEFAULT_FILTER_COMP = {\n    id: 'filters',\n    labelDefault: 'Filters',\n    labelKey: 'filters',\n    iconKey: 'filter',\n    toolPanel: 'agFiltersToolPanel',\n};\nSideBarDefParser.DEFAULT_BY_KEY = {\n    columns: SideBarDefParser.DEFAULT_COLUMN_COMP,\n    filters: SideBarDefParser.DEFAULT_FILTER_COMP\n};\n", "var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { Autowired, Component, PostConstruct } from \"@ag-grid-community/core\";\nimport { HorizontalResizeComp } from \"./horizontalResizeComp.mjs\";\nexport class ToolPanelWrapper extends Component {\n    constructor() {\n        super(ToolPanelWrapper.TEMPLATE);\n    }\n    setupResize() {\n        const eGui = this.getGui();\n        const resizeBar = this.resizeBar = this.createManagedBean(new HorizontalResizeComp());\n        eGui.setAttribute('id', `ag-${this.getCompId()}`);\n        resizeBar.setElementToResize(eGui);\n        this.appendChild(resizeBar);\n    }\n    getToolPanelId() {\n        return this.toolPanelId;\n    }\n    setToolPanelDef(toolPanelDef) {\n        const { id, minWidth, maxWidth, width } = toolPanelDef;\n        this.toolPanelId = id;\n        this.width = width;\n        const params = {};\n        const compDetails = this.userComponentFactory.getToolPanelCompDetails(toolPanelDef, params);\n        const componentPromise = compDetails.newAgStackInstance();\n        if (componentPromise == null) {\n            console.warn(`AG Grid: error processing tool panel component ${id}. You need to specify 'toolPanel'`);\n            return;\n        }\n        componentPromise.then(this.setToolPanelComponent.bind(this));\n        if (minWidth != null) {\n            this.resizeBar.setMinWidth(minWidth);\n        }\n        if (maxWidth != null) {\n            this.resizeBar.setMaxWidth(maxWidth);\n        }\n    }\n    setToolPanelComponent(compInstance) {\n        this.toolPanelCompInstance = compInstance;\n        this.appendChild(compInstance.getGui());\n        this.addDestroyFunc(() => {\n            this.destroyBean(compInstance);\n        });\n        if (this.width) {\n            this.getGui().style.width = `${this.width}px`;\n        }\n    }\n    getToolPanelInstance() {\n        return this.toolPanelCompInstance;\n    }\n    setResizerSizerSide(side) {\n        const isRtl = this.gridOptionsService.is('enableRtl');\n        const isLeft = side === 'left';\n        const inverted = isRtl ? isLeft : !isLeft;\n        this.resizeBar.setInverted(inverted);\n    }\n    refresh() {\n        this.toolPanelCompInstance.refresh();\n    }\n}\nToolPanelWrapper.TEMPLATE = `<div class=\"ag-tool-panel-wrapper\" role=\"tabpanel\"/>`;\n__decorate([\n    Autowired(\"userComponentFactory\")\n], ToolPanelWrapper.prototype, \"userComponentFactory\", void 0);\n__decorate([\n    PostConstruct\n], ToolPanelWrapper.prototype, \"setupResize\", null);\n", "var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { _, Component, Events, ModuleNames, ModuleRegistry, PostConstruct, RefSelector, Autowired, ManagedFocusFeature, KeyCode } from \"@ag-grid-community/core\";\nimport { SideBarButtonsComp } from \"./sideBarButtonsComp.mjs\";\nimport { SideBarDefParser } from \"./sideBarDefParser.mjs\";\nimport { ToolPanelWrapper } from \"./toolPanelWrapper.mjs\";\nexport class SideBarComp extends Component {\n    constructor() {\n        super(SideBarComp.TEMPLATE);\n        this.toolPanelWrappers = [];\n    }\n    postConstruct() {\n        this.sideBarButtonsComp.addEventListener(SideBarButtonsComp.EVENT_SIDE_BAR_BUTTON_CLICKED, this.onToolPanelButtonClicked.bind(this));\n        this.setSideBarDef();\n        this.addManagedPropertyListener('sideBar', () => {\n            this.clearDownUi();\n            this.setSideBarDef();\n        });\n        this.gridApi.registerSideBarComp(this);\n        this.createManagedBean(new ManagedFocusFeature(this.getFocusableElement(), {\n            onTabKeyDown: this.onTabKeyDown.bind(this),\n            handleKeyDown: this.handleKeyDown.bind(this)\n        }));\n    }\n    onTabKeyDown(e) {\n        if (e.defaultPrevented) {\n            return;\n        }\n        const { focusService, sideBarButtonsComp } = this;\n        const eGui = this.getGui();\n        const sideBarGui = sideBarButtonsComp.getGui();\n        const eDocument = this.gridOptionsService.getDocument();\n        const activeElement = eDocument.activeElement;\n        const openPanel = eGui.querySelector('.ag-tool-panel-wrapper:not(.ag-hidden)');\n        const target = e.target;\n        if (!openPanel) {\n            return;\n        }\n        if (sideBarGui.contains(activeElement)) {\n            if (focusService.focusInto(openPanel, e.shiftKey)) {\n                e.preventDefault();\n            }\n            return;\n        }\n        // only handle backwards focus to target the sideBar buttons\n        if (!e.shiftKey) {\n            return;\n        }\n        let nextEl = null;\n        if (openPanel.contains(activeElement)) {\n            nextEl = this.focusService.findNextFocusableElement(openPanel, undefined, true);\n        }\n        else if (focusService.isTargetUnderManagedComponent(openPanel, target) && e.shiftKey) {\n            nextEl = this.focusService.findFocusableElementBeforeTabGuard(openPanel, target);\n        }\n        if (!nextEl) {\n            nextEl = sideBarGui.querySelector('.ag-selected button');\n        }\n        if (nextEl) {\n            e.preventDefault();\n            nextEl.focus();\n        }\n    }\n    handleKeyDown(e) {\n        const eDocument = this.gridOptionsService.getDocument();\n        if (!this.sideBarButtonsComp.getGui().contains(eDocument.activeElement)) {\n            return;\n        }\n        const sideBarGui = this.sideBarButtonsComp.getGui();\n        const buttons = Array.prototype.slice.call(sideBarGui.querySelectorAll('.ag-side-button'));\n        const currentButton = eDocument.activeElement;\n        const currentPos = buttons.findIndex(button => button.contains(currentButton));\n        let nextPos = null;\n        switch (e.key) {\n            case KeyCode.LEFT:\n            case KeyCode.UP:\n                nextPos = Math.max(0, currentPos - 1);\n                break;\n            case KeyCode.RIGHT:\n            case KeyCode.DOWN:\n                nextPos = Math.min(currentPos + 1, buttons.length - 1);\n                break;\n        }\n        if (nextPos === null) {\n            return;\n        }\n        const innerButton = buttons[nextPos].querySelector('button');\n        if (innerButton) {\n            innerButton.focus();\n            e.preventDefault();\n        }\n    }\n    onToolPanelButtonClicked(event) {\n        const id = event.toolPanelId;\n        const openedItem = this.openedItem();\n        // if item was already open, we close it\n        if (openedItem === id) {\n            this.openToolPanel(undefined, 'sideBarButtonClicked'); // passing undefined closes\n        }\n        else {\n            this.openToolPanel(id, 'sideBarButtonClicked');\n        }\n    }\n    clearDownUi() {\n        this.sideBarButtonsComp.clearButtons();\n        this.destroyToolPanelWrappers();\n    }\n    setSideBarDef() {\n        // initially hide side bar\n        this.setDisplayed(false);\n        const sideBarRaw = this.gridOptionsService.get('sideBar');\n        this.sideBar = SideBarDefParser.parse(sideBarRaw);\n        if (!!this.sideBar && !!this.sideBar.toolPanels) {\n            const toolPanelDefs = this.sideBar.toolPanels;\n            this.createToolPanelsAndSideButtons(toolPanelDefs);\n            if (!this.toolPanelWrappers.length) {\n                return;\n            }\n            const shouldDisplaySideBar = !this.sideBar.hiddenByDefault;\n            this.setDisplayed(shouldDisplaySideBar);\n            this.setSideBarPosition(this.sideBar.position);\n            if (!this.sideBar.hiddenByDefault) {\n                this.openToolPanel(this.sideBar.defaultToolPanel, 'sideBarInitializing');\n            }\n        }\n    }\n    getDef() {\n        return this.sideBar;\n    }\n    setSideBarPosition(position) {\n        if (!position) {\n            position = 'right';\n        }\n        const isLeft = position === 'left';\n        const resizerSide = isLeft ? 'right' : 'left';\n        this.addOrRemoveCssClass('ag-side-bar-left', isLeft);\n        this.addOrRemoveCssClass('ag-side-bar-right', !isLeft);\n        this.toolPanelWrappers.forEach(wrapper => {\n            wrapper.setResizerSizerSide(resizerSide);\n        });\n        return this;\n    }\n    createToolPanelsAndSideButtons(defs) {\n        for (const def of defs) {\n            this.createToolPanelAndSideButton(def);\n        }\n    }\n    validateDef(def) {\n        if (def.id == null) {\n            console.warn(`AG Grid: please review all your toolPanel components, it seems like at least one of them doesn't have an id`);\n            return false;\n        }\n        // helpers, in case user doesn't have the right module loaded\n        if (def.toolPanel === 'agColumnsToolPanel') {\n            const moduleMissing = !ModuleRegistry.__assertRegistered(ModuleNames.ColumnsToolPanelModule, 'Column Tool Panel', this.context.getGridId());\n            if (moduleMissing) {\n                return false;\n            }\n        }\n        if (def.toolPanel === 'agFiltersToolPanel') {\n            const moduleMissing = !ModuleRegistry.__assertRegistered(ModuleNames.FiltersToolPanelModule, 'Filters Tool Panel', this.context.getGridId());\n            if (moduleMissing) {\n                return false;\n            }\n            if (this.filterManager.isAdvancedFilterEnabled()) {\n                _.doOnce(() => {\n                    console.warn('AG Grid: Advanced Filter does not work with Filters Tool Panel. Filters Tool Panel has been disabled.');\n                }, 'advancedFilterToolPanel');\n                return false;\n            }\n        }\n        return true;\n    }\n    createToolPanelAndSideButton(def) {\n        if (!this.validateDef(def)) {\n            return;\n        }\n        const button = this.sideBarButtonsComp.addButtonComp(def);\n        const wrapper = this.getContext().createBean(new ToolPanelWrapper());\n        wrapper.setToolPanelDef(def);\n        wrapper.setDisplayed(false);\n        const wrapperGui = wrapper.getGui();\n        this.appendChild(wrapperGui);\n        this.toolPanelWrappers.push(wrapper);\n        _.setAriaControls(button.getButtonElement(), wrapperGui);\n    }\n    refresh() {\n        this.toolPanelWrappers.forEach(wrapper => wrapper.refresh());\n    }\n    openToolPanel(key, source = 'api') {\n        const currentlyOpenedKey = this.openedItem();\n        if (currentlyOpenedKey === key) {\n            return;\n        }\n        this.toolPanelWrappers.forEach(wrapper => {\n            const show = key === wrapper.getToolPanelId();\n            wrapper.setDisplayed(show);\n        });\n        const newlyOpenedKey = this.openedItem();\n        const openToolPanelChanged = currentlyOpenedKey !== newlyOpenedKey;\n        if (openToolPanelChanged) {\n            this.sideBarButtonsComp.setActiveButton(key);\n            this.raiseToolPanelVisibleEvent(key, currentlyOpenedKey !== null && currentlyOpenedKey !== void 0 ? currentlyOpenedKey : undefined, source);\n        }\n    }\n    getToolPanelInstance(key) {\n        const toolPanelWrapper = this.toolPanelWrappers.filter(toolPanel => toolPanel.getToolPanelId() === key)[0];\n        if (!toolPanelWrapper) {\n            console.warn(`AG Grid: unable to lookup Tool Panel as invalid key supplied: ${key}`);\n            return;\n        }\n        return toolPanelWrapper.getToolPanelInstance();\n    }\n    raiseToolPanelVisibleEvent(key, previousKey, source) {\n        const switchingToolPanel = !!key && !!previousKey;\n        if (previousKey) {\n            const event = {\n                type: Events.EVENT_TOOL_PANEL_VISIBLE_CHANGED,\n                source,\n                key: previousKey,\n                visible: false,\n                switchingToolPanel,\n            };\n            this.eventService.dispatchEvent(event);\n        }\n        if (key) {\n            const event = {\n                type: Events.EVENT_TOOL_PANEL_VISIBLE_CHANGED,\n                source,\n                key,\n                visible: true,\n                switchingToolPanel,\n            };\n            this.eventService.dispatchEvent(event);\n        }\n    }\n    close(source = 'api') {\n        this.openToolPanel(undefined, source);\n    }\n    isToolPanelShowing() {\n        return !!this.openedItem();\n    }\n    openedItem() {\n        let activeToolPanel = null;\n        this.toolPanelWrappers.forEach(wrapper => {\n            if (wrapper.isDisplayed()) {\n                activeToolPanel = wrapper.getToolPanelId();\n            }\n        });\n        return activeToolPanel;\n    }\n    destroyToolPanelWrappers() {\n        this.toolPanelWrappers.forEach(wrapper => {\n            _.removeFromParent(wrapper.getGui());\n            this.destroyBean(wrapper);\n        });\n        this.toolPanelWrappers.length = 0;\n    }\n    destroy() {\n        this.destroyToolPanelWrappers();\n        super.destroy();\n    }\n}\nSideBarComp.TEMPLATE = `<div class=\"ag-side-bar ag-unselectable\">\n            <ag-side-bar-buttons ref=\"sideBarButtons\"></ag-side-bar-buttons>\n        </div>`;\n__decorate([\n    Autowired('gridApi')\n], SideBarComp.prototype, \"gridApi\", void 0);\n__decorate([\n    Autowired('focusService')\n], SideBarComp.prototype, \"focusService\", void 0);\n__decorate([\n    Autowired('filterManager')\n], SideBarComp.prototype, \"filterManager\", void 0);\n__decorate([\n    RefSelector('sideBarButtons')\n], SideBarComp.prototype, \"sideBarButtonsComp\", void 0);\n__decorate([\n    PostConstruct\n], SideBarComp.prototype, \"postConstruct\", null);\n", "var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { _, Autowired, Bean, BeanStub, ProvidedColumnGroup } from \"@ag-grid-community/core\";\nlet ToolPanelColDefService = class ToolPanelColDefService extends BeanStub {\n    constructor() {\n        super(...arguments);\n        this.isColGroupDef = (colDef) => colDef && typeof colDef.children !== 'undefined';\n        this.getId = (colDef) => {\n            return this.isColGroupDef(colDef) ? colDef.groupId : colDef.colId;\n        };\n    }\n    createColumnTree(colDefs) {\n        const invalidColIds = [];\n        const createDummyColGroup = (abstractColDef, depth) => {\n            if (this.isColGroupDef(abstractColDef)) {\n                // creating 'dummy' group which is not associated with grid column group\n                const groupDef = abstractColDef;\n                const groupId = (typeof groupDef.groupId !== 'undefined') ? groupDef.groupId : groupDef.headerName;\n                const group = new ProvidedColumnGroup(groupDef, groupId, false, depth);\n                const children = [];\n                groupDef.children.forEach(def => {\n                    const child = createDummyColGroup(def, depth + 1);\n                    // check column exists in case invalid colDef is supplied for primary column\n                    if (child) {\n                        children.push(child);\n                    }\n                });\n                group.setChildren(children);\n                return group;\n            }\n            else {\n                const colDef = abstractColDef;\n                const key = colDef.colId ? colDef.colId : colDef.field;\n                const column = this.columnModel.getPrimaryColumn(key);\n                if (!column) {\n                    invalidColIds.push(colDef);\n                }\n                return column;\n            }\n        };\n        const mappedResults = [];\n        colDefs.forEach(colDef => {\n            const result = createDummyColGroup(colDef, 0);\n            if (result) {\n                // only return correctly mapped colDef results\n                mappedResults.push(result);\n            }\n        });\n        if (invalidColIds.length > 0) {\n            console.warn('AG Grid: unable to find grid columns for the supplied colDef(s):', invalidColIds);\n        }\n        return mappedResults;\n    }\n    syncLayoutWithGrid(syncLayoutCallback) {\n        // extract ordered list of leaf path trees (column group hierarchy for each individual leaf column)\n        const leafPathTrees = this.getLeafPathTrees();\n        // merge leaf path tree taking split column groups into account\n        const mergedColumnTrees = this.mergeLeafPathTrees(leafPathTrees);\n        // sync layout with merged column trees\n        syncLayoutCallback(mergedColumnTrees);\n    }\n    getLeafPathTrees() {\n        // leaf tree paths are obtained by walking up the tree starting at a column until we reach the top level group.\n        const getLeafPathTree = (node, childDef) => {\n            let leafPathTree;\n            // build up tree in reverse order\n            if (node instanceof ProvidedColumnGroup) {\n                if (node.isPadding()) {\n                    // skip over padding groups\n                    leafPathTree = childDef;\n                }\n                else {\n                    const groupDef = Object.assign({}, node.getColGroupDef());\n                    // ensure group contains groupId\n                    groupDef.groupId = node.getGroupId();\n                    groupDef.children = [childDef];\n                    leafPathTree = groupDef;\n                }\n            }\n            else {\n                const colDef = Object.assign({}, node.getColDef());\n                // ensure col contains colId\n                colDef.colId = node.getColId();\n                leafPathTree = colDef;\n            }\n            // walk tree\n            const parent = node.getOriginalParent();\n            if (parent) {\n                // keep walking up the tree until we reach the root\n                return getLeafPathTree(parent, leafPathTree);\n            }\n            else {\n                // we have reached the root - exit with resulting leaf path tree\n                return leafPathTree;\n            }\n        };\n        // obtain a sorted list of all grid columns\n        const allGridColumns = this.columnModel.getAllGridColumns();\n        // only primary columns and non row group columns should appear in the tool panel\n        const allPrimaryGridColumns = allGridColumns.filter(column => {\n            const colDef = column.getColDef();\n            return column.isPrimary() && !colDef.showRowGroup;\n        });\n        // construct a leaf path tree for each column\n        return allPrimaryGridColumns.map(col => getLeafPathTree(col, col.getColDef()));\n    }\n    mergeLeafPathTrees(leafPathTrees) {\n        const matchingRootGroupIds = (pathA, pathB) => {\n            const bothPathsAreGroups = this.isColGroupDef(pathA) && this.isColGroupDef(pathB);\n            return bothPathsAreGroups && this.getId(pathA) === this.getId(pathB);\n        };\n        const mergeTrees = (treeA, treeB) => {\n            if (!this.isColGroupDef(treeB)) {\n                return treeA;\n            }\n            const mergeResult = treeA;\n            const groupToMerge = treeB;\n            if (groupToMerge.children && groupToMerge.groupId) {\n                const added = this.addChildrenToGroup(mergeResult, groupToMerge.groupId, groupToMerge.children[0]);\n                if (added) {\n                    return mergeResult;\n                }\n            }\n            groupToMerge.children.forEach(child => mergeTrees(mergeResult, child));\n            return mergeResult;\n        };\n        // we can't just merge the leaf path trees as groups can be split apart - instead only merge if leaf\n        // path groups with the same root group id are contiguous.\n        const mergeColDefs = [];\n        for (let i = 1; i <= leafPathTrees.length; i++) {\n            const first = leafPathTrees[i - 1];\n            const second = leafPathTrees[i];\n            if (matchingRootGroupIds(first, second)) {\n                leafPathTrees[i] = mergeTrees(first, second);\n            }\n            else {\n                mergeColDefs.push(first);\n            }\n        }\n        return mergeColDefs;\n    }\n    addChildrenToGroup(tree, groupId, colDef) {\n        const subGroupIsSplit = (currentSubGroup, currentSubGroupToAdd) => {\n            const existingChildIds = currentSubGroup.children.map(this.getId);\n            const childGroupAlreadyExists = _.includes(existingChildIds, this.getId(currentSubGroupToAdd));\n            const lastChild = _.last(currentSubGroup.children);\n            const lastChildIsDifferent = lastChild && this.getId(lastChild) !== this.getId(currentSubGroupToAdd);\n            return childGroupAlreadyExists && lastChildIsDifferent;\n        };\n        if (!this.isColGroupDef(tree)) {\n            return true;\n        }\n        const currentGroup = tree;\n        const groupToAdd = colDef;\n        if (subGroupIsSplit(currentGroup, groupToAdd)) {\n            currentGroup.children.push(groupToAdd);\n            return true;\n        }\n        if (currentGroup.groupId === groupId) {\n            // add children that don't already exist to group\n            const existingChildIds = currentGroup.children.map(this.getId);\n            const colDefAlreadyPresent = _.includes(existingChildIds, this.getId(groupToAdd));\n            if (!colDefAlreadyPresent) {\n                currentGroup.children.push(groupToAdd);\n                return true;\n            }\n        }\n        // recurse until correct group is found to add children\n        currentGroup.children.forEach(subGroup => this.addChildrenToGroup(subGroup, groupId, colDef));\n        return false;\n    }\n};\n__decorate([\n    Autowired('columnModel')\n], ToolPanelColDefService.prototype, \"columnModel\", void 0);\nToolPanelColDefService = __decorate([\n    Bean('toolPanelColDefService')\n], ToolPanelColDefService);\nexport { ToolPanelColDefService };\n", "// DO NOT UPDATE MANUALLY: Generated from script during build time\nexport const VERSION = '30.2.1';\n", "import { ModuleNames } from \"@ag-grid-community/core\";\nimport { EnterpriseCoreModule } from \"@ag-grid-enterprise/core\";\nimport { HorizontalResizeComp } from \"./sideBar/horizontalResizeComp.mjs\";\nimport { SideBarComp } from \"./sideBar/sideBarComp.mjs\";\nimport { SideBarButtonsComp } from \"./sideBar/sideBarButtonsComp.mjs\";\nimport { ToolPanelColDefService } from \"./sideBar/common/toolPanelColDefService.mjs\";\nimport { VERSION } from \"./version.mjs\";\nexport const SideBarModule = {\n    version: VERSION,\n    moduleName: ModuleNames.SideBarModule,\n    beans: [ToolPanelColDefService],\n    agStackComponents: [\n        { componentName: 'AgHorizontalResize', componentClass: HorizontalResizeComp },\n        { componentName: 'AgSideBar', componentClass: SideBarComp },\n        { componentName: 'AgSideBarButtons', componentClass: SideBarButtonsComp },\n    ],\n    dependantModules: [\n        EnterpriseCoreModule\n    ]\n};\n"],
  "mappings": "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",
  "names": ["__decorate", "__decorate", "__decorate", "__decorate", "__decorate", "ToolPanelColDefService"]
}
